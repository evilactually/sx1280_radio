
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  24000000  08008aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000067c  24000104  08008bac  00020104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000780  08008bac  00020780  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015e82  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d42  00000000  00000000  00035fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011c8  00000000  00000000  00038cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001050  00000000  00000000  00039ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000392e7  00000000  00000000  0003af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017242  00000000  00000000  000741f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001698c3  00000000  00000000  0008b439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f4cfc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004cf8  00000000  00000000  001f4d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000104 	.word	0x24000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007fac 	.word	0x08007fac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000108 	.word	0x24000108
 80002dc:	08007fac 	.word	0x08007fac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <MX_GPIO_Init+0x100>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a38      	ldr	r2, [pc, #224]	; (8000480 <MX_GPIO_Init+0x100>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <MX_GPIO_Init+0x100>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_GPIO_Init+0x100>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a31      	ldr	r2, [pc, #196]	; (8000480 <MX_GPIO_Init+0x100>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_GPIO_Init+0x100>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_GPIO_Init+0x100>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a29      	ldr	r2, [pc, #164]	; (8000480 <MX_GPIO_Init+0x100>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <MX_GPIO_Init+0x100>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0x100>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	481c      	ldr	r0, [pc, #112]	; (8000484 <MX_GPIO_Init+0x104>)
 8000414:	f002 fff0 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <MX_GPIO_Init+0x104>)
 8000420:	f002 ffea 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E3_Pin;
 8000424:	2308      	movs	r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0x104>)
 800043c:	f002 fe14 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_GPIO_Init+0x108>)
 8000456:	f002 fe07 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800045a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x104>)
 8000474:	f002 fdf8 	bl	8003068 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58024400 	.word	0x58024400
 8000484:	58021000 	.word	0x58021000
 8000488:	58020800 	.word	0x58020800

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f002 fc36 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f80c 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f7ff ff72 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 800049c:	f000 f898 	bl	80005d0 <MX_RTC_Init>
  MX_SPI4_Init();
 80004a0:	f000 f924 	bl	80006ec <MX_SPI4_Init>
  MX_TIM1_Init();
 80004a4:	f000 fae4 	bl	8000a70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  LCD_Test();
 80004a8:	f000 fbfa 	bl	8000ca0 <LCD_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x20>
	...

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09c      	sub	sp, #112	; 0x70
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	224c      	movs	r2, #76	; 0x4c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 f8fe 	bl	80076c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2220      	movs	r2, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 f8f8 	bl	80076c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f002 ffbb 	bl	800344c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <SystemClock_Config+0x108>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <SystemClock_Config+0x108>)
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <SystemClock_Config+0x108>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <SystemClock_Config+0x10c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f8:	4a30      	ldr	r2, [pc, #192]	; (80005bc <SystemClock_Config+0x10c>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <SystemClock_Config+0x10c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050c:	bf00      	nop
 800050e:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <SystemClock_Config+0x10c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800051a:	d1f8      	bne.n	800050e <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800051c:	f002 ff86 	bl	800342c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000520:	f002 fca4 	bl	8002e6c <HAL_GetREVID>
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <SystemClock_Config+0x110>)
 8000526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000528:	4a25      	ldr	r2, [pc, #148]	; (80005c0 <SystemClock_Config+0x110>)
 800052a:	f023 0318 	bic.w	r3, r3, #24
 800052e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000530:	2305      	movs	r3, #5
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	2302      	movs	r3, #2
 8000544:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800054a:	230c      	movs	r3, #12
 800054c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800055a:	230c      	movs	r3, #12
 800055c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800055e:	2302      	movs	r3, #2
 8000560:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4618      	mov	r0, r3
 800056c:	f002 ffa8 	bl	80034c0 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000576:	f000 f825 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	233f      	movs	r3, #63	; 0x3f
 800057c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fbe7 	bl	8003d74 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80005ac:	f000 f80a 	bl	80005c4 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3770      	adds	r7, #112	; 0x70
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800
 80005c0:	58024400 	.word	0x58024400

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_RTC_Init+0xb0>)
 80005ea:	4a26      	ldr	r2, [pc, #152]	; (8000684 <MX_RTC_Init+0xb4>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <MX_RTC_Init+0xb0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_RTC_Init+0xb0>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_RTC_Init+0xb0>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_RTC_Init+0xb0>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_RTC_Init+0xb0>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_RTC_Init+0xb0>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_RTC_Init+0xb0>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000618:	4819      	ldr	r0, [pc, #100]	; (8000680 <MX_RTC_Init+0xb0>)
 800061a:	f005 fa49 	bl	8005ab0 <HAL_RTC_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000624:	f7ff ffce 	bl	80005c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000628:	2312      	movs	r3, #18
 800062a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800062c:	2300      	movs	r3, #0
 800062e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000630:	2300      	movs	r3, #0
 8000632:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <MX_RTC_Init+0xb0>)
 8000644:	f005 fab6 	bl	8005bb4 <HAL_RTC_SetTime>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800064e:	f7ff ffb9 	bl	80005c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000652:	2301      	movs	r3, #1
 8000654:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000656:	2306      	movs	r3, #6
 8000658:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800065a:	2301      	movs	r3, #1
 800065c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800065e:	2320      	movs	r3, #32
 8000660:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_RTC_Init+0xb0>)
 800066a:	f005 fb41 	bl	8005cf0 <HAL_RTC_SetDate>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000674:	f7ff ffa6 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	24000120 	.word	0x24000120
 8000684:	58004000 	.word	0x58004000

08000688 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b2      	sub	sp, #200	; 0xc8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	22c0      	movs	r2, #192	; 0xc0
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f007 f811 	bl	80076c0 <memset>
  if(rtcHandle->Instance==RTC)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_RTC_MspInit+0x5c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d119      	bne.n	80006dc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fe87 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80006cc:	f7ff ff7a 	bl	80005c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_RTC_MspInit+0x60>)
 80006d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_RTC_MspInit+0x60>)
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	37c8      	adds	r7, #200	; 0xc8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58004000 	.word	0x58004000
 80006e8:	58024400 	.word	0x58024400

080006ec <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_SPI4_Init+0xa8>)
 80006f2:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_SPI4_Init+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_SPI4_Init+0xa8>)
 80006f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000700:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000704:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000708:	2207      	movs	r2, #7
 800070a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_SPI4_Init+0xa8>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_SPI4_Init+0xa8>)
 800071a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800071e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000722:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000726:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_SPI4_Init+0xa8>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI4_Init+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI4_Init+0xa8>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI4_Init+0xa8>)
 800075c:	2200      	movs	r2, #0
 800075e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000762:	2200      	movs	r2, #0
 8000764:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000768:	2200      	movs	r2, #0
 800076a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI4_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI4_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000780:	f005 fbf4 	bl	8005f6c <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800078a:	f7ff ff1b 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000144 	.word	0x24000144
 8000798:	40013400 	.word	0x40013400

0800079c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0ba      	sub	sp, #232	; 0xe8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	22c0      	movs	r2, #192	; 0xc0
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 ff7f 	bl	80076c0 <memset>
  if(spiHandle->Instance==SPI4)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <HAL_SPI_MspInit+0xc4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d145      	bne.n	8000858 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80007cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007d8:	2300      	movs	r3, #0
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fdf7 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80007ec:	f7ff feea 	bl	80005c4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 80007f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 80007f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800082c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2302      	movs	r3, #2
 8000842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000846:	2305      	movs	r3, #5
 8000848:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_SPI_MspInit+0xcc>)
 8000854:	f002 fc08 	bl	8003068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	37e8      	adds	r7, #232	; 0xe8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013400 	.word	0x40013400
 8000864:	58024400 	.word	0x58024400
 8000868:	58021000 	.word	0x58021000

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x30>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x30>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x30>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	58024400 	.word	0x58024400

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f002 fa7a 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f006 fea2 	bl	800766c <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24080000 	.word	0x24080000
 8000954:	00000400 	.word	0x00000400
 8000958:	240001cc 	.word	0x240001cc
 800095c:	24000780 	.word	0x24000780

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <SystemInit+0xe4>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <SystemInit+0xe4>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0xe8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	2b06      	cmp	r3, #6
 800097e:	d807      	bhi.n	8000990 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <SystemInit+0xe8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 030f 	bic.w	r3, r3, #15
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <SystemInit+0xe8>)
 800098a:	f043 0307 	orr.w	r3, r3, #7
 800098e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0xec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <SystemInit+0xec>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemInit+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <SystemInit+0xec>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4929      	ldr	r1, [pc, #164]	; (8000a4c <SystemInit+0xec>)
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemInit+0xf0>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <SystemInit+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 030f 	bic.w	r3, r3, #15
 80009c2:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SystemInit+0xe8>)
 80009c4:	f043 0307 	orr.w	r3, r3, #7
 80009c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0xec>)
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <SystemInit+0xf4>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0xec>)
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <SystemInit+0xf8>)
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0xec>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0xfc>)
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0xec>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0xfc>)
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0xec>)
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <SystemInit+0xfc>)
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SystemInit+0xec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0xec>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <SystemInit+0xec>)
 8000a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SystemInit+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <SystemInit+0x100>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SystemInit+0x104>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0x108>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SystemInit+0x10c>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	5c001000 	.word	0x5c001000
 8000a64:	ffff0000 	.word	0xffff0000
 8000a68:	51008108 	.word	0x51008108
 8000a6c:	52004000 	.word	0x52004000

08000a70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	222c      	movs	r2, #44	; 0x2c
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f006 fe0f 	bl	80076c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa2:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aa4:	4a39      	ldr	r2, [pc, #228]	; (8000b8c <MX_TIM1_Init+0x11c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aaa:	220b      	movs	r2, #11
 8000aac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ace:	482e      	ldr	r0, [pc, #184]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ad0:	f005 ffe5 	bl	8006a9e <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f7ff fd73 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000af2:	f006 fcaf 	bl	8007454 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000afc:	f7ff fd62 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b26:	f006 f811 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b30:	f7ff fd48 	bl	80005c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b6a:	f006 fd01 	bl	8007570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b74:	f7ff fd26 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b7a:	f000 f82b 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	; 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240001d0 	.word	0x240001d0
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_TIM_MspPostInit+0x6c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11f      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_TIM_MspPostInit+0x74>)
 8000c32:	f002 fa19 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58021000 	.word	0x58021000

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c50:	f7ff fe86 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f006 fcfd 	bl	8007678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc05 	bl	800048c <main>
  bx  lr
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c8c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000c90:	08008aa8 	.word	0x08008aa8
  ldr r2, =_sbss
 8000c94:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000c98:	24000780 	.word	0x24000780

08000c9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC3_IRQHandler>
	...

08000ca0 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
	#else
	//error "Unknown Screen"

	#endif

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000ca6:	4975      	ldr	r1, [pc, #468]	; (8000e7c <LCD_Test+0x1dc>)
 8000ca8:	4875      	ldr	r0, [pc, #468]	; (8000e80 <LCD_Test+0x1e0>)
 8000caa:	f000 fcf1 	bl	8001690 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000cae:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <LCD_Test+0x1e4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a75      	ldr	r2, [pc, #468]	; (8000e88 <LCD_Test+0x1e8>)
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	4872      	ldr	r0, [pc, #456]	; (8000e80 <LCD_Test+0x1e0>)
 8000cb8:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8000cba:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <LCD_Test+0x1e4>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4973      	ldr	r1, [pc, #460]	; (8000e8c <LCD_Test+0x1ec>)
 8000cc0:	486f      	ldr	r0, [pc, #444]	; (8000e80 <LCD_Test+0x1e0>)
 8000cc2:	4798      	blx	r3

	LCD_SetBrightness(0);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f8f1 	bl	8000eac <LCD_SetBrightness>
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);
	#endif

  uint32_t tick = get_tick();
 8000cca:	f002 f89f 	bl	8002e0c <HAL_GetTick>
 8000cce:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000cd0:	e06a      	b.n	8000da8 <LCD_Test+0x108>
	{
		delay_ms(10);
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f002 f8a6 	bl	8002e24 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8000cd8:	f002 f898 	bl	8002e0c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce6:	d80f      	bhi.n	8000d08 <LCD_Test+0x68>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000ce8:	f002 f890 	bl	8002e0c <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2264      	movs	r2, #100	; 0x64
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <LCD_Test+0x1f0>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	099b      	lsrs	r3, r3, #6
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8d3 	bl	8000eac <LCD_SetBrightness>
 8000d06:	e04f      	b.n	8000da8 <LCD_Test+0x108>
		else if (get_tick() - tick <= 3000)
 8000d08:	f002 f880 	bl	8002e0c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d83d      	bhi.n	8000d96 <LCD_Test+0xf6>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000d1a:	f002 f877 	bl	8002e0c <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d28:	4a5a      	ldr	r2, [pc, #360]	; (8000e94 <LCD_Test+0x1f4>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	463b      	mov	r3, r7
 8000d32:	4959      	ldr	r1, [pc, #356]	; (8000e98 <LCD_Test+0x1f8>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 fccb 	bl	80076d0 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <LCD_Test+0x1e8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	3b1e      	subs	r3, #30
 8000d42:	b298      	uxth	r0, r3
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <LCD_Test+0x1e8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2310      	movs	r3, #16
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2310      	movs	r3, #16
 8000d54:	2101      	movs	r1, #1
 8000d56:	f000 fb53 	bl	8001400 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <LCD_Test+0x1e4>)
 8000d5c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <LCD_Test+0x1e8>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	1edd      	subs	r5, r3, #3
 8000d64:	f002 f852 	bl	8002e0c <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d72:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <LCD_Test+0x1e8>)
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <LCD_Test+0x1f0>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	09db      	lsrs	r3, r3, #7
 8000d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	9200      	str	r2, [sp, #0]
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	483b      	ldr	r0, [pc, #236]	; (8000e80 <LCD_Test+0x1e0>)
 8000d92:	47a0      	blx	r4
 8000d94:	e008      	b.n	8000da8 <LCD_Test+0x108>
		}
		else if (get_tick() - tick > 3000)
 8000d96:	f002 f839 	bl	8002e0c <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d808      	bhi.n	8000dba <LCD_Test+0x11a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	483b      	ldr	r0, [pc, #236]	; (8000e9c <LCD_Test+0x1fc>)
 8000dae:	f002 fb0b 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d18c      	bne.n	8000cd2 <LCD_Test+0x32>
 8000db8:	e004      	b.n	8000dc4 <LCD_Test+0x124>
			break;
 8000dba:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000dbc:	e002      	b.n	8000dc4 <LCD_Test+0x124>
	{
		delay_ms(10);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f002 f830 	bl	8002e24 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	4834      	ldr	r0, [pc, #208]	; (8000e9c <LCD_Test+0x1fc>)
 8000dca:	f002 fafd 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d0f4      	beq.n	8000dbe <LCD_Test+0x11e>
	}
	LCD_Light(0, 300);
 8000dd4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 f889 	bl	8000ef0 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <LCD_Test+0x1e4>)
 8000de0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <LCD_Test+0x1e8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <LCD_Test+0x1e8>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2100      	movs	r1, #0
 8000dec:	9101      	str	r1, [sp, #4]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	4822      	ldr	r0, [pc, #136]	; (8000e80 <LCD_Test+0x1e0>)
 8000df8:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <LCD_Test+0x200>)
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 fc66 	bl	80076d0 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <LCD_Test+0x1e8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2310      	movs	r3, #16
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2310      	movs	r3, #16
 8000e14:	2104      	movs	r1, #4
 8000e16:	2004      	movs	r0, #4
 8000e18:	f000 faf2 	bl	8001400 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000e1c:	f002 f832 	bl	8002e84 <HAL_GetDEVID>
 8000e20:	4602      	mov	r2, r0
 8000e22:	463b      	mov	r3, r7
 8000e24:	491f      	ldr	r1, [pc, #124]	; (8000ea4 <LCD_Test+0x204>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 fc52 	bl	80076d0 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <LCD_Test+0x1e8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	463b      	mov	r3, r7
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	2310      	movs	r3, #16
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	2116      	movs	r1, #22
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f000 fade 	bl	8001400 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <LCD_Test+0x1ec>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4917      	ldr	r1, [pc, #92]	; (8000ea8 <LCD_Test+0x208>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 fc3f 	bl	80076d0 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <LCD_Test+0x1e8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	463b      	mov	r3, r7
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2310      	movs	r3, #16
 8000e62:	2128      	movs	r1, #40	; 0x28
 8000e64:	2004      	movs	r0, #4
 8000e66:	f000 facb 	bl	8001400 <LCD_ShowString>

	LCD_Light(100, 200);
 8000e6a:	21c8      	movs	r1, #200	; 0xc8
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f000 f83f 	bl	8000ef0 <LCD_Light>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000008 	.word	0x24000008
 8000e80:	2400021c 	.word	0x2400021c
 8000e84:	2400002c 	.word	0x2400002c
 8000e88:	2400025c 	.word	0x2400025c
 8000e8c:	24000254 	.word	0x24000254
 8000e90:	10624dd3 	.word	0x10624dd3
 8000e94:	cccccccd 	.word	0xcccccccd
 8000e98:	08007fc4 	.word	0x08007fc4
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	08007fcc 	.word	0x08007fcc
 8000ea4:	08007fdc 	.word	0x08007fdc
 8000ea8:	08007fec 	.word	0x08007fec

08000eac <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_WR_RS_GPIO_Port,GPIO_PIN_10,GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <LCD_SetBrightness+0x24>)
 8000ebc:	f002 fa9c 	bl	80033f8 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <LCD_SetBrightness+0x28>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58021000 	.word	0x58021000
 8000ed4:	240001d0 	.word	0x240001d0

08000ed8 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <LCD_GetBrightness+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	240001d0 	.word	0x240001d0

08000ef0 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8000efa:	f7ff ffed 	bl	8000ed8 <LCD_GetBrightness>
 8000efe:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8000f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d05e      	beq.n	8000fca <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d05c      	beq.n	8000fce <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1e:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f34:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f50:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8000f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f60:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f68:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8000f6c:	f001 ff4e 	bl	8002e0c <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f001 ff56 	bl	8002e24 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8000f78:	f001 ff48 	bl	8002e0c <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8000f92:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	ee17 0a90 	vmov	r0, s15
 8000fbc:	f7ff ff76 	bl	8000eac <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8000fc0:	6a3a      	ldr	r2, [r7, #32]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d204      	bcs.n	8000fd2 <LCD_Light+0xe2>
		delay_ms(1);
 8000fc8:	e7d3      	b.n	8000f72 <LCD_Light+0x82>
		return;
 8000fca:	bf00      	nop
 8000fcc:	e002      	b.n	8000fd4 <LCD_Light+0xe4>
		return;
 8000fce:	bf00      	nop
 8000fd0:	e000      	b.n	8000fd4 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8000fd2:	bf00      	nop
		
	}
}
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8000fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe0:	b097      	sub	sp, #92	; 0x5c
 8000fe2:	af02      	add	r7, sp, #8
 8000fe4:	461e      	mov	r6, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000fea:	460b      	mov	r3, r1
 8000fec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000fee:	4613      	mov	r3, r2
 8000ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ff4:	4633      	mov	r3, r6
 8000ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000ffa:	466b      	mov	r3, sp
 8000ffc:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8000ffe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001000:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 8001004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001006:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 800100a:	4baf      	ldr	r3, [pc, #700]	; (80012c8 <LCD_ShowChar+0x2ec>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001012:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001016:	2b0c      	cmp	r3, #12
 8001018:	d101      	bne.n	800101e <LCD_ShowChar+0x42>
 800101a:	2106      	movs	r1, #6
 800101c:	e000      	b.n	8001020 <LCD_ShowChar+0x44>
 800101e:	2108      	movs	r1, #8
 8001020:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001024:	1e4b      	subs	r3, r1, #1
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
 8001028:	460a      	mov	r2, r1
 800102a:	2300      	movs	r3, #0
 800102c:	4692      	mov	sl, r2
 800102e:	469b      	mov	fp, r3
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800103c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001040:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001044:	460b      	mov	r3, r1
 8001046:	005e      	lsls	r6, r3, #1
 8001048:	4603      	mov	r3, r0
 800104a:	3b01      	subs	r3, #1
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800104e:	460a      	mov	r2, r1
 8001050:	2300      	movs	r3, #0
 8001052:	61ba      	str	r2, [r7, #24]
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	b2c3      	uxtb	r3, r0
 8001058:	2200      	movs	r2, #0
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	627a      	str	r2, [r7, #36]	; 0x24
 800105e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001062:	465b      	mov	r3, fp
 8001064:	6a3a      	ldr	r2, [r7, #32]
 8001066:	fb02 fc03 	mul.w	ip, r2, r3
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	4652      	mov	r2, sl
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	449c      	add	ip, r3
 8001074:	4652      	mov	r2, sl
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	fba2 8903 	umull	r8, r9, r2, r3
 800107c:	eb0c 0309 	add.w	r3, ip, r9
 8001080:	4699      	mov	r9, r3
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800108e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001092:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001096:	460a      	mov	r2, r1
 8001098:	2300      	movs	r3, #0
 800109a:	613a      	str	r2, [r7, #16]
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	b2c3      	uxtb	r3, r0
 80010a0:	2200      	movs	r2, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	60fa      	str	r2, [r7, #12]
 80010a6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80010aa:	464b      	mov	r3, r9
 80010ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80010b0:	4652      	mov	r2, sl
 80010b2:	fb02 fc03 	mul.w	ip, r2, r3
 80010b6:	465b      	mov	r3, fp
 80010b8:	4642      	mov	r2, r8
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	449c      	add	ip, r3
 80010c0:	4642      	mov	r2, r8
 80010c2:	4653      	mov	r3, sl
 80010c4:	fba2 4503 	umull	r4, r5, r2, r3
 80010c8:	eb0c 0305 	add.w	r3, ip, r5
 80010cc:	461d      	mov	r5, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	012b      	lsls	r3, r5, #4
 80010d8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010dc:	0122      	lsls	r2, r4, #4
 80010de:	460b      	mov	r3, r1
 80010e0:	4602      	mov	r2, r0
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	3307      	adds	r3, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	ab02      	add	r3, sp, #8
 80010f4:	3301      	adds	r3, #1
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 80010fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001100:	4619      	mov	r1, r3
 8001102:	4872      	ldr	r0, [pc, #456]	; (80012cc <LCD_ShowChar+0x2f0>)
 8001104:	f001 fc20 	bl	8002948 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8001108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800110c:	4619      	mov	r1, r3
 800110e:	486f      	ldr	r0, [pc, #444]	; (80012cc <LCD_ShowChar+0x2f0>)
 8001110:	f001 fc2c 	bl	800296c <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001118:	3b20      	subs	r3, #32
 800111a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8001124:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 80a7 	bne.w	800127c <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 800112e:	2300      	movs	r3, #0
 8001130:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001134:	e09a      	b.n	800126c <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001136:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d10e      	bne.n	800115c <LCD_ShowChar+0x180>
 800113e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001142:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001146:	4862      	ldr	r0, [pc, #392]	; (80012d0 <LCD_ShowChar+0x2f4>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4403      	add	r3, r0
 8001152:	440b      	add	r3, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800115a:	e00a      	b.n	8001172 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 800115c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001160:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001164:	495b      	ldr	r1, [pc, #364]	; (80012d4 <LCD_ShowChar+0x2f8>)
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	440a      	add	r2, r1
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 8001172:	2300      	movs	r3, #0
 8001174:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001178:	e06d      	b.n	8001256 <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 800117a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800117e:	2b00      	cmp	r3, #0
 8001180:	da0e      	bge.n	80011a0 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001182:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <LCD_ShowChar+0x2ec>)
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	e00d      	b.n	80011bc <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <LCD_ShowChar+0x2fc>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <LCD_ShowChar+0x2fc>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <LCD_ShowChar+0x2ec>)
 80011ba:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80011bc:	0872      	lsrs	r2, r6, #1
 80011be:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80011c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011c6:	085b      	lsrs	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461c      	mov	r4, r3
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <LCD_ShowChar+0x2ec>)
 80011ce:	8818      	ldrh	r0, [r3, #0]
 80011d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d2:	fb01 f202 	mul.w	r2, r1, r2
 80011d6:	4422      	add	r2, r4
 80011d8:	4601      	mov	r1, r0
 80011da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80011de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011e2:	3301      	adds	r3, #1
 80011e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 80011e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d302      	bcc.n	80011fc <LCD_ShowChar+0x220>
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 80011fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001206:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001208:	3301      	adds	r3, #1
 800120a:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800120c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	429a      	cmp	r2, r3
 8001212:	d304      	bcc.n	800121e <LCD_ShowChar+0x242>
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <LCD_ShowChar+0x2ec>)
 8001216:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800121a:	8013      	strh	r3, [r2, #0]
 800121c:	e0e6      	b.n	80013ec <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800121e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800122a:	429a      	cmp	r2, r3
 800122c:	d10e      	bne.n	800124c <LCD_ShowChar+0x270>
				{
					y=y0;
 800122e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001232:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001236:	3301      	adds	r3, #1
 8001238:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800123a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	429a      	cmp	r2, r3
 8001240:	d30e      	bcc.n	8001260 <LCD_ShowChar+0x284>
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <LCD_ShowChar+0x2ec>)
 8001244:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001248:	8013      	strh	r3, [r2, #0]
 800124a:	e0cf      	b.n	80013ec <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 800124c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001250:	3301      	adds	r3, #1
 8001252:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001256:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800125a:	2b07      	cmp	r3, #7
 800125c:	d98d      	bls.n	800117a <LCD_ShowChar+0x19e>
 800125e:	e000      	b.n	8001262 <LCD_ShowChar+0x286>
					break;
 8001260:	bf00      	nop
		for(t=0;t<size;t++)
 8001262:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001266:	3301      	adds	r3, #1
 8001268:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800126c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001270:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001274:	429a      	cmp	r2, r3
 8001276:	f4ff af5e 	bcc.w	8001136 <LCD_ShowChar+0x15a>
 800127a:	e09c      	b.n	80013b6 <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 800127c:	2300      	movs	r3, #0
 800127e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001282:	e091      	b.n	80013a8 <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001284:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001288:	2b0c      	cmp	r3, #12
 800128a:	d10e      	bne.n	80012aa <LCD_ShowChar+0x2ce>
 800128c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001290:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <LCD_ShowChar+0x2f4>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4403      	add	r3, r0
 80012a0:	440b      	add	r3, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012a8:	e00a      	b.n	80012c0 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80012aa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <LCD_ShowChar+0x2f8>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	440a      	add	r2, r1
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80012c6:	e064      	b.n	8001392 <LCD_ShowChar+0x3b6>
 80012c8:	24000028 	.word	0x24000028
 80012cc:	2400021c 	.word	0x2400021c
 80012d0:	08008008 	.word	0x08008008
 80012d4:	0800847c 	.word	0x0800847c
 80012d8:	24000258 	.word	0x24000258
			{			    
				if(temp&0x80)
 80012dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da1a      	bge.n	800131a <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80012e4:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <LCD_ShowChar+0x41c>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <LCD_ShowChar+0x41c>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b218      	sxth	r0, r3
 80012fa:	0872      	lsrs	r2, r6, #1
 80012fc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8001300:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461c      	mov	r4, r3
 800130a:	b280      	uxth	r0, r0
 800130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130e:	fb01 f202 	mul.w	r2, r1, r2
 8001312:	4422      	add	r2, r4
 8001314:	4601      	mov	r1, r0
 8001316:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800131a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800131e:	3301      	adds	r3, #1
 8001320:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001324:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001328:	b29b      	uxth	r3, r3
 800132a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800132e:	429a      	cmp	r2, r3
 8001330:	d302      	bcc.n	8001338 <LCD_ShowChar+0x35c>
 8001332:	2300      	movs	r3, #0
 8001334:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001338:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001342:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001344:	3301      	adds	r3, #1
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001348:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134c:	429a      	cmp	r2, r3
 800134e:	d304      	bcc.n	800135a <LCD_ShowChar+0x37e>
 8001350:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <LCD_ShowChar+0x41c>)
 8001352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001356:	8013      	strh	r3, [r2, #0]
 8001358:	e048      	b.n	80013ec <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800135a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800135c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001360:	1ad2      	subs	r2, r2, r3
 8001362:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001366:	429a      	cmp	r2, r3
 8001368:	d10e      	bne.n	8001388 <LCD_ShowChar+0x3ac>
				{
					y=y0;
 800136a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800136e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001372:	3301      	adds	r3, #1
 8001374:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	429a      	cmp	r2, r3
 800137c:	d30e      	bcc.n	800139c <LCD_ShowChar+0x3c0>
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <LCD_ShowChar+0x41c>)
 8001380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001384:	8013      	strh	r3, [r2, #0]
 8001386:	e031      	b.n	80013ec <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	3301      	adds	r3, #1
 800138e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001392:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001396:	2b07      	cmp	r3, #7
 8001398:	d9a0      	bls.n	80012dc <LCD_ShowChar+0x300>
 800139a:	e000      	b.n	800139e <LCD_ShowChar+0x3c2>
					break;
 800139c:	bf00      	nop
		for(t=0;t<size;t++)
 800139e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013a2:	3301      	adds	r3, #1
 80013a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013a8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80013ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f4ff af67 	bcc.w	8001284 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80013b6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80013ba:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80013be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d101      	bne.n	80013ca <LCD_ShowChar+0x3ee>
 80013c6:	2306      	movs	r3, #6
 80013c8:	e000      	b.n	80013cc <LCD_ShowChar+0x3f0>
 80013ca:	2308      	movs	r3, #8
 80013cc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d6:	4602      	mov	r2, r0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <LCD_ShowChar+0x420>)
 80013da:	f001 f907 	bl	80025ec <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <LCD_ShowChar+0x41c>)
 80013e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013e4:	8013      	strh	r3, [r2, #0]
 80013e6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80013ea:	e001      	b.n	80013f0 <LCD_ShowChar+0x414>
 80013ec:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 80013f0:	3754      	adds	r7, #84	; 0x54
 80013f2:	46bd      	mov	sp, r7
 80013f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013f8:	24000028 	.word	0x24000028
 80013fc:	2400021c 	.word	0x2400021c

08001400 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b087      	sub	sp, #28
 8001404:	af02      	add	r7, sp, #8
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	4603      	mov	r3, r0
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4413      	add	r3, r2
 8001428:	807b      	strh	r3, [r7, #2]
	height+=y;
 800142a:	883a      	ldrh	r2, [r7, #0]
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001432:	e024      	b.n	800147e <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	429a      	cmp	r2, r3
 800143a:	d307      	bcc.n	800144c <LCD_ShowString+0x4c>
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001444:	b29a      	uxth	r2, r3
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 800144c:	88ba      	ldrh	r2, [r7, #4]
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d21d      	bcs.n	8001490 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800145c:	88b9      	ldrh	r1, [r7, #4]
 800145e:	88f8      	ldrh	r0, [r7, #6]
 8001460:	2400      	movs	r4, #0
 8001462:	9400      	str	r4, [sp, #0]
 8001464:	f7ff fdba 	bl	8000fdc <LCD_ShowChar>
        x+=size/2;
 8001468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4413      	add	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
        p++;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b7e      	cmp	r3, #126	; 0x7e
 8001484:	d805      	bhi.n	8001492 <LCD_ShowString+0x92>
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b1f      	cmp	r3, #31
 800148c:	d8d2      	bhi.n	8001434 <LCD_ShowString+0x34>
    }  
}
 800148e:	e000      	b.n	8001492 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8001490:	bf00      	nop
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}

0800149a <lcd_init>:

static int32_t lcd_init(void)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
	//HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
	return result;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80014b6:	f001 fca9 	bl	8002e0c <HAL_GetTick>
 80014ba:	4603      	mov	r3, r0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	481d      	ldr	r0, [pc, #116]	; (800154c <lcd_writereg+0x8c>)
 80014d6:	f001 ff8f 	bl	80033f8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <lcd_writereg+0x8c>)
 80014e2:	f001 ff89 	bl	80033f8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80014e6:	f107 010f 	add.w	r1, r7, #15
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2201      	movs	r2, #1
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <lcd_writereg+0x90>)
 80014f0:	f004 fe60 	bl	80061b4 <HAL_SPI_Transmit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4813      	ldr	r0, [pc, #76]	; (800154c <lcd_writereg+0x8c>)
 8001500:	f001 ff7a 	bl	80033f8 <HAL_GPIO_WritePin>
	if(length > 0)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29a      	uxth	r2, r3
 800150e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <lcd_writereg+0x90>)
 8001516:	f004 fe4d 	bl	80061b4 <HAL_SPI_Transmit>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <lcd_writereg+0x8c>)
 800152c:	f001 ff64 	bl	80033f8 <HAL_GPIO_WritePin>
	if(result>0){
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dd03      	ble.n	800153e <lcd_writereg+0x7e>
		result = -1;}
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e001      	b.n	8001542 <lcd_writereg+0x82>
	else{
		result = 0;}
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
	return result;
 8001542:	697b      	ldr	r3, [r7, #20]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	58021000 	.word	0x58021000
 8001550:	24000144 	.word	0x24000144

08001554 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <lcd_readreg+0x80>)
 8001568:	f001 ff46 	bl	80033f8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <lcd_readreg+0x80>)
 8001574:	f001 ff40 	bl	80033f8 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001578:	1df9      	adds	r1, r7, #7
 800157a:	2364      	movs	r3, #100	; 0x64
 800157c:	2201      	movs	r2, #1
 800157e:	4816      	ldr	r0, [pc, #88]	; (80015d8 <lcd_readreg+0x84>)
 8001580:	f004 fe18 	bl	80061b4 <HAL_SPI_Transmit>
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <lcd_readreg+0x80>)
 8001590:	f001 ff32 	bl	80033f8 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8001594:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001598:	2201      	movs	r2, #1
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <lcd_readreg+0x84>)
 800159e:	f005 f805 	bl	80065ac <HAL_SPI_Receive>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <lcd_readreg+0x80>)
 80015b4:	f001 ff20 	bl	80033f8 <HAL_GPIO_WritePin>
	if(result>0){
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd03      	ble.n	80015c6 <lcd_readreg+0x72>
		result = -1;}
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e001      	b.n	80015ca <lcd_readreg+0x76>
	else{
		result = 0;}
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
	return result;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58021000 	.word	0x58021000
 80015d8:	24000144 	.word	0x24000144

080015dc <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <lcd_senddata+0x50>)
 80015ee:	f001 ff03 	bl	80033f8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <lcd_senddata+0x54>)
 80015fc:	f004 fdda 	bl	80061b4 <HAL_SPI_Transmit>
 8001600:	4603      	mov	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <lcd_senddata+0x50>)
 800160c:	f001 fef4 	bl	80033f8 <HAL_GPIO_WritePin>
	if(result>0){
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd03      	ble.n	800161e <lcd_senddata+0x42>
		result = -1;}
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e001      	b.n	8001622 <lcd_senddata+0x46>
	else{
		result = 0;}
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
	return result;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58021000 	.word	0x58021000
 8001630:	24000144 	.word	0x24000144

08001634 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <lcd_recvdata+0x54>)
 8001646:	f001 fed7 	bl	80033f8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <lcd_recvdata+0x58>)
 8001656:	f004 ffa9 	bl	80065ac <HAL_SPI_Receive>
 800165a:	4603      	mov	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <lcd_recvdata+0x54>)
 8001666:	f001 fec7 	bl	80033f8 <HAL_GPIO_WritePin>
	if(result>0){
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd03      	ble.n	8001678 <lcd_recvdata+0x44>
		result = -1;}
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e001      	b.n	800167c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
	return result;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58021000 	.word	0x58021000
 800168c:	24000144 	.word	0x24000144

08001690 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e03a      	b.n	800171e <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	891a      	ldrh	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	699a      	ldr	r2, [r3, #24]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <ST7735_RegisterBusIO+0x98>)
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <ST7735_RegisterBusIO+0x9c>)
 80016f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <ST7735_RegisterBusIO+0xa0>)
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <ST7735_RegisterBusIO+0xa4>)
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4798      	blx	r3
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	e002      	b.n	800171e <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	08002b99 	.word	0x08002b99
 800172c:	08002bc1 	.word	0x08002bc1
 8001730:	08002beb 	.word	0x08002beb
 8001734:	08002c0f 	.word	0x08002c0f

08001738 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e3a6      	b.n	8001ea0 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f103 0020 	add.w	r0, r3, #32
 800175c:	f107 0213 	add.w	r2, r7, #19
 8001760:	2300      	movs	r3, #0
 8001762:	2101      	movs	r1, #1
 8001764:	f001 fa92 	bl	8002c8c <st7735_write_reg>
 8001768:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800176a:	2178      	movs	r1, #120	; 0x78
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f001 fa60 	bl	8002c32 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f103 0020 	add.w	r0, r3, #32
 800177c:	f107 0213 	add.w	r2, r7, #19
 8001780:	2300      	movs	r3, #0
 8001782:	2101      	movs	r1, #1
 8001784:	f001 fa82 	bl	8002c8c <st7735_write_reg>
 8001788:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800178a:	2178      	movs	r1, #120	; 0x78
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f001 fa50 	bl	8002c32 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f103 0020 	add.w	r0, r3, #32
 800179c:	f107 0213 	add.w	r2, r7, #19
 80017a0:	2301      	movs	r3, #1
 80017a2:	2111      	movs	r1, #17
 80017a4:	f001 fa72 	bl	8002c8c <st7735_write_reg>
 80017a8:	4602      	mov	r2, r0
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f103 0020 	add.w	r0, r3, #32
 80017b6:	f107 0213 	add.w	r2, r7, #19
 80017ba:	2300      	movs	r3, #0
 80017bc:	21b1      	movs	r1, #177	; 0xb1
 80017be:	f001 fa65 	bl	8002c8c <st7735_write_reg>
 80017c2:	4602      	mov	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	4413      	add	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80017ca:	2301      	movs	r3, #1
 80017cc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3320      	adds	r3, #32
 80017d2:	f107 0113 	add.w	r1, r7, #19
 80017d6:	2201      	movs	r2, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 fa6c 	bl	8002cb6 <st7735_send_data>
 80017de:	4602      	mov	r2, r0
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80017e6:	232c      	movs	r3, #44	; 0x2c
 80017e8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3320      	adds	r3, #32
 80017ee:	f107 0113 	add.w	r1, r7, #19
 80017f2:	2201      	movs	r2, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fa5e 	bl	8002cb6 <st7735_send_data>
 80017fa:	4602      	mov	r2, r0
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001802:	232d      	movs	r3, #45	; 0x2d
 8001804:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3320      	adds	r3, #32
 800180a:	f107 0113 	add.w	r1, r7, #19
 800180e:	2201      	movs	r2, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fa50 	bl	8002cb6 <st7735_send_data>
 8001816:	4602      	mov	r2, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	4413      	add	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 800181e:	2301      	movs	r3, #1
 8001820:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f103 0020 	add.w	r0, r3, #32
 8001828:	f107 0213 	add.w	r2, r7, #19
 800182c:	2301      	movs	r3, #1
 800182e:	21b2      	movs	r1, #178	; 0xb2
 8001830:	f001 fa2c 	bl	8002c8c <st7735_write_reg>
 8001834:	4602      	mov	r2, r0
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800183c:	232c      	movs	r3, #44	; 0x2c
 800183e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3320      	adds	r3, #32
 8001844:	f107 0113 	add.w	r1, r7, #19
 8001848:	2201      	movs	r2, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f001 fa33 	bl	8002cb6 <st7735_send_data>
 8001850:	4602      	mov	r2, r0
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001858:	232d      	movs	r3, #45	; 0x2d
 800185a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3320      	adds	r3, #32
 8001860:	f107 0113 	add.w	r1, r7, #19
 8001864:	2201      	movs	r2, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fa25 	bl	8002cb6 <st7735_send_data>
 800186c:	4602      	mov	r2, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001874:	2301      	movs	r3, #1
 8001876:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f103 0020 	add.w	r0, r3, #32
 800187e:	f107 0213 	add.w	r2, r7, #19
 8001882:	2301      	movs	r3, #1
 8001884:	21b3      	movs	r1, #179	; 0xb3
 8001886:	f001 fa01 	bl	8002c8c <st7735_write_reg>
 800188a:	4602      	mov	r2, r0
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001892:	232c      	movs	r3, #44	; 0x2c
 8001894:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3320      	adds	r3, #32
 800189a:	f107 0113 	add.w	r1, r7, #19
 800189e:	2201      	movs	r2, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fa08 	bl	8002cb6 <st7735_send_data>
 80018a6:	4602      	mov	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80018ae:	232d      	movs	r3, #45	; 0x2d
 80018b0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3320      	adds	r3, #32
 80018b6:	f107 0113 	add.w	r1, r7, #19
 80018ba:	2201      	movs	r2, #1
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 f9fa 	bl	8002cb6 <st7735_send_data>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80018ca:	2301      	movs	r3, #1
 80018cc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3320      	adds	r3, #32
 80018d2:	f107 0113 	add.w	r1, r7, #19
 80018d6:	2201      	movs	r2, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 f9ec 	bl	8002cb6 <st7735_send_data>
 80018de:	4602      	mov	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80018e6:	232c      	movs	r3, #44	; 0x2c
 80018e8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3320      	adds	r3, #32
 80018ee:	f107 0113 	add.w	r1, r7, #19
 80018f2:	2201      	movs	r2, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 f9de 	bl	8002cb6 <st7735_send_data>
 80018fa:	4602      	mov	r2, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4413      	add	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001902:	232d      	movs	r3, #45	; 0x2d
 8001904:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3320      	adds	r3, #32
 800190a:	f107 0113 	add.w	r1, r7, #19
 800190e:	2201      	movs	r2, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f9d0 	bl	8002cb6 <st7735_send_data>
 8001916:	4602      	mov	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4413      	add	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 800191e:	2307      	movs	r3, #7
 8001920:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f103 0020 	add.w	r0, r3, #32
 8001928:	f107 0213 	add.w	r2, r7, #19
 800192c:	2301      	movs	r3, #1
 800192e:	21b4      	movs	r1, #180	; 0xb4
 8001930:	f001 f9ac 	bl	8002c8c <st7735_write_reg>
 8001934:	4602      	mov	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 800193c:	23a2      	movs	r3, #162	; 0xa2
 800193e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f103 0020 	add.w	r0, r3, #32
 8001946:	f107 0213 	add.w	r2, r7, #19
 800194a:	2301      	movs	r3, #1
 800194c:	21c0      	movs	r1, #192	; 0xc0
 800194e:	f001 f99d 	bl	8002c8c <st7735_write_reg>
 8001952:	4602      	mov	r2, r0
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800195a:	2302      	movs	r3, #2
 800195c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3320      	adds	r3, #32
 8001962:	f107 0113 	add.w	r1, r7, #19
 8001966:	2201      	movs	r2, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f001 f9a4 	bl	8002cb6 <st7735_send_data>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001976:	2384      	movs	r3, #132	; 0x84
 8001978:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3320      	adds	r3, #32
 800197e:	f107 0113 	add.w	r1, r7, #19
 8001982:	2201      	movs	r2, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f001 f996 	bl	8002cb6 <st7735_send_data>
 800198a:	4602      	mov	r2, r0
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4413      	add	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001992:	23c5      	movs	r3, #197	; 0xc5
 8001994:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f103 0020 	add.w	r0, r3, #32
 800199c:	f107 0213 	add.w	r2, r7, #19
 80019a0:	2301      	movs	r3, #1
 80019a2:	21c1      	movs	r1, #193	; 0xc1
 80019a4:	f001 f972 	bl	8002c8c <st7735_write_reg>
 80019a8:	4602      	mov	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 80019b0:	230a      	movs	r3, #10
 80019b2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f103 0020 	add.w	r0, r3, #32
 80019ba:	f107 0213 	add.w	r2, r7, #19
 80019be:	2301      	movs	r3, #1
 80019c0:	21c2      	movs	r1, #194	; 0xc2
 80019c2:	f001 f963 	bl	8002c8c <st7735_write_reg>
 80019c6:	4602      	mov	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	4413      	add	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3320      	adds	r3, #32
 80019d6:	f107 0113 	add.w	r1, r7, #19
 80019da:	2201      	movs	r2, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 f96a 	bl	8002cb6 <st7735_send_data>
 80019e2:	4602      	mov	r2, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 80019ea:	238a      	movs	r3, #138	; 0x8a
 80019ec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f103 0020 	add.w	r0, r3, #32
 80019f4:	f107 0213 	add.w	r2, r7, #19
 80019f8:	2301      	movs	r3, #1
 80019fa:	21c3      	movs	r1, #195	; 0xc3
 80019fc:	f001 f946 	bl	8002c8c <st7735_write_reg>
 8001a00:	4602      	mov	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001a08:	232a      	movs	r3, #42	; 0x2a
 8001a0a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3320      	adds	r3, #32
 8001a10:	f107 0113 	add.w	r1, r7, #19
 8001a14:	2201      	movs	r2, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f94d 	bl	8002cb6 <st7735_send_data>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4413      	add	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001a24:	238a      	movs	r3, #138	; 0x8a
 8001a26:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f103 0020 	add.w	r0, r3, #32
 8001a2e:	f107 0213 	add.w	r2, r7, #19
 8001a32:	2301      	movs	r3, #1
 8001a34:	21c4      	movs	r1, #196	; 0xc4
 8001a36:	f001 f929 	bl	8002c8c <st7735_write_reg>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001a42:	23ee      	movs	r3, #238	; 0xee
 8001a44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3320      	adds	r3, #32
 8001a4a:	f107 0113 	add.w	r1, r7, #19
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 f930 	bl	8002cb6 <st7735_send_data>
 8001a56:	4602      	mov	r2, r0
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001a5e:	230e      	movs	r3, #14
 8001a60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f103 0020 	add.w	r0, r3, #32
 8001a68:	f107 0213 	add.w	r2, r7, #19
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	21c5      	movs	r1, #197	; 0xc5
 8001a70:	f001 f90c 	bl	8002c8c <st7735_write_reg>
 8001a74:	4602      	mov	r2, r0
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7b1b      	ldrb	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10d      	bne.n	8001aa0 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f103 0020 	add.w	r0, r3, #32
 8001a8a:	f107 0213 	add.w	r2, r7, #19
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2121      	movs	r1, #33	; 0x21
 8001a92:	f001 f8fb 	bl	8002c8c <st7735_write_reg>
 8001a96:	4602      	mov	r2, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e00c      	b.n	8001aba <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f103 0020 	add.w	r0, r3, #32
 8001aa6:	f107 0213 	add.w	r2, r7, #19
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	f001 f8ed 	bl	8002c8c <st7735_write_reg>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f103 0020 	add.w	r0, r3, #32
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	213a      	movs	r1, #58	; 0x3a
 8001ac8:	f001 f8e0 	bl	8002c8c <st7735_write_reg>
 8001acc:	4602      	mov	r2, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f103 0020 	add.w	r0, r3, #32
 8001ade:	f107 0213 	add.w	r2, r7, #19
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	21e0      	movs	r1, #224	; 0xe0
 8001ae6:	f001 f8d1 	bl	8002c8c <st7735_write_reg>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4413      	add	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001af2:	231c      	movs	r3, #28
 8001af4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3320      	adds	r3, #32
 8001afa:	f107 0113 	add.w	r1, r7, #19
 8001afe:	2201      	movs	r2, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 f8d8 	bl	8002cb6 <st7735_send_data>
 8001b06:	4602      	mov	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3320      	adds	r3, #32
 8001b16:	f107 0113 	add.w	r1, r7, #19
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f8ca 	bl	8002cb6 <st7735_send_data>
 8001b22:	4602      	mov	r2, r0
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4413      	add	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001b2a:	2312      	movs	r3, #18
 8001b2c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3320      	adds	r3, #32
 8001b32:	f107 0113 	add.w	r1, r7, #19
 8001b36:	2201      	movs	r2, #1
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 f8bc 	bl	8002cb6 <st7735_send_data>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4413      	add	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001b46:	2337      	movs	r3, #55	; 0x37
 8001b48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3320      	adds	r3, #32
 8001b4e:	f107 0113 	add.w	r1, r7, #19
 8001b52:	2201      	movs	r2, #1
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 f8ae 	bl	8002cb6 <st7735_send_data>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001b62:	2332      	movs	r3, #50	; 0x32
 8001b64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3320      	adds	r3, #32
 8001b6a:	f107 0113 	add.w	r1, r7, #19
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 f8a0 	bl	8002cb6 <st7735_send_data>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001b7e:	2329      	movs	r3, #41	; 0x29
 8001b80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3320      	adds	r3, #32
 8001b86:	f107 0113 	add.w	r1, r7, #19
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 f892 	bl	8002cb6 <st7735_send_data>
 8001b92:	4602      	mov	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001b9a:	232d      	movs	r3, #45	; 0x2d
 8001b9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3320      	adds	r3, #32
 8001ba2:	f107 0113 	add.w	r1, r7, #19
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 f884 	bl	8002cb6 <st7735_send_data>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001bb6:	2329      	movs	r3, #41	; 0x29
 8001bb8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3320      	adds	r3, #32
 8001bbe:	f107 0113 	add.w	r1, r7, #19
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 f876 	bl	8002cb6 <st7735_send_data>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8001bd2:	2325      	movs	r3, #37	; 0x25
 8001bd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3320      	adds	r3, #32
 8001bda:	f107 0113 	add.w	r1, r7, #19
 8001bde:	2201      	movs	r2, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 f868 	bl	8002cb6 <st7735_send_data>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8001bee:	232b      	movs	r3, #43	; 0x2b
 8001bf0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3320      	adds	r3, #32
 8001bf6:	f107 0113 	add.w	r1, r7, #19
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 f85a 	bl	8002cb6 <st7735_send_data>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8001c0a:	2339      	movs	r3, #57	; 0x39
 8001c0c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3320      	adds	r3, #32
 8001c12:	f107 0113 	add.w	r1, r7, #19
 8001c16:	2201      	movs	r2, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 f84c 	bl	8002cb6 <st7735_send_data>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3320      	adds	r3, #32
 8001c2e:	f107 0113 	add.w	r1, r7, #19
 8001c32:	2201      	movs	r2, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 f83e 	bl	8002cb6 <st7735_send_data>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c42:	2301      	movs	r3, #1
 8001c44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3320      	adds	r3, #32
 8001c4a:	f107 0113 	add.w	r1, r7, #19
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f830 	bl	8002cb6 <st7735_send_data>
 8001c56:	4602      	mov	r2, r0
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3320      	adds	r3, #32
 8001c66:	f107 0113 	add.w	r1, r7, #19
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 f822 	bl	8002cb6 <st7735_send_data>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3320      	adds	r3, #32
 8001c82:	f107 0113 	add.w	r1, r7, #19
 8001c86:	2201      	movs	r2, #1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 f814 	bl	8002cb6 <st7735_send_data>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8001c96:	2303      	movs	r3, #3
 8001c98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f103 0020 	add.w	r0, r3, #32
 8001ca0:	f107 0213 	add.w	r2, r7, #19
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	21e1      	movs	r1, #225	; 0xe1
 8001ca8:	f000 fff0 	bl	8002c8c <st7735_write_reg>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8001cb4:	231d      	movs	r3, #29
 8001cb6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3320      	adds	r3, #32
 8001cbc:	f107 0113 	add.w	r1, r7, #19
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fff7 	bl	8002cb6 <st7735_send_data>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	f107 0113 	add.w	r1, r7, #19
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 ffe9 	bl	8002cb6 <st7735_send_data>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8001cec:	2306      	movs	r3, #6
 8001cee:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3320      	adds	r3, #32
 8001cf4:	f107 0113 	add.w	r1, r7, #19
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 ffdb 	bl	8002cb6 <st7735_send_data>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001d08:	232e      	movs	r3, #46	; 0x2e
 8001d0a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3320      	adds	r3, #32
 8001d10:	f107 0113 	add.w	r1, r7, #19
 8001d14:	2201      	movs	r2, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 ffcd 	bl	8002cb6 <st7735_send_data>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d24:	232c      	movs	r3, #44	; 0x2c
 8001d26:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3320      	adds	r3, #32
 8001d2c:	f107 0113 	add.w	r1, r7, #19
 8001d30:	2201      	movs	r2, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 ffbf 	bl	8002cb6 <st7735_send_data>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001d40:	2329      	movs	r3, #41	; 0x29
 8001d42:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3320      	adds	r3, #32
 8001d48:	f107 0113 	add.w	r1, r7, #19
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 ffb1 	bl	8002cb6 <st7735_send_data>
 8001d54:	4602      	mov	r2, r0
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d5c:	232d      	movs	r3, #45	; 0x2d
 8001d5e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3320      	adds	r3, #32
 8001d64:	f107 0113 	add.w	r1, r7, #19
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 ffa3 	bl	8002cb6 <st7735_send_data>
 8001d70:	4602      	mov	r2, r0
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001d78:	232e      	movs	r3, #46	; 0x2e
 8001d7a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3320      	adds	r3, #32
 8001d80:	f107 0113 	add.w	r1, r7, #19
 8001d84:	2201      	movs	r2, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 ff95 	bl	8002cb6 <st7735_send_data>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001d94:	232e      	movs	r3, #46	; 0x2e
 8001d96:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	f107 0113 	add.w	r1, r7, #19
 8001da0:	2201      	movs	r2, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 ff87 	bl	8002cb6 <st7735_send_data>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001db0:	2337      	movs	r3, #55	; 0x37
 8001db2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3320      	adds	r3, #32
 8001db8:	f107 0113 	add.w	r1, r7, #19
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 ff79 	bl	8002cb6 <st7735_send_data>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8001dcc:	233f      	movs	r3, #63	; 0x3f
 8001dce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	f107 0113 	add.w	r1, r7, #19
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 ff6b 	bl	8002cb6 <st7735_send_data>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3320      	adds	r3, #32
 8001df0:	f107 0113 	add.w	r1, r7, #19
 8001df4:	2201      	movs	r2, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 ff5d 	bl	8002cb6 <st7735_send_data>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	f107 0113 	add.w	r1, r7, #19
 8001e10:	2201      	movs	r2, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 ff4f 	bl	8002cb6 <st7735_send_data>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001e20:	2302      	movs	r3, #2
 8001e22:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3320      	adds	r3, #32
 8001e28:	f107 0113 	add.w	r1, r7, #19
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 ff41 	bl	8002cb6 <st7735_send_data>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3320      	adds	r3, #32
 8001e44:	f107 0113 	add.w	r1, r7, #19
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 ff33 	bl	8002cb6 <st7735_send_data>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f103 0020 	add.w	r0, r3, #32
 8001e62:	f107 0213 	add.w	r2, r7, #19
 8001e66:	2301      	movs	r3, #1
 8001e68:	2113      	movs	r1, #19
 8001e6a:	f000 ff0f 	bl	8002c8c <st7735_write_reg>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f103 0020 	add.w	r0, r3, #32
 8001e7c:	f107 0213 	add.w	r2, r7, #19
 8001e80:	2301      	movs	r3, #1
 8001e82:	2129      	movs	r1, #41	; 0x29
 8001e84:	f000 ff02 	bl	8002c8c <st7735_write_reg>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f944 	bl	8002120 <ST7735_SetOrientation>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001eac:	697b      	ldr	r3, [r7, #20]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3320      	adds	r3, #32
 8001eda:	f107 0208 	add.w	r2, r7, #8
 8001ede:	21da      	movs	r1, #218	; 0xda
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fec0 	bl	8002c66 <st7735_read_reg>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e02d      	b.n	8001f50 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0020 	add.w	r0, r3, #32
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	3301      	adds	r3, #1
 8001f00:	461a      	mov	r2, r3
 8001f02:	21db      	movs	r1, #219	; 0xdb
 8001f04:	f000 feaf 	bl	8002c66 <st7735_read_reg>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e01c      	b.n	8001f50 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 0020 	add.w	r0, r3, #32
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	3302      	adds	r3, #2
 8001f22:	461a      	mov	r2, r3
 8001f24:	21dc      	movs	r1, #220	; 0xdc
 8001f26:	f000 fe9e 	bl	8002c66 <st7735_read_reg>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e00b      	b.n	8001f50 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8001f38:	7abb      	ldrb	r3, [r7, #10]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	7a7b      	ldrb	r3, [r7, #9]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	431a      	orrs	r2, r3
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 0020 	add.w	r0, r3, #32
 8001f6e:	f107 020b 	add.w	r2, r7, #11
 8001f72:	2300      	movs	r3, #0
 8001f74:	2113      	movs	r1, #19
 8001f76:	f000 fe89 	bl	8002c8c <st7735_write_reg>
 8001f7a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8001f7c:	210a      	movs	r1, #10
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fe57 	bl	8002c32 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f103 0020 	add.w	r0, r3, #32
 8001f8a:	f107 020b 	add.w	r2, r7, #11
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2129      	movs	r1, #41	; 0x29
 8001f92:	f000 fe7b 	bl	8002c8c <st7735_write_reg>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8001f9e:	210a      	movs	r1, #10
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fe46 	bl	8002c32 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f103 0020 	add.w	r0, r3, #32
 8001fac:	f107 020b 	add.w	r2, r7, #11
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2136      	movs	r1, #54	; 0x36
 8001fb4:	f000 fe6a 	bl	8002c8c <st7735_write_reg>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <ST7735_DisplayOn+0xc0>)
 8001fc2:	7b1b      	ldrb	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <ST7735_DisplayOn+0xc0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <ST7735_DisplayOn+0xc4>)
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	e006      	b.n	8001fec <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <ST7735_DisplayOn+0xc0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <ST7735_DisplayOn+0xc4>)
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	f107 010b 	add.w	r1, r7, #11
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fe5c 	bl	8002cb6 <st7735_send_data>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2400025c 	.word	0x2400025c
 8002020:	24000078 	.word	0x24000078

08002024 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 0020 	add.w	r0, r3, #32
 8002036:	f107 020b 	add.w	r2, r7, #11
 800203a:	2300      	movs	r3, #0
 800203c:	2113      	movs	r1, #19
 800203e:	f000 fe25 	bl	8002c8c <st7735_write_reg>
 8002042:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002044:	210a      	movs	r1, #10
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fdf3 	bl	8002c32 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 0020 	add.w	r0, r3, #32
 8002052:	f107 020b 	add.w	r2, r7, #11
 8002056:	2300      	movs	r3, #0
 8002058:	2128      	movs	r1, #40	; 0x28
 800205a:	f000 fe17 	bl	8002c8c <st7735_write_reg>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002066:	210a      	movs	r1, #10
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fde2 	bl	8002c32 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0020 	add.w	r0, r3, #32
 8002074:	f107 020b 	add.w	r2, r7, #11
 8002078:	2300      	movs	r3, #0
 800207a:	2136      	movs	r1, #54	; 0x36
 800207c:	f000 fe06 	bl	8002c8c <st7735_write_reg>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <ST7735_DisplayOff+0xc0>)
 800208a:	7b1b      	ldrb	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <ST7735_DisplayOff+0xc0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <ST7735_DisplayOff+0xc4>)
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	e006      	b.n	80020b4 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <ST7735_DisplayOff+0xc0>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <ST7735_DisplayOff+0xc4>)
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3320      	adds	r3, #32
 80020ba:	f107 010b 	add.w	r1, r7, #11
 80020be:	2201      	movs	r2, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fdf8 	bl	8002cb6 <st7735_send_data>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2400025c 	.word	0x2400025c
 80020e8:	24000078 	.word	0x24000078

080020ec <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <ST7735_SetOrientation+0x1a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d119      	bne.n	800216e <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	7b5b      	ldrb	r3, [r3, #13]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d106      	bne.n	8002150 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <ST7735_SetOrientation+0x114>)
 8002144:	2250      	movs	r2, #80	; 0x50
 8002146:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <ST7735_SetOrientation+0x114>)
 800214a:	22a0      	movs	r2, #160	; 0xa0
 800214c:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800214e:	e028      	b.n	80021a2 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7b5b      	ldrb	r3, [r3, #13]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <ST7735_SetOrientation+0x40>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	7b5b      	ldrb	r3, [r3, #13]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d120      	bne.n	80021a2 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <ST7735_SetOrientation+0x114>)
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <ST7735_SetOrientation+0x114>)
 8002168:	22a0      	movs	r2, #160	; 0xa0
 800216a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800216c:	e019      	b.n	80021a2 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	7b5b      	ldrb	r3, [r3, #13]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <ST7735_SetOrientation+0x114>)
 8002178:	22a0      	movs	r2, #160	; 0xa0
 800217a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <ST7735_SetOrientation+0x114>)
 800217e:	2250      	movs	r2, #80	; 0x50
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	e00f      	b.n	80021a4 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7b5b      	ldrb	r3, [r3, #13]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <ST7735_SetOrientation+0x74>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	7b5b      	ldrb	r3, [r3, #13]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d107      	bne.n	80021a4 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <ST7735_SetOrientation+0x114>)
 8002196:	22a0      	movs	r2, #160	; 0xa0
 8002198:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <ST7735_SetOrientation+0x114>)
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	e000      	b.n	80021a4 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80021a2:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021aa:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7b1a      	ldrb	r2, [r3, #12]
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021b2:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7b5a      	ldrb	r2, [r3, #13]
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021ba:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fbdf 	bl	8002990 <ST7735_SetDisplayWindow>
 80021d2:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <ST7735_SetOrientation+0x118>)
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e006      	b.n	8002200 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <ST7735_SetOrientation+0x114>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <ST7735_SetOrientation+0x118>)
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0020 	add.w	r0, r3, #32
 8002208:	f107 020b 	add.w	r2, r7, #11
 800220c:	2301      	movs	r3, #1
 800220e:	2136      	movs	r1, #54	; 0x36
 8002210:	f000 fd3c 	bl	8002c8c <st7735_write_reg>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002228:	68fb      	ldr	r3, [r7, #12]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2400025c 	.word	0x2400025c
 8002238:	24000078 	.word	0x24000078

0800223c <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <ST7735_GetOrientation+0x20>)
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2400025c 	.word	0x2400025c

08002260 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <ST7735_SetCursor+0x174>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d821      	bhi.n	80022b8 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002274:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <ST7735_SetCursor+0x174>)
 8002276:	7b5b      	ldrb	r3, [r3, #13]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10e      	bne.n	800229a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <ST7735_SetCursor+0x174>)
 800227e:	7b1b      	ldrb	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d106      	bne.n	8002292 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	331a      	adds	r3, #26
 8002288:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	e033      	b.n	80022fa <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3318      	adds	r3, #24
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	e02f      	b.n	80022fa <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <ST7735_SetCursor+0x174>)
 800229c:	7b5b      	ldrb	r3, [r3, #13]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d12b      	bne.n	80022fa <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <ST7735_SetCursor+0x174>)
 80022a4:	7b1b      	ldrb	r3, [r3, #12]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d127      	bne.n	80022fa <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3302      	adds	r3, #2
 80022ae:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e020      	b.n	80022fa <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <ST7735_SetCursor+0x174>)
 80022ba:	7b5b      	ldrb	r3, [r3, #13]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10e      	bne.n	80022de <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80022c0:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <ST7735_SetCursor+0x174>)
 80022c2:	7b1b      	ldrb	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <ST7735_SetCursor+0x76>
				Xpos += 1;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	331a      	adds	r3, #26
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	e011      	b.n	80022fa <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3318      	adds	r3, #24
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	e00d      	b.n	80022fa <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <ST7735_SetCursor+0x174>)
 80022e0:	7b5b      	ldrb	r3, [r3, #13]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d109      	bne.n	80022fa <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <ST7735_SetCursor+0x174>)
 80022e8:	7b1b      	ldrb	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3302      	adds	r3, #2
 80022f8:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f103 0020 	add.w	r0, r3, #32
 8002300:	f107 0213 	add.w	r2, r7, #19
 8002304:	2300      	movs	r3, #0
 8002306:	212a      	movs	r1, #42	; 0x2a
 8002308:	f000 fcc0 	bl	8002c8c <st7735_write_reg>
 800230c:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b2db      	uxtb	r3, r3
 8002314:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3320      	adds	r3, #32
 800231a:	f107 0113 	add.w	r1, r7, #19
 800231e:	2201      	movs	r2, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fcc8 	bl	8002cb6 <st7735_send_data>
 8002326:	4602      	mov	r2, r0
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4413      	add	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3320      	adds	r3, #32
 8002338:	f107 0113 	add.w	r1, r7, #19
 800233c:	2201      	movs	r2, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fcb9 	bl	8002cb6 <st7735_send_data>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	4413      	add	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f103 0020 	add.w	r0, r3, #32
 8002352:	f107 0213 	add.w	r2, r7, #19
 8002356:	2300      	movs	r3, #0
 8002358:	212b      	movs	r1, #43	; 0x2b
 800235a:	f000 fc97 	bl	8002c8c <st7735_write_reg>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b2db      	uxtb	r3, r3
 800236c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3320      	adds	r3, #32
 8002372:	f107 0113 	add.w	r1, r7, #19
 8002376:	2201      	movs	r2, #1
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fc9c 	bl	8002cb6 <st7735_send_data>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4413      	add	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3320      	adds	r3, #32
 8002390:	f107 0113 	add.w	r1, r7, #19
 8002394:	2201      	movs	r2, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fc8d 	bl	8002cb6 <st7735_send_data>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f103 0020 	add.w	r0, r3, #32
 80023aa:	f107 0213 	add.w	r2, r7, #19
 80023ae:	2300      	movs	r3, #0
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	f000 fc6b 	bl	8002c8c <st7735_write_reg>
 80023b6:	4602      	mov	r2, r0
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80023ca:	697b      	ldr	r3, [r7, #20]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2400025c 	.word	0x2400025c

080023d8 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b090      	sub	sp, #64	; 0x40
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	330a      	adds	r3, #10
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	330b      	adds	r3, #11
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	441a      	add	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	441a      	add	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	330d      	adds	r3, #13
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	4413      	add	r3, r2
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	3312      	adds	r3, #18
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3313      	adds	r3, #19
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	441a      	add	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	441a      	add	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3315      	adds	r3, #21
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	4413      	add	r3, r2
 800243c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3316      	adds	r3, #22
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3317      	adds	r3, #23
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	441a      	add	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	3318      	adds	r3, #24
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	441a      	add	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3319      	adds	r3, #25
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	4413      	add	r3, r2
 8002464:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3302      	adds	r3, #2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3303      	adds	r3, #3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	441a      	add	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	441a      	add	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	3305      	adds	r3, #5
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	4413      	add	r3, r2
 800248c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	4413      	add	r3, r2
 800249c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1ad2      	subs	r2, r2, r3
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fa6a 	bl	8002990 <ST7735_SetDisplayWindow>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	e087      	b.n	80025da <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80024cc:	7b1b      	ldrb	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a44      	ldr	r2, [pc, #272]	; (80025e8 <ST7735_DrawBitmap+0x210>)
 80024d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024dc:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	e005      	b.n	80024f2 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <ST7735_DrawBitmap+0x210>)
 80024ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f103 0020 	add.w	r0, r3, #32
 80024fa:	f107 0213 	add.w	r2, r7, #19
 80024fe:	2301      	movs	r3, #1
 8002500:	2136      	movs	r1, #54	; 0x36
 8002502:	f000 fbc3 	bl	8002c8c <st7735_write_reg>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
 8002512:	e062      	b.n	80025da <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fea1 	bl	8002260 <ST7735_SetCursor>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	e056      	b.n	80025da <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3320      	adds	r3, #32
 800253c:	f107 0114 	add.w	r1, r7, #20
 8002540:	2202      	movs	r2, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fbb7 	bl	8002cb6 <st7735_send_data>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002554:	e009      	b.n	800256a <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	3302      	adds	r3, #2
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	3302      	adds	r3, #2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	429a      	cmp	r2, r3
 8002568:	d3e0      	bcc.n	800252c <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 800256c:	7b1b      	ldrb	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <ST7735_DrawBitmap+0x210>)
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e006      	b.n	8002596 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <ST7735_DrawBitmap+0x210>)
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002594:	b2db      	uxtb	r3, r3
 8002596:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f103 0020 	add.w	r0, r3, #32
 800259e:	f107 0213 	add.w	r2, r7, #19
 80025a2:	2301      	movs	r3, #1
 80025a4:	2136      	movs	r1, #54	; 0x36
 80025a6:	f000 fb71 	bl	8002c8c <st7735_write_reg>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
 80025b6:	e010      	b.n	80025da <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <ST7735_DrawBitmap+0x20c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f9e1 	bl	8002990 <ST7735_SetDisplayWindow>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3738      	adds	r7, #56	; 0x38
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2400025c 	.word	0x2400025c
 80025e8:	24000078 	.word	0x24000078

080025ec <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	441a      	add	r2, r3
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <ST7735_FillRGBRect+0xcc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d806      	bhi.n	800261e <ST7735_FillRGBRect+0x32>
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	441a      	add	r2, r3
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <ST7735_FillRGBRect+0xcc>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d903      	bls.n	8002626 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e042      	b.n	80026ac <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e03b      	b.n	80026a4 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	461a      	mov	r2, r3
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fe12 	bl	8002260 <ST7735_SetCursor>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e029      	b.n	800269e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e013      	b.n	8002678 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	7811      	ldrb	r1, [r2, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <ST7735_FillRGBRect+0xd0>)
 800265a:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3301      	adds	r3, #1
 8002666:	7811      	ldrb	r1, [r2, #0]
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <ST7735_FillRGBRect+0xd0>)
 800266a:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	3302      	adds	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	429a      	cmp	r2, r3
 800267e:	d3e7      	bcc.n	8002650 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f103 0020 	add.w	r0, r3, #32
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	461a      	mov	r2, r3
 800268c:	490b      	ldr	r1, [pc, #44]	; (80026bc <ST7735_FillRGBRect+0xd0>)
 800268e:	f000 fb12 	bl	8002cb6 <st7735_send_data>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	3301      	adds	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3bf      	bcc.n	800262c <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80026ac:	69fb      	ldr	r3, [r7, #28]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2400025c 	.word	0x2400025c
 80026bc:	2400026c 	.word	0x2400026c

080026c0 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	441a      	add	r2, r3
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <ST7735_DrawHLine+0x98>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d903      	bls.n	80026e8 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e032      	b.n	800274e <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fdb7 	bl	8002260 <ST7735_SetCursor>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e026      	b.n	800274e <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e010      	b.n	8002728 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	0a1a      	lsrs	r2, r3, #8
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b2d1      	uxtb	r1, r2
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <ST7735_DrawHLine+0x9c>)
 8002712:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	3301      	adds	r3, #1
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	b2d1      	uxtb	r1, r2
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <ST7735_DrawHLine+0x9c>)
 8002720:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	3301      	adds	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3ea      	bcc.n	8002706 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f103 0020 	add.w	r0, r3, #32
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	461a      	mov	r2, r3
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <ST7735_DrawHLine+0x9c>)
 800273e:	f000 faba 	bl	8002cb6 <st7735_send_data>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800274e:	697b      	ldr	r3, [r7, #20]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2400025c 	.word	0x2400025c
 800275c:	240004ec 	.word	0x240004ec

08002760 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	441a      	add	r2, r3
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <ST7735_DrawVLine+0x64>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d903      	bls.n	8002788 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e018      	b.n	80027ba <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e011      	b.n	80027b2 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	441a      	add	r2, r3
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f841 	bl	8002820 <ST7735_SetPixel>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	617b      	str	r3, [r7, #20]
        break;
 80027aa:	e006      	b.n	80027ba <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3e9      	bcc.n	800278e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 80027ba:	697b      	ldr	r3, [r7, #20]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2400025c 	.word	0x2400025c

080027c8 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e014      	b.n	800280e <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff ff66 	bl	80026c0 <ST7735_DrawHLine>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	61fb      	str	r3, [r7, #28]
      break;
 8002800:	e009      	b.n	8002816 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	3301      	adds	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	429a      	cmp	r2, r3
 8002814:	d3e6      	bcc.n	80027e4 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002816:	69fb      	ldr	r3, [r7, #28]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29a      	uxth	r2, r3
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	4313      	orrs	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <ST7735_SetPixel+0x84>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d204      	bcs.n	800285e <ST7735_SetPixel+0x3e>
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <ST7735_SetPixel+0x84>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d303      	bcc.n	8002866 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e019      	b.n	800289a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fcf8 	bl	8002260 <ST7735_SetCursor>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e00d      	b.n	800289a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3320      	adds	r3, #32
 8002882:	f107 0112 	add.w	r1, r7, #18
 8002886:	2202      	movs	r2, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fa14 	bl	8002cb6 <st7735_send_data>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800289a:	697b      	ldr	r3, [r7, #20]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2400025c 	.word	0x2400025c

080028a8 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff fcd0 	bl	8002260 <ST7735_SetCursor>
 80028c0:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3320      	adds	r3, #32
 80028c6:	f107 0211 	add.w	r2, r7, #17
 80028ca:	212e      	movs	r1, #46	; 0x2e
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f9ca 	bl	8002c66 <st7735_read_reg>
 80028d2:	4602      	mov	r2, r0
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3320      	adds	r3, #32
 80028de:	f107 0111 	add.w	r1, r7, #17
 80028e2:	2201      	movs	r2, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f9f8 	bl	8002cda <st7735_recv_data>
 80028ea:	4602      	mov	r2, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3320      	adds	r3, #32
 80028f6:	f107 0113 	add.w	r1, r7, #19
 80028fa:	2201      	movs	r2, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f9ec 	bl	8002cda <st7735_recv_data>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3320      	adds	r3, #32
 800290e:	f107 0112 	add.w	r1, r7, #18
 8002912:	2201      	movs	r2, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f9e0 	bl	8002cda <st7735_recv_data>
 800291a:	4602      	mov	r2, r0
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	461a      	mov	r2, r3
 8002926:	7cbb      	ldrb	r3, [r7, #18]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	441a      	add	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800293c:	697b      	ldr	r3, [r7, #20]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <ST7735_GetXSize+0x20>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	2400025c 	.word	0x2400025c

0800296c <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <ST7735_GetYSize+0x20>)
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	2400025c 	.word	0x2400025c

08002990 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800299e:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d821      	bhi.n	80029ea <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029a8:	7b5b      	ldrb	r3, [r3, #13]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10e      	bne.n	80029cc <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80029ae:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029b0:	7b1b      	ldrb	r3, [r3, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	331a      	adds	r3, #26
 80029ba:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3301      	adds	r3, #1
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	e036      	b.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3318      	adds	r3, #24
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	e032      	b.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80029cc:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029ce:	7b5b      	ldrb	r3, [r3, #13]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d12e      	bne.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d12a      	bne.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3302      	adds	r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3301      	adds	r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	e023      	b.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80029ea:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029ec:	7b5b      	ldrb	r3, [r3, #13]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d111      	bne.n	8002a16 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80029f2:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 80029f4:	7b1b      	ldrb	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	331a      	adds	r3, #26
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	e014      	b.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3318      	adds	r3, #24
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	e00d      	b.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002a16:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 8002a18:	7b5b      	ldrb	r3, [r3, #13]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d109      	bne.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <ST7735_SetDisplayWindow+0x204>)
 8002a20:	7b1b      	ldrb	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f103 0020 	add.w	r0, r3, #32
 8002a38:	f107 0213 	add.w	r2, r7, #19
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	212a      	movs	r1, #42	; 0x2a
 8002a40:	f000 f924 	bl	8002c8c <st7735_write_reg>
 8002a44:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3320      	adds	r3, #32
 8002a52:	f107 0113 	add.w	r1, r7, #19
 8002a56:	2201      	movs	r2, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f92c 	bl	8002cb6 <st7735_send_data>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4413      	add	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3320      	adds	r3, #32
 8002a70:	f107 0113 	add.w	r1, r7, #19
 8002a74:	2201      	movs	r2, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f91d 	bl	8002cb6 <st7735_send_data>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3320      	adds	r3, #32
 8002a96:	f107 0113 	add.w	r1, r7, #19
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f90a 	bl	8002cb6 <st7735_send_data>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3320      	adds	r3, #32
 8002ac0:	f107 0113 	add.w	r1, r7, #19
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f8f5 	bl	8002cb6 <st7735_send_data>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f103 0020 	add.w	r0, r3, #32
 8002ada:	f107 0213 	add.w	r2, r7, #19
 8002ade:	2300      	movs	r3, #0
 8002ae0:	212b      	movs	r1, #43	; 0x2b
 8002ae2:	f000 f8d3 	bl	8002c8c <st7735_write_reg>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3320      	adds	r3, #32
 8002afa:	f107 0113 	add.w	r1, r7, #19
 8002afe:	2201      	movs	r2, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8d8 	bl	8002cb6 <st7735_send_data>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3320      	adds	r3, #32
 8002b18:	f107 0113 	add.w	r1, r7, #19
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f8c9 	bl	8002cb6 <st7735_send_data>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4413      	add	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	4413      	add	r3, r2
 8002b32:	3b01      	subs	r3, #1
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	f107 0113 	add.w	r1, r7, #19
 8002b42:	2201      	movs	r2, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f8b6 	bl	8002cb6 <st7735_send_data>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3320      	adds	r3, #32
 8002b68:	f107 0113 	add.w	r1, r7, #19
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f8a1 	bl	8002cb6 <st7735_send_data>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002b88:	697b      	ldr	r3, [r7, #20]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2400025c 	.word	0x2400025c

08002b98 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	7afa      	ldrb	r2, [r7, #11]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4798      	blx	r3
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	7af8      	ldrb	r0, [r7, #11]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68b8      	ldr	r0, [r7, #8]
 8002c02:	4798      	blx	r3
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	4798      	blx	r3
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4798      	blx	r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002c46:	bf00      	nop
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4798      	blx	r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8f5      	bhi.n	8002c48 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6910      	ldr	r0, [r2, #16]
 8002c7c:	7af9      	ldrb	r1, [r7, #11]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	4603      	mov	r3, r0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681c      	ldr	r4, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6918      	ldr	r0, [r3, #16]
 8002ca4:	7af9      	ldrb	r1, [r7, #11]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	47a0      	blx	r4
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6910      	ldr	r0, [r2, #16]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4798      	blx	r3
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6910      	ldr	r0, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4798      	blx	r3
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d06:	2003      	movs	r0, #3
 8002d08:	f000 f97c 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d0c:	f001 f9e8 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_Init+0x68>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	4913      	ldr	r1, [pc, #76]	; (8002d6c <HAL_Init+0x6c>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_Init+0x68>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_Init+0x6c>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_Init+0x70>)
 8002d42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d44:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_Init+0x74>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f000 f814 	bl	8002d78 <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e002      	b.n	8002d60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5a:	f7fd fd87 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	08007ff8 	.word	0x08007ff8
 8002d70:	24000004 	.word	0x24000004
 8002d74:	24000000 	.word	0x24000000

08002d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_InitTick+0x60>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e021      	b.n	8002dd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_InitTick+0x64>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_InitTick+0x60>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f953 	bl	800304e <HAL_SYSTICK_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00e      	b.n	8002dd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d80a      	bhi.n	8002dce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f000 f92b 	bl	800301a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_InitTick+0x68>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2400009c 	.word	0x2400009c
 8002ddc:	24000000 	.word	0x24000000
 8002de0:	24000098 	.word	0x24000098

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2400009c 	.word	0x2400009c
 8002e08:	2400076c 	.word	0x2400076c

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2400076c 	.word	0x2400076c

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2400009c 	.word	0x2400009c

08002e6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetREVID+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0c1b      	lsrs	r3, r3, #16
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	5c001000 	.word	0x5c001000

08002e84 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_GetDEVID+0x18>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	5c001000 	.word	0x5c001000

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00
 8002ee4:	05fa0000 	.word	0x05fa0000

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	; (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f7ff ff8e 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff47 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff5e 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ff90 	bl	8002f58 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff5f 	bl	8002f04 <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffb2 	bl	8002fc0 <SysTick_Config>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_GPIO_Init+0x234>)
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800307a:	e194      	b.n	80033a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8186 	beq.w	80033a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d005      	beq.n	80030ac <HAL_GPIO_Init+0x44>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d130      	bne.n	800310e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030e2:	2201      	movs	r2, #1
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0201 	and.w	r2, r3, #1
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d017      	beq.n	800314a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d123      	bne.n	800319e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80e0 	beq.w	80033a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_GPIO_Init+0x238>)
 80031e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031e6:	4a2e      	ldr	r2, [pc, #184]	; (80032a0 <HAL_GPIO_Init+0x238>)
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_GPIO_Init+0x238>)
 80031f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <HAL_GPIO_Init+0x23c>)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	220f      	movs	r2, #15
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <HAL_GPIO_Init+0x240>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d052      	beq.n	80032d0 <HAL_GPIO_Init+0x268>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <HAL_GPIO_Init+0x244>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_GPIO_Init+0x22e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_GPIO_Init+0x248>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02b      	beq.n	8003292 <HAL_GPIO_Init+0x22a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_GPIO_Init+0x24c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d025      	beq.n	800328e <HAL_GPIO_Init+0x226>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_GPIO_Init+0x250>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <HAL_GPIO_Init+0x222>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_GPIO_Init+0x254>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d019      	beq.n	8003286 <HAL_GPIO_Init+0x21e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_GPIO_Init+0x258>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0x21a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_GPIO_Init+0x25c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00d      	beq.n	800327e <HAL_GPIO_Init+0x216>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_GPIO_Init+0x260>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0x212>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_GPIO_Init+0x264>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_GPIO_Init+0x20e>
 8003272:	2309      	movs	r3, #9
 8003274:	e02d      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003276:	230a      	movs	r3, #10
 8003278:	e02b      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800327a:	2308      	movs	r3, #8
 800327c:	e029      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800327e:	2307      	movs	r3, #7
 8003280:	e027      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003282:	2306      	movs	r3, #6
 8003284:	e025      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003286:	2305      	movs	r3, #5
 8003288:	e023      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800328a:	2304      	movs	r3, #4
 800328c:	e021      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800328e:	2303      	movs	r3, #3
 8003290:	e01f      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003292:	2302      	movs	r3, #2
 8003294:	e01d      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003296:	2301      	movs	r3, #1
 8003298:	e01b      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800329a:	bf00      	nop
 800329c:	58000080 	.word	0x58000080
 80032a0:	58024400 	.word	0x58024400
 80032a4:	58000400 	.word	0x58000400
 80032a8:	58020000 	.word	0x58020000
 80032ac:	58020400 	.word	0x58020400
 80032b0:	58020800 	.word	0x58020800
 80032b4:	58020c00 	.word	0x58020c00
 80032b8:	58021000 	.word	0x58021000
 80032bc:	58021400 	.word	0x58021400
 80032c0:	58021800 	.word	0x58021800
 80032c4:	58021c00 	.word	0x58021c00
 80032c8:	58022000 	.word	0x58022000
 80032cc:	58022400 	.word	0x58022400
 80032d0:	2300      	movs	r3, #0
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f002 0203 	and.w	r2, r2, #3
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4093      	lsls	r3, r2
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e2:	4938      	ldr	r1, [pc, #224]	; (80033c4 <HAL_GPIO_Init+0x35c>)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f ae63 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	3724      	adds	r7, #36	; 0x24
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	58000400 	.word	0x58000400

080033c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e001      	b.n	80033ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	58024800 	.word	0x58024800

0800344c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_PWREx_ConfigSupply+0x70>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d00a      	beq.n	8003476 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_PWREx_ConfigSupply+0x70>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d001      	beq.n	8003472 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e01f      	b.n	80034b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e01d      	b.n	80034b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_PWREx_ConfigSupply+0x70>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	490f      	ldr	r1, [pc, #60]	; (80034bc <HAL_PWREx_ConfigSupply+0x70>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4313      	orrs	r3, r2
 8003484:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003486:	f7ff fcc1 	bl	8002e0c <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800348c:	e009      	b.n	80034a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800348e:	f7ff fcbd 	bl	8002e0c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349c:	d901      	bls.n	80034a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_PWREx_ConfigSupply+0x70>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d1ee      	bne.n	800348e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	58024800 	.word	0x58024800

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f000 bc48 	b.w	8003d64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8088 	beq.w	80035f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	4b99      	ldr	r3, [pc, #612]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ec:	4b96      	ldr	r3, [pc, #600]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d007      	beq.n	8003508 <HAL_RCC_OscConfig+0x48>
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2b18      	cmp	r3, #24
 80034fc:	d111      	bne.n	8003522 <HAL_RCC_OscConfig+0x62>
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d06d      	beq.n	80035f0 <HAL_RCC_OscConfig+0x130>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d169      	bne.n	80035f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f000 bc21 	b.w	8003d64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x7a>
 800352c:	4b86      	ldr	r3, [pc, #536]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e02e      	b.n	8003598 <HAL_RCC_OscConfig+0xd8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x9c>
 8003542:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b7e      	ldr	r3, [pc, #504]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7d      	ldr	r2, [pc, #500]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xd8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0xc0>
 8003566:	4b78      	ldr	r3, [pc, #480]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a77      	ldr	r2, [pc, #476]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a74      	ldr	r2, [pc, #464]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xd8>
 8003580:	4b71      	ldr	r3, [pc, #452]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a70      	ldr	r2, [pc, #448]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6d      	ldr	r2, [pc, #436]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7ff fc34 	bl	8002e0c <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7ff fc30 	bl	8002e0c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e3d4      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7ff fc20 	bl	8002e0c <HAL_GetTick>
 80035cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7ff fc1c 	bl	8002e0c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e3c0      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035e2:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x110>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80ca 	beq.w	8003794 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003600:	4b51      	ldr	r3, [pc, #324]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003608:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <HAL_RCC_OscConfig+0x166>
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2b18      	cmp	r3, #24
 800361a:	d156      	bne.n	80036ca <HAL_RCC_OscConfig+0x20a>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d151      	bne.n	80036ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003626:	4b48      	ldr	r3, [pc, #288]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e392      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0219 	bic.w	r2, r3, #25
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	493f      	ldr	r1, [pc, #252]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7ff fbdc 	bl	8002e0c <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7ff fbd8 	bl	8002e0c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e37c      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	f7ff fbf9 	bl	8002e6c <HAL_GetREVID>
 800367a:	4603      	mov	r3, r0
 800367c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003680:	4293      	cmp	r3, r2
 8003682:	d817      	bhi.n	80036b4 <HAL_RCC_OscConfig+0x1f4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d108      	bne.n	800369e <HAL_RCC_OscConfig+0x1de>
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	e07a      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	031b      	lsls	r3, r3, #12
 80036ac:	4926      	ldr	r1, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b2:	e06f      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c8:	e064      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d047      	beq.n	8003762 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0219 	bic.w	r2, r3, #25
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	491a      	ldr	r1, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7ff fb92 	bl	8002e0c <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7ff fb8e 	bl	8002e0c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e332      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	f7ff fbaf 	bl	8002e6c <HAL_GetREVID>
 800370e:	4603      	mov	r3, r0
 8003710:	f241 0203 	movw	r2, #4099	; 0x1003
 8003714:	4293      	cmp	r3, r2
 8003716:	d819      	bhi.n	800374c <HAL_RCC_OscConfig+0x28c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d108      	bne.n	8003732 <HAL_RCC_OscConfig+0x272>
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003728:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	6053      	str	r3, [r2, #4]
 8003730:	e030      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	031b      	lsls	r3, r3, #12
 8003740:	4901      	ldr	r1, [pc, #4]	; (8003748 <HAL_RCC_OscConfig+0x288>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
 8003746:	e025      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
 8003748:	58024400 	.word	0x58024400
 800374c:	4b9a      	ldr	r3, [pc, #616]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	4997      	ldr	r1, [pc, #604]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b95      	ldr	r3, [pc, #596]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a94      	ldr	r2, [pc, #592]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7ff fb4d 	bl	8002e0c <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff fb49 	bl	8002e0c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e2ed      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003788:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a9 	beq.w	80038f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a2:	4b85      	ldr	r3, [pc, #532]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ac:	4b82      	ldr	r3, [pc, #520]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d007      	beq.n	80037c8 <HAL_RCC_OscConfig+0x308>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b18      	cmp	r3, #24
 80037bc:	d13a      	bne.n	8003834 <HAL_RCC_OscConfig+0x374>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d135      	bne.n	8003834 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037c8:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_OscConfig+0x320>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e2c1      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e0:	f7ff fb44 	bl	8002e6c <HAL_GetREVID>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d817      	bhi.n	800381e <HAL_RCC_OscConfig+0x35e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d108      	bne.n	8003808 <HAL_RCC_OscConfig+0x348>
 80037f6:	4b70      	ldr	r3, [pc, #448]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037fe:	4a6e      	ldr	r2, [pc, #440]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003804:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003806:	e075      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003808:	4b6b      	ldr	r3, [pc, #428]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	069b      	lsls	r3, r3, #26
 8003816:	4968      	ldr	r1, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800381c:	e06a      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800381e:	4b66      	ldr	r3, [pc, #408]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	4962      	ldr	r1, [pc, #392]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003832:	e05f      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d042      	beq.n	80038c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800383c:	4b5e      	ldr	r3, [pc, #376]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a5d      	ldr	r2, [pc, #372]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7ff fae0 	bl	8002e0c <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003850:	f7ff fadc 	bl	8002e0c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e280      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003862:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800386e:	f7ff fafd 	bl	8002e6c <HAL_GetREVID>
 8003872:	4603      	mov	r3, r0
 8003874:	f241 0203 	movw	r2, #4099	; 0x1003
 8003878:	4293      	cmp	r3, r2
 800387a:	d817      	bhi.n	80038ac <HAL_RCC_OscConfig+0x3ec>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	2b20      	cmp	r3, #32
 8003882:	d108      	bne.n	8003896 <HAL_RCC_OscConfig+0x3d6>
 8003884:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800388c:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800388e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003892:	6053      	str	r3, [r2, #4]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
 8003896:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	069b      	lsls	r3, r3, #26
 80038a4:	4944      	ldr	r1, [pc, #272]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
 80038aa:	e023      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	493f      	ldr	r1, [pc, #252]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
 80038c0:	e018      	b.n	80038f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038c2:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7ff fa9d 	bl	8002e0c <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038d6:	f7ff fa99 	bl	8002e0c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e23d      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d036      	beq.n	800396e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d019      	beq.n	800393c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7ff fa7a 	bl	8002e0c <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7ff fa76 	bl	8002e0c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e21a      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x45c>
 800393a:	e018      	b.n	800396e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7ff fa60 	bl	8002e0c <HAL_GetTick>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7ff fa5c 	bl	8002e0c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e200      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d039      	beq.n	80039ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01c      	beq.n	80039bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 8003988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800398c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800398e:	f7ff fa3d 	bl	8002e0c <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003996:	f7ff fa39 	bl	8002e0c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1dd      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_OscConfig+0x4f8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x4d6>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039bc:	4b9b      	ldr	r3, [pc, #620]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a9a      	ldr	r2, [pc, #616]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 80039c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039c8:	f7ff fa20 	bl	8002e0c <HAL_GetTick>
 80039cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d0:	f7ff fa1c 	bl	8002e0c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1c0      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039e2:	4b92      	ldr	r3, [pc, #584]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8081 	beq.w	8003afe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039fc:	4b8c      	ldr	r3, [pc, #560]	; (8003c30 <HAL_RCC_OscConfig+0x770>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a8b      	ldr	r2, [pc, #556]	; (8003c30 <HAL_RCC_OscConfig+0x770>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a08:	f7ff fa00 	bl	8002e0c <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7ff f9fc 	bl	8002e0c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1a0      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a22:	4b83      	ldr	r3, [pc, #524]	; (8003c30 <HAL_RCC_OscConfig+0x770>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x584>
 8003a36:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e02d      	b.n	8003aa0 <HAL_RCC_OscConfig+0x5e0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5a6>
 8003a4c:	4b77      	ldr	r3, [pc, #476]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a76      	ldr	r2, [pc, #472]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	4b74      	ldr	r3, [pc, #464]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a73      	ldr	r2, [pc, #460]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x5e0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c8>
 8003a6e:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	4b6c      	ldr	r3, [pc, #432]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a6b      	ldr	r2, [pc, #428]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x5e0>
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a67      	ldr	r2, [pc, #412]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a64      	ldr	r2, [pc, #400]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	f023 0304 	bic.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7ff f9b0 	bl	8002e0c <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7ff f9ac 	bl	8002e0c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e14e      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac6:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ee      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x5f0>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7ff f99a 	bl	8002e0c <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7ff f996 	bl	8002e0c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e138      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ee      	bne.n	8003adc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 812d 	beq.w	8003d62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b08:	4b48      	ldr	r3, [pc, #288]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b10:	2b18      	cmp	r3, #24
 8003b12:	f000 80bd 	beq.w	8003c90 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	f040 809e 	bne.w	8003c5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a41      	ldr	r2, [pc, #260]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7ff f96e 	bl	8002e0c <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7ff f96a 	bl	8002e0c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e10e      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b52:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x774>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4931      	ldr	r1, [pc, #196]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	3b01      	subs	r3, #1
 8003b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	025b      	lsls	r3, r3, #9
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	3b01      	subs	r3, #1
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	3b01      	subs	r3, #1
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b9c:	4923      	ldr	r1, [pc, #140]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bae:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb2:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_RCC_OscConfig+0x778>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bba:	00d2      	lsls	r2, r2, #3
 8003bbc:	491b      	ldr	r1, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f023 020c 	bic.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4917      	ldr	r1, [pc, #92]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f023 0202 	bic.w	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	4912      	ldr	r1, [pc, #72]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7ff f8f3 	bl	8002e0c <HAL_GetTick>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c28:	e011      	b.n	8003c4e <HAL_RCC_OscConfig+0x78e>
 8003c2a:	bf00      	nop
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58024800 	.word	0x58024800
 8003c34:	fffffc0c 	.word	0xfffffc0c
 8003c38:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7ff f8e6 	bl	8002e0c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e08a      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x77c>
 8003c5a:	e082      	b.n	8003d62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a42      	ldr	r2, [pc, #264]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7ff f8d0 	bl	8002e0c <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7ff f8cc 	bl	8002e0c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e070      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c82:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x7b0>
 8003c8e:	e068      	b.n	8003d62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d031      	beq.n	8003d08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d12a      	bne.n	8003d08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d122      	bne.n	8003d08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11a      	bne.n	8003d08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0e1b      	lsrs	r3, r3, #24
 8003cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02b      	b.n	8003d64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d01f      	beq.n	8003d62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d2e:	f7ff f86d 	bl	8002e0c <HAL_GetTick>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d34:	bf00      	nop
 8003d36:	f7ff f869 	bl	8002e0c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d0f9      	beq.n	8003d36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_RCC_OscConfig+0x8b0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d4e:	00d2      	lsls	r2, r2, #3
 8003d50:	4906      	ldr	r1, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_RCC_OscConfig+0x8ac>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	ffff0007 	.word	0xffff0007

08003d74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e19c      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d910      	bls.n	8003db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b87      	ldr	r3, [pc, #540]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 020f 	bic.w	r2, r3, #15
 8003d9e:	4985      	ldr	r1, [pc, #532]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b83      	ldr	r3, [pc, #524]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e184      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	4b7b      	ldr	r3, [pc, #492]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d908      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dd4:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	4975      	ldr	r1, [pc, #468]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d908      	bls.n	8003e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e02:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	496a      	ldr	r1, [pc, #424]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d908      	bls.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	495e      	ldr	r1, [pc, #376]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d908      	bls.n	8003e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4953      	ldr	r1, [pc, #332]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d908      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f023 020f 	bic.w	r2, r3, #15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4947      	ldr	r1, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d055      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4940      	ldr	r1, [pc, #256]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec4:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d121      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0f6      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0ea      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0de      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0d6      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4925      	ldr	r1, [pc, #148]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f26:	f7fe ff71 	bl	8002e0c <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2e:	f7fe ff6d 	bl	8002e0c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0be      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f44:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d1eb      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d208      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f023 020f 	bic.w	r2, r3, #15
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d214      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 020f 	bic.w	r2, r3, #15
 8003f9a:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e086      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
 8003fb4:	52002000 	.word	0x52002000
 8003fb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d208      	bcs.n	8003fea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fd8:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4939      	ldr	r1, [pc, #228]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004002:	429a      	cmp	r2, r3
 8004004:	d208      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	492e      	ldr	r1, [pc, #184]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004030:	429a      	cmp	r2, r3
 8004032:	d208      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4922      	ldr	r1, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004042:	4313      	orrs	r3, r2
 8004044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405e:	429a      	cmp	r2, r3
 8004060:	d208      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4917      	ldr	r1, [pc, #92]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004070:	4313      	orrs	r3, r2
 8004072:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004074:	f000 f834 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4912      	ldr	r1, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x35c>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_RCC_ClockConfig+0x35c>)
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x360>)
 80040aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040ac:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x364>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x368>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe fe5e 	bl	8002d78 <HAL_InitTick>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	08007ff8 	.word	0x08007ff8
 80040d4:	24000004 	.word	0x24000004
 80040d8:	24000000 	.word	0x24000000
 80040dc:	24000098 	.word	0x24000098

080040e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e6:	4bb3      	ldr	r3, [pc, #716]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ee:	2b18      	cmp	r3, #24
 80040f0:	f200 8155 	bhi.w	800439e <HAL_RCC_GetSysClockFreq+0x2be>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004161 	.word	0x08004161
 8004100:	0800439f 	.word	0x0800439f
 8004104:	0800439f 	.word	0x0800439f
 8004108:	0800439f 	.word	0x0800439f
 800410c:	0800439f 	.word	0x0800439f
 8004110:	0800439f 	.word	0x0800439f
 8004114:	0800439f 	.word	0x0800439f
 8004118:	0800439f 	.word	0x0800439f
 800411c:	08004187 	.word	0x08004187
 8004120:	0800439f 	.word	0x0800439f
 8004124:	0800439f 	.word	0x0800439f
 8004128:	0800439f 	.word	0x0800439f
 800412c:	0800439f 	.word	0x0800439f
 8004130:	0800439f 	.word	0x0800439f
 8004134:	0800439f 	.word	0x0800439f
 8004138:	0800439f 	.word	0x0800439f
 800413c:	0800418d 	.word	0x0800418d
 8004140:	0800439f 	.word	0x0800439f
 8004144:	0800439f 	.word	0x0800439f
 8004148:	0800439f 	.word	0x0800439f
 800414c:	0800439f 	.word	0x0800439f
 8004150:	0800439f 	.word	0x0800439f
 8004154:	0800439f 	.word	0x0800439f
 8004158:	0800439f 	.word	0x0800439f
 800415c:	08004193 	.word	0x08004193
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004160:	4b94      	ldr	r3, [pc, #592]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800416c:	4b91      	ldr	r3, [pc, #580]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	4a90      	ldr	r2, [pc, #576]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800417e:	e111      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004180:	4b8d      	ldr	r3, [pc, #564]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004182:	61bb      	str	r3, [r7, #24]
      break;
 8004184:	e10e      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004186:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004188:	61bb      	str	r3, [r7, #24]
      break;
 800418a:	e10b      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800418c:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800418e:	61bb      	str	r3, [r7, #24]
      break;
 8004190:	e108      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800419c:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041a8:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041b2:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80e1 	beq.w	8004398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f000 8083 	beq.w	80042e4 <HAL_RCC_GetSysClockFreq+0x204>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f200 80a1 	bhi.w	8004328 <HAL_RCC_GetSysClockFreq+0x248>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x114>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d056      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041f2:	e099      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004200:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	4a6b      	ldr	r2, [pc, #428]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a02 	vldr	s12, [r7, #8]
 800423e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800425a:	e087      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004282:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800429e:	e065      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042e2:	e043      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004306:	ed97 6a02 	vldr	s12, [r7, #8]
 800430a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800430e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004326:	e021      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434a:	ed97 6a02 	vldr	s12, [r7, #8]
 800434e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800436a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	3301      	adds	r3, #1
 8004378:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004384:	edd7 6a07 	vldr	s13, [r7, #28]
 8004388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004390:	ee17 3a90 	vmov	r3, s15
 8004394:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004396:	e005      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
      break;
 800439c:	e002      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043a0:	61bb      	str	r3, [r7, #24]
      break;
 80043a2:	bf00      	nop
  }

  return sysclockfreq;
 80043a4:	69bb      	ldr	r3, [r7, #24]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	03d09000 	.word	0x03d09000
 80043bc:	003d0900 	.word	0x003d0900
 80043c0:	017d7840 	.word	0x017d7840
 80043c4:	46000000 	.word	0x46000000
 80043c8:	4c742400 	.word	0x4c742400
 80043cc:	4a742400 	.word	0x4a742400
 80043d0:	4bbebc20 	.word	0x4bbebc20

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b0ca      	sub	sp, #296	; 0x128
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80043f8:	2500      	movs	r5, #0
 80043fa:	ea54 0305 	orrs.w	r3, r4, r5
 80043fe:	d049      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800440a:	d02f      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800440c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004410:	d828      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004416:	d01a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441c:	d822      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d007      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004428:	e01c      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442a:	4bb8      	ldr	r3, [pc, #736]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	4ab7      	ldr	r2, [pc, #732]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004436:	e01a      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443c:	3308      	adds	r3, #8
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f9d1 	bl	80057e8 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800444c:	e00f      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004452:	3328      	adds	r3, #40	; 0x28
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f001 fa78 	bl	800594c <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004462:	e004      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800446c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004476:	4ba5      	ldr	r3, [pc, #660]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004484:	4aa1      	ldr	r2, [pc, #644]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004486:	430b      	orrs	r3, r1
 8004488:	6513      	str	r3, [r2, #80]	; 0x50
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004490:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80044a0:	f04f 0900 	mov.w	r9, #0
 80044a4:	ea58 0309 	orrs.w	r3, r8, r9
 80044a8:	d047      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d82a      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044d1 	.word	0x080044d1
 80044c0:	080044df 	.word	0x080044df
 80044c4:	080044f5 	.word	0x080044f5
 80044c8:	08004513 	.word	0x08004513
 80044cc:	08004513 	.word	0x08004513
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4b8e      	ldr	r3, [pc, #568]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a8d      	ldr	r2, [pc, #564]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044dc:	e01a      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e2:	3308      	adds	r3, #8
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f97e 	bl	80057e8 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044f2:	e00f      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	3328      	adds	r3, #40	; 0x28
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 fa25 	bl	800594c <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004508:	e004      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451c:	4b7b      	ldr	r3, [pc, #492]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	f023 0107 	bic.w	r1, r3, #7
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	4a78      	ldr	r2, [pc, #480]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800452c:	430b      	orrs	r3, r1
 800452e:	6513      	str	r3, [r2, #80]	; 0x50
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004546:	f04f 0b00 	mov.w	fp, #0
 800454a:	ea5a 030b 	orrs.w	r3, sl, fp
 800454e:	d04c      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455a:	d030      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004560:	d829      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004562:	2bc0      	cmp	r3, #192	; 0xc0
 8004564:	d02d      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004566:	2bc0      	cmp	r3, #192	; 0xc0
 8004568:	d825      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d018      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d821      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d007      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800457a:	e01c      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457c:	4b63      	ldr	r3, [pc, #396]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a62      	ldr	r2, [pc, #392]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004588:	e01c      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	3308      	adds	r3, #8
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f928 	bl	80057e8 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	3328      	adds	r3, #40	; 0x28
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 f9cf 	bl	800594c <RCCEx_PLL3_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045bc:	e002      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	4a4c      	ldr	r2, [pc, #304]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6513      	str	r3, [r2, #80]	; 0x50
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80045f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004600:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d053      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004616:	d035      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800461c:	d82e      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800461e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004622:	d031      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004624:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004628:	d828      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800462a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462e:	d01a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004634:	d822      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800463a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463e:	d007      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004640:	e01c      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	4a31      	ldr	r2, [pc, #196]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800464e:	e01c      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	3308      	adds	r3, #8
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f001 f8c5 	bl	80057e8 <RCCEx_PLL2_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004664:	e011      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	3328      	adds	r3, #40	; 0x28
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f001 f96c 	bl	800594c <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800467a:	e006      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004682:	e002      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004692:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80046be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d056      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046de:	d038      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80046e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e4:	d831      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ea:	d034      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80046ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046f0:	d82b      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f6:	d01d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80046f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046fc:	d825      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004708:	e01f      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4ba2      	ldr	r3, [pc, #648]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4aa1      	ldr	r2, [pc, #644]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800471c:	e01c      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	3308      	adds	r3, #8
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f85e 	bl	80057e8 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004732:	e011      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	3328      	adds	r3, #40	; 0x28
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f001 f905 	bl	800594c <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004760:	4b8e      	ldr	r3, [pc, #568]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004770:	4a8a      	ldr	r2, [pc, #552]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004772:	430b      	orrs	r3, r1
 8004774:	6593      	str	r3, [r2, #88]	; 0x58
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800478c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004796:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d03a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	d01f      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80047aa:	2b30      	cmp	r3, #48	; 0x30
 80047ac:	d819      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d00c      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d815      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d019      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d111      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047be:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4a76      	ldr	r2, [pc, #472]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80047ca:	e011      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d0:	3308      	adds	r3, #8
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f807 	bl	80057e8 <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	4a65      	ldr	r2, [pc, #404]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004808:	430b      	orrs	r3, r1
 800480a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004822:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800482c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d051      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004840:	d035      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004846:	d82e      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800484c:	d031      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800484e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004852:	d828      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d01a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485e:	d822      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d007      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800486a:	e01c      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	4a4a      	ldr	r2, [pc, #296]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004878:	e01c      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	3308      	adds	r3, #8
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 ffb0 	bl	80057e8 <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800488e:	e011      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	3328      	adds	r3, #40	; 0x28
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f001 f857 	bl	800594c <RCCEx_PLL3_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048a4:	e006      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80048b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048bc:	4b37      	ldr	r3, [pc, #220]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	4a34      	ldr	r2, [pc, #208]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6513      	str	r3, [r2, #80]	; 0x50
 80048d0:	e003      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80048e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d056      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004904:	d033      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490a:	d82c      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800490c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004910:	d02f      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004916:	d826      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004918:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800491c:	d02b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800491e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004922:	d820      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004928:	d012      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800492a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800492e:	d81a      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d022      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004938:	d115      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	3308      	adds	r3, #8
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f000 ff50 	bl	80057e8 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800494e:	e015      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004954:	3328      	adds	r3, #40	; 0x28
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fff7 	bl	800594c <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004964:	e00a      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800496e:	bf00      	nop
 8004970:	e004      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800497a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800497c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004992:	4a02      	ldr	r2, [pc, #8]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6513      	str	r3, [r2, #80]	; 0x50
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80049b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d055      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d4:	d033      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80049d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049da:	d82c      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d02f      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e6:	d826      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ec:	d02b      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80049ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049f2:	d820      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80049f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f8:	d012      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fe:	d81a      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d022      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a08:	d115      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	3308      	adds	r3, #8
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fee8 	bl	80057e8 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e015      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a24:	3328      	adds	r3, #40	; 0x28
 8004a26:	2101      	movs	r1, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 ff8f 	bl	800594c <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a34:	e00a      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a64:	4a9f      	ldr	r2, [pc, #636]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6593      	str	r3, [r2, #88]	; 0x58
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d037      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d00e      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa4:	d816      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab0:	4b8c      	ldr	r3, [pc, #560]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4a8b      	ldr	r2, [pc, #556]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004abc:	e00f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fe8e 	bl	80057e8 <RCCEx_PLL2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ae6:	4b7f      	ldr	r3, [pc, #508]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a7b      	ldr	r2, [pc, #492]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af6:	430b      	orrs	r3, r1
 8004af8:	6513      	str	r3, [r2, #80]	; 0x50
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d039      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d81c      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b71 	.word	0x08004b71
 8004b38:	08004b45 	.word	0x08004b45
 8004b3c:	08004b53 	.word	0x08004b53
 8004b40:	08004b71 	.word	0x08004b71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b44:	4b67      	ldr	r3, [pc, #412]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a66      	ldr	r2, [pc, #408]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b50:	e00f      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b56:	3308      	adds	r3, #8
 8004b58:	2102      	movs	r1, #2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fe44 	bl	80057e8 <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b66:	e004      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	f023 0103 	bic.w	r1, r3, #3
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b88:	4a56      	ldr	r2, [pc, #344]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b8e:	e003      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f000 809f 	beq.w	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bba:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4a      	ldr	r2, [pc, #296]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc6:	f7fe f921 	bl	8002e0c <HAL_GetTick>
 8004bca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bce:	e00b      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fe f91c 	bl	8002e0c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	; 0x64
 8004bde:	d903      	bls.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004be6:	e005      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be8:	4b3f      	ldr	r3, [pc, #252]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ed      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d179      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004bfc:	4b39      	ldr	r3, [pc, #228]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c08:	4053      	eors	r3, r2
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c12:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a30      	ldr	r2, [pc, #192]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c36:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d118      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fe f8de 	bl	8002e0c <HAL_GetTick>
 8004c50:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c54:	e00d      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fe f8d9 	bl	8002e0c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c60:	1ad2      	subs	r2, r2, r3
 8004c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d903      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004c70:	e005      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0eb      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d129      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c96:	d10e      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ca8:	091a      	lsrs	r2, r3, #4
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6113      	str	r3, [r2, #16]
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cc0:	6113      	str	r3, [r2, #16]
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd8:	e00e      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004ce2:	e009      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58024800 	.word	0x58024800
 8004cec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f002 0301 	and.w	r3, r2, #1
 8004d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f000 8089 	beq.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d20:	2b28      	cmp	r3, #40	; 0x28
 8004d22:	d86b      	bhi.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004e05 	.word	0x08004e05
 8004d30:	08004dfd 	.word	0x08004dfd
 8004d34:	08004dfd 	.word	0x08004dfd
 8004d38:	08004dfd 	.word	0x08004dfd
 8004d3c:	08004dfd 	.word	0x08004dfd
 8004d40:	08004dfd 	.word	0x08004dfd
 8004d44:	08004dfd 	.word	0x08004dfd
 8004d48:	08004dfd 	.word	0x08004dfd
 8004d4c:	08004dd1 	.word	0x08004dd1
 8004d50:	08004dfd 	.word	0x08004dfd
 8004d54:	08004dfd 	.word	0x08004dfd
 8004d58:	08004dfd 	.word	0x08004dfd
 8004d5c:	08004dfd 	.word	0x08004dfd
 8004d60:	08004dfd 	.word	0x08004dfd
 8004d64:	08004dfd 	.word	0x08004dfd
 8004d68:	08004dfd 	.word	0x08004dfd
 8004d6c:	08004de7 	.word	0x08004de7
 8004d70:	08004dfd 	.word	0x08004dfd
 8004d74:	08004dfd 	.word	0x08004dfd
 8004d78:	08004dfd 	.word	0x08004dfd
 8004d7c:	08004dfd 	.word	0x08004dfd
 8004d80:	08004dfd 	.word	0x08004dfd
 8004d84:	08004dfd 	.word	0x08004dfd
 8004d88:	08004dfd 	.word	0x08004dfd
 8004d8c:	08004e05 	.word	0x08004e05
 8004d90:	08004dfd 	.word	0x08004dfd
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004dfd 	.word	0x08004dfd
 8004da0:	08004dfd 	.word	0x08004dfd
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004dfd 	.word	0x08004dfd
 8004db4:	08004dfd 	.word	0x08004dfd
 8004db8:	08004dfd 	.word	0x08004dfd
 8004dbc:	08004dfd 	.word	0x08004dfd
 8004dc0:	08004dfd 	.word	0x08004dfd
 8004dc4:	08004dfd 	.word	0x08004dfd
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e05 	.word	0x08004e05
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fd05 	bl	80057e8 <RCCEx_PLL2_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004de4:	e00f      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dea:	3328      	adds	r3, #40	; 0x28
 8004dec:	2101      	movs	r1, #1
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fdac 	bl	800594c <RCCEx_PLL3_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004dfa:	e004      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e02:	e000      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e0e:	4bbf      	ldr	r3, [pc, #764]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1c:	4abb      	ldr	r2, [pc, #748]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	6553      	str	r3, [r2, #84]	; 0x54
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f002 0302 	and.w	r3, r2, #2
 8004e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d041      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d824      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004ea9 	.word	0x08004ea9
 8004e60:	08004e75 	.word	0x08004e75
 8004e64:	08004e8b 	.word	0x08004e8b
 8004e68:	08004ea9 	.word	0x08004ea9
 8004e6c:	08004ea9 	.word	0x08004ea9
 8004e70:	08004ea9 	.word	0x08004ea9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e78:	3308      	adds	r3, #8
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fcb3 	bl	80057e8 <RCCEx_PLL2_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8e:	3328      	adds	r3, #40	; 0x28
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fd5a 	bl	800594c <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004eb2:	4b96      	ldr	r3, [pc, #600]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f023 0107 	bic.w	r1, r3, #7
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec0:	4a92      	ldr	r2, [pc, #584]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f002 0304 	and.w	r3, r2, #4
 8004edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d044      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d825      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f51 	.word	0x08004f51
 8004f08:	08004f1d 	.word	0x08004f1d
 8004f0c:	08004f33 	.word	0x08004f33
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f51 	.word	0x08004f51
 8004f18:	08004f51 	.word	0x08004f51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f20:	3308      	adds	r3, #8
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fc5f 	bl	80057e8 <RCCEx_PLL2_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f30:	e00f      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	3328      	adds	r3, #40	; 0x28
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fd06 	bl	800594c <RCCEx_PLL3_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	f023 0107 	bic.w	r1, r3, #7
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	4a68      	ldr	r2, [pc, #416]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f70:	e003      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f002 0320 	and.w	r3, r2, #32
 8004f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d055      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fa6:	d033      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fac:	d82c      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d02f      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d826      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fbe:	d02b      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc4:	d820      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fca:	d012      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d81a      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d022      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fda:	d115      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fbff 	bl	80057e8 <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ff0:	e015      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff6:	3328      	adds	r3, #40	; 0x28
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fca6 	bl	800594c <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005006:	e00a      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800500e:	e006      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005010:	bf00      	nop
 8005012:	e004      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005014:	bf00      	nop
 8005016:	e002      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005018:	bf00      	nop
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800501c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	4a35      	ldr	r2, [pc, #212]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005038:	430b      	orrs	r3, r1
 800503a:	6553      	str	r3, [r2, #84]	; 0x54
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800505c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d058      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005072:	d033      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005074:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005078:	d82c      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005084:	d826      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508a:	d02b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800508c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005090:	d820      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d012      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509c:	d81a      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d022      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	d115      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ac:	3308      	adds	r3, #8
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fb99 	bl	80057e8 <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050bc:	e015      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	3328      	adds	r3, #40	; 0x28
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fc40 	bl	800594c <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050d2:	e00a      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050da:	e006      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050dc:	bf00      	nop
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10e      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005102:	4a02      	ldr	r2, [pc, #8]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005104:	430b      	orrs	r3, r1
 8005106:	6593      	str	r3, [r2, #88]	; 0x58
 8005108:	e006      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005128:	2300      	movs	r3, #0
 800512a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800512e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005132:	460b      	mov	r3, r1
 8005134:	4313      	orrs	r3, r2
 8005136:	d055      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005144:	d033      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005146:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800514a:	d82c      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005150:	d02f      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005156:	d826      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800515c:	d02b      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800515e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005162:	d820      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005168:	d012      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800516a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800516e:	d81a      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d022      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005178:	d115      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	3308      	adds	r3, #8
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb30 	bl	80057e8 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800518e:	e015      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005194:	3328      	adds	r3, #40	; 0x28
 8005196:	2102      	movs	r1, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fbd7 	bl	800594c <RCCEx_PLL3_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051a4:	e00a      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ac:	e006      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051ae:	bf00      	nop
 80051b0:	e004      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051b2:	bf00      	nop
 80051b4:	e002      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051c4:	4ba1      	ldr	r3, [pc, #644]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051d4:	4a9d      	ldr	r2, [pc, #628]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051d6:	430b      	orrs	r3, r1
 80051d8:	6593      	str	r3, [r2, #88]	; 0x58
 80051da:	e003      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f002 0308 	and.w	r3, r2, #8
 80051f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051fe:	460b      	mov	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	d01e      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005216:	3328      	adds	r3, #40	; 0x28
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb96 	bl	800594c <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800522c:	4b87      	ldr	r3, [pc, #540]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523c:	4a83      	ldr	r2, [pc, #524]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800523e:	430b      	orrs	r3, r1
 8005240:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f002 0310 	and.w	r3, r2, #16
 800524e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005258:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800525c:	460b      	mov	r3, r1
 800525e:	4313      	orrs	r3, r2
 8005260:	d01e      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800526a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526e:	d10c      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	3328      	adds	r3, #40	; 0x28
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fb67 	bl	800594c <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800528a:	4b70      	ldr	r3, [pc, #448]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800529a:	4a6c      	ldr	r2, [pc, #432]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d03e      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052cc:	d022      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80052ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d2:	d81b      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80052de:	e015      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e4:	3308      	adds	r3, #8
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa7d 	bl	80057e8 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052f4:	e00f      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fa:	3328      	adds	r3, #40	; 0x28
 80052fc:	2102      	movs	r1, #2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb24 	bl	800594c <RCCEx_PLL3_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800530a:	e004      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800531e:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800532e:	4a47      	ldr	r2, [pc, #284]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6593      	str	r3, [r2, #88]	; 0x58
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800534a:	67bb      	str	r3, [r7, #120]	; 0x78
 800534c:	2300      	movs	r3, #0
 800534e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005350:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d03b      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005366:	d01f      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536c:	d818      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005378:	d007      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4b33      	ldr	r3, [pc, #204]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a32      	ldr	r2, [pc, #200]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005388:	e00f      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538e:	3328      	adds	r3, #40	; 0x28
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fada 	bl	800594c <RCCEx_PLL3_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800539e:	e004      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80053a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	4a22      	ldr	r2, [pc, #136]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6553      	str	r3, [r2, #84]	; 0x54
 80053c8:	e003      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80053de:	673b      	str	r3, [r7, #112]	; 0x70
 80053e0:	2300      	movs	r3, #0
 80053e2:	677b      	str	r3, [r7, #116]	; 0x74
 80053e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053e8:	460b      	mov	r3, r1
 80053ea:	4313      	orrs	r3, r2
 80053ec:	d034      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d007      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80053fe:	e011      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a11      	ldr	r2, [pc, #68]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800540c:	e00e      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	3308      	adds	r3, #8
 8005414:	2102      	movs	r1, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f9e6 	bl	80057e8 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800542a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	4a02      	ldr	r2, [pc, #8]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005444:	430b      	orrs	r3, r1
 8005446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005448:	e006      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005464:	66bb      	str	r3, [r7, #104]	; 0x68
 8005466:	2300      	movs	r3, #0
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d00c      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005478:	3328      	adds	r3, #40	; 0x28
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fa65 	bl	800594c <RCCEx_PLL3_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800549a:	663b      	str	r3, [r7, #96]	; 0x60
 800549c:	2300      	movs	r3, #0
 800549e:	667b      	str	r3, [r7, #100]	; 0x64
 80054a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d038      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b6:	d018      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80054b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054bc:	d811      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c2:	d014      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80054c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c8:	d80b      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d106      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d4:	4bc3      	ldr	r3, [pc, #780]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4ac2      	ldr	r2, [pc, #776]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80054e0:	e008      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054e8:	e004      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80054f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054fc:	4bb9      	ldr	r3, [pc, #740]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005500:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550c:	4ab5      	ldr	r2, [pc, #724]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6553      	str	r3, [r2, #84]	; 0x54
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800551c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005528:	65bb      	str	r3, [r7, #88]	; 0x58
 800552a:	2300      	movs	r3, #0
 800552c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005538:	4baa      	ldr	r3, [pc, #680]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	4aa7      	ldr	r2, [pc, #668]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005558:	653b      	str	r3, [r7, #80]	; 0x50
 800555a:	2300      	movs	r3, #0
 800555c:	657b      	str	r3, [r7, #84]	; 0x54
 800555e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005568:	4b9e      	ldr	r3, [pc, #632]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005574:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005578:	4a9a      	ldr	r2, [pc, #616]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800557a:	430b      	orrs	r3, r1
 800557c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	2300      	movs	r3, #0
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800559a:	4b92      	ldr	r3, [pc, #584]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a8:	4a8e      	ldr	r2, [pc, #568]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
 80055bc:	2300      	movs	r3, #0
 80055be:	647b      	str	r3, [r7, #68]	; 0x44
 80055c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ca:	4b86      	ldr	r3, [pc, #536]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4a85      	ldr	r2, [pc, #532]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055d4:	6113      	str	r3, [r2, #16]
 80055d6:	4b83      	ldr	r3, [pc, #524]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055d8:	6919      	ldr	r1, [r3, #16]
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055e2:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f6:	2300      	movs	r3, #0
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005604:	4b77      	ldr	r3, [pc, #476]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005608:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	4a74      	ldr	r2, [pc, #464]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005614:	430b      	orrs	r3, r1
 8005616:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005624:	633b      	str	r3, [r7, #48]	; 0x30
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
 800562a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800562e:	460b      	mov	r3, r1
 8005630:	4313      	orrs	r3, r2
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005634:	4b6b      	ldr	r3, [pc, #428]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005644:	4a67      	ldr	r2, [pc, #412]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005646:	430b      	orrs	r3, r1
 8005648:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	2100      	movs	r1, #0
 8005654:	62b9      	str	r1, [r7, #40]	; 0x28
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d011      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	3308      	adds	r3, #8
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f8ba 	bl	80057e8 <RCCEx_PLL2_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	2100      	movs	r1, #0
 8005694:	6239      	str	r1, [r7, #32]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
 800569c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d011      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	3308      	adds	r3, #8
 80056ac:	2101      	movs	r1, #1
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f89a 	bl	80057e8 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	2100      	movs	r1, #0
 80056d4:	61b9      	str	r1, [r7, #24]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80056e0:	460b      	mov	r3, r1
 80056e2:	4313      	orrs	r3, r2
 80056e4:	d011      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ea:	3308      	adds	r3, #8
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f87a 	bl	80057e8 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	2100      	movs	r1, #0
 8005714:	6139      	str	r1, [r7, #16]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d011      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572a:	3328      	adds	r3, #40	; 0x28
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f90c 	bl	800594c <RCCEx_PLL3_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800573a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	2100      	movs	r1, #0
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d011      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576a:	3328      	adds	r3, #40	; 0x28
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f8ec 	bl	800594c <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	2100      	movs	r1, #0
 8005794:	6039      	str	r1, [r7, #0]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d011      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	3328      	adds	r3, #40	; 0x28
 80057ac:	2102      	movs	r1, #2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f8cc 	bl	800594c <RCCEx_PLL3_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80057ca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
}
 80057d8:	4618      	mov	r0, r3
 80057da:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80057de:	46bd      	mov	sp, r7
 80057e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e4:	58024400 	.word	0x58024400

080057e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057f6:	4b53      	ldr	r3, [pc, #332]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d101      	bne.n	8005806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e099      	b.n	800593a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005806:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a4e      	ldr	r2, [pc, #312]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800580c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005812:	f7fd fafb 	bl	8002e0c <HAL_GetTick>
 8005816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005818:	e008      	b.n	800582c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800581a:	f7fd faf7 	bl	8002e0c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e086      	b.n	800593a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800582c:	4b45      	ldr	r3, [pc, #276]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	031b      	lsls	r3, r3, #12
 8005846:	493f      	ldr	r1, [pc, #252]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	628b      	str	r3, [r1, #40]	; 0x28
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	3b01      	subs	r3, #1
 8005852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	3b01      	subs	r3, #1
 800585c:	025b      	lsls	r3, r3, #9
 800585e:	b29b      	uxth	r3, r3
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	3b01      	subs	r3, #1
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800587c:	4931      	ldr	r1, [pc, #196]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005882:	4b30      	ldr	r3, [pc, #192]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	492d      	ldr	r1, [pc, #180]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	f023 0220 	bic.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	4928      	ldr	r1, [pc, #160]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	4a26      	ldr	r2, [pc, #152]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <RCCEx_PLL2_Config+0x160>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	69d2      	ldr	r2, [r2, #28]
 80058be:	00d2      	lsls	r2, r2, #3
 80058c0:	4920      	ldr	r1, [pc, #128]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058c6:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058cc:	f043 0310 	orr.w	r3, r3, #16
 80058d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058e4:	e00f      	b.n	8005906 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d106      	bne.n	80058fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058f8:	e005      	b.n	8005906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a11      	ldr	r2, [pc, #68]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800590c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005912:	f7fd fa7b 	bl	8002e0c <HAL_GetTick>
 8005916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005918:	e008      	b.n	800592c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800591a:	f7fd fa77 	bl	8002e0c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e006      	b.n	800593a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <RCCEx_PLL2_Config+0x15c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
 8005948:	ffff0007 	.word	0xffff0007

0800594c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d101      	bne.n	800596a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e099      	b.n	8005a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800596a:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005976:	f7fd fa49 	bl	8002e0c <HAL_GetTick>
 800597a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800597c:	e008      	b.n	8005990 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800597e:	f7fd fa45 	bl	8002e0c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e086      	b.n	8005a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005990:	4b45      	ldr	r3, [pc, #276]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f0      	bne.n	800597e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800599c:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	493f      	ldr	r1, [pc, #252]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	628b      	str	r3, [r1, #40]	; 0x28
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	3b01      	subs	r3, #1
 80059c0:	025b      	lsls	r3, r3, #9
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	3b01      	subs	r3, #1
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059e0:	4931      	ldr	r1, [pc, #196]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	492d      	ldr	r1, [pc, #180]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	4928      	ldr	r1, [pc, #160]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <RCCEx_PLL3_Config+0x160>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	69d2      	ldr	r2, [r2, #28]
 8005a22:	00d2      	lsls	r2, r2, #3
 8005a24:	4920      	ldr	r1, [pc, #128]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a48:	e00f      	b.n	8005a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d106      	bne.n	8005a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a50:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a5c:	e005      	b.n	8005a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fd f9c9 	bl	8002e0c <HAL_GetTick>
 8005a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a7c:	e008      	b.n	8005a90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a7e:	f7fd f9c5 	bl	8002e0c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e006      	b.n	8005a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <RCCEx_PLL3_Config+0x15c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	ffff0007 	.word	0xffff0007

08005ab0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d071      	beq.n	8005ba6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fa fdd6 	bl	8000688 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d050      	beq.n	8005b94 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	22ca      	movs	r2, #202	; 0xca
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2253      	movs	r2, #83	; 0x53
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9a0 	bl	8005e48 <RTC_EnterInitMode>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d124      	bne.n	8005b5c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6899      	ldr	r1, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RTC_Init+0x100>)
 8005b1e:	400b      	ands	r3, r1
 8005b20:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	0419      	lsls	r1, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9ac 	bl	8005eb0 <RTC_ExitInitMode>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d113      	bne.n	8005b8a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0203 	bic.w	r2, r2, #3
 8005b70:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
 8005b92:	e001      	b.n	8005b98 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	ff8fffbf 	.word	0xff8fffbf

08005bb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_RTC_SetTime+0x1a>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e089      	b.n	8005ce2 <HAL_RTC_SetTime+0x12e>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	22ca      	movs	r2, #202	; 0xca
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2253      	movs	r2, #83	; 0x53
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f92a 	bl	8005e48 <RTC_EnterInitMode>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d161      	bne.n	8005cc2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d126      	bne.n	8005c52 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f985 	bl	8005f2c <RTC_ByteToBcd2>
 8005c22:	4603      	mov	r3, r0
 8005c24:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f97e 	bl	8005f2c <RTC_ByteToBcd2>
 8005c30:	4603      	mov	r3, r0
 8005c32:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c34:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f976 	bl	8005f2c <RTC_ByteToBcd2>
 8005c40:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c42:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e018      	b.n	8005c84 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c72:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c78:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_RTC_SetTime+0x138>)
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f8f9 	bl	8005eb0 <RTC_ExitInitMode>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005cca:	7cfb      	ldrb	r3, [r7, #19]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	007f7f7f 	.word	0x007f7f7f

08005cf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_RTC_SetDate+0x1a>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e073      	b.n	8005df2 <HAL_RTC_SetDate+0x102>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10e      	bne.n	8005d3e <HAL_RTC_SetDate+0x4e>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	330a      	adds	r3, #10
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11c      	bne.n	8005d7e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f8ef 	bl	8005f2c <RTC_ByteToBcd2>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f8e8 	bl	8005f2c <RTC_ByteToBcd2>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f8e0 	bl	8005f2c <RTC_ByteToBcd2>
 8005d6c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d6e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e00e      	b.n	8005d9c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	78db      	ldrb	r3, [r3, #3]
 8005d82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d8a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	22ca      	movs	r2, #202	; 0xca
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2253      	movs	r2, #83	; 0x53
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f84b 	bl	8005e48 <RTC_EnterInitMode>
 8005db2:	4603      	mov	r3, r0
 8005db4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <HAL_RTC_SetDate+0x10c>)
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f871 	bl	8005eb0 <RTC_ExitInitMode>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005df0:	7cfb      	ldrb	r3, [r7, #19]


}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	00ffff3f 	.word	0x00ffff3f

08005e00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <HAL_RTC_WaitForSynchro+0x44>)
 8005e0e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005e10:	f7fc fffc 	bl	8002e0c <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e16:	e009      	b.n	8005e2c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e18:	f7fc fff8 	bl	8002e0c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e26:	d901      	bls.n	8005e2c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e007      	b.n	8005e3c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0ee      	beq.n	8005e18 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	0003ff5f 	.word	0x0003ff5f

08005e48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d120      	bne.n	8005ea4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e6c:	f7fc ffce 	bl	8002e0c <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e72:	e00d      	b.n	8005e90 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e74:	f7fc ffca 	bl	8002e0c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e82:	d905      	bls.n	8005e90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <RTC_EnterInitMode+0x5c>
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d1e7      	bne.n	8005e74 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10c      	bne.n	8005eee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff93 	bl	8005e00 <HAL_RTC_WaitForSynchro>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01e      	beq.n	8005f1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e017      	b.n	8005f1e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005eee:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ff80 	bl	8005e00 <HAL_RTC_WaitForSynchro>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <RTC_ExitInitMode+0x78>)
 8005f18:	f043 0320 	orr.w	r3, r3, #32
 8005f1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	58004000 	.word	0x58004000

08005f2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005f3e:	e005      	b.n	8005f4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	3b0a      	subs	r3, #10
 8005f4a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005f4c:	7afb      	ldrb	r3, [r7, #11]
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d8f6      	bhi.n	8005f40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	b2db      	uxtb	r3, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e10f      	b.n	800619e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a87      	ldr	r2, [pc, #540]	; (80061a8 <HAL_SPI_Init+0x23c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <HAL_SPI_Init+0x42>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a86      	ldr	r2, [pc, #536]	; (80061ac <HAL_SPI_Init+0x240>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00a      	beq.n	8005fae <HAL_SPI_Init+0x42>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a84      	ldr	r2, [pc, #528]	; (80061b0 <HAL_SPI_Init+0x244>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d005      	beq.n	8005fae <HAL_SPI_Init+0x42>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d901      	bls.n	8005fae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0f7      	b.n	800619e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fd5a 	bl	8006a68 <SPI_GetPacketSize>
 8005fb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7b      	ldr	r2, [pc, #492]	; (80061a8 <HAL_SPI_Init+0x23c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00c      	beq.n	8005fda <HAL_SPI_Init+0x6e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a79      	ldr	r2, [pc, #484]	; (80061ac <HAL_SPI_Init+0x240>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d007      	beq.n	8005fda <HAL_SPI_Init+0x6e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a78      	ldr	r2, [pc, #480]	; (80061b0 <HAL_SPI_Init+0x244>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_Init+0x6e>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d811      	bhi.n	8005ffe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005fde:	4a72      	ldr	r2, [pc, #456]	; (80061a8 <HAL_SPI_Init+0x23c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a70      	ldr	r2, [pc, #448]	; (80061ac <HAL_SPI_Init+0x240>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_SPI_Init+0x8c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_SPI_Init+0x244>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d104      	bne.n	8006002 <HAL_SPI_Init+0x96>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d901      	bls.n	8006002 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0cd      	b.n	800619e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fa fbc0 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800603e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006048:	d119      	bne.n	800607e <HAL_SPI_Init+0x112>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006052:	d103      	bne.n	800605c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10c      	bne.n	800607e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606c:	d107      	bne.n	800607e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <HAL_SPI_Init+0x13e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b06      	cmp	r3, #6
 8006090:	d90b      	bls.n	80060aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e007      	b.n	80060ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	ea42 0103 	orr.w	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	ea42 0103 	orr.w	r1, r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d113      	bne.n	800615a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006144:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006158:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40013000 	.word	0x40013000
 80061ac:	40003800 	.word	0x40003800
 80061b0:	40003c00 	.word	0x40003c00

080061b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3320      	adds	r3, #32
 80061ca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_SPI_Transmit+0x2a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e1e1      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e6:	f7fc fe11 	bl	8002e0c <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d007      	beq.n	8006208 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006204:	7efb      	ldrb	r3, [r7, #27]
 8006206:	e1cc      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_SPI_Transmit+0x60>
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006220:	7efb      	ldrb	r3, [r7, #27]
 8006222:	e1be      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006274:	d108      	bne.n	8006288 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e009      	b.n	800629c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800629a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b96      	ldr	r3, [pc, #600]	; (80064fc <HAL_SPI_Transmit+0x348>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	88f9      	ldrh	r1, [r7, #6]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c8:	d107      	bne.n	80062da <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d947      	bls.n	8006372 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80062e2:	e03f      	b.n	8006364 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d114      	bne.n	800631c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006302:	1d1a      	adds	r2, r3, #4
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800631a:	e023      	b.n	8006364 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800631c:	f7fc fd76 	bl	8002e0c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d803      	bhi.n	8006334 <HAL_SPI_Transmit+0x180>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d102      	bne.n	800633a <HAL_SPI_Transmit+0x186>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d114      	bne.n	8006364 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fac6 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800634e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e11e      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1b9      	bne.n	80062e4 <HAL_SPI_Transmit+0x130>
 8006370:	e0f1      	b.n	8006556 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b07      	cmp	r3, #7
 8006378:	f240 80e6 	bls.w	8006548 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800637c:	e05d      	b.n	800643a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d132      	bne.n	80063f2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d918      	bls.n	80063ca <HAL_SPI_Transmit+0x216>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d014      	beq.n	80063ca <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b02      	subs	r3, #2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063c8:	e037      	b.n	800643a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063f0:	e023      	b.n	800643a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fc fd0b 	bl	8002e0c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d803      	bhi.n	800640a <HAL_SPI_Transmit+0x256>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Transmit+0x25c>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa5b 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006424:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e0b3      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d19b      	bne.n	800637e <HAL_SPI_Transmit+0x1ca>
 8006446:	e086      	b.n	8006556 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d154      	bne.n	8006500 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b03      	cmp	r3, #3
 8006460:	d918      	bls.n	8006494 <HAL_SPI_Transmit+0x2e0>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d914      	bls.n	8006494 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b04      	subs	r3, #4
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006492:	e059      	b.n	8006548 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d917      	bls.n	80064d0 <HAL_SPI_Transmit+0x31c>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d013      	beq.n	80064d0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b02      	subs	r3, #2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064ce:	e03b      	b.n	8006548 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3320      	adds	r3, #32
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064fa:	e025      	b.n	8006548 <HAL_SPI_Transmit+0x394>
 80064fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006500:	f7fc fc84 	bl	8002e0c <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d803      	bhi.n	8006518 <HAL_SPI_Transmit+0x364>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d102      	bne.n	800651e <HAL_SPI_Transmit+0x36a>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d114      	bne.n	8006548 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f9d4 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e02c      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	f47f af79 	bne.w	8006448 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2200      	movs	r2, #0
 800655e:	2108      	movs	r1, #8
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fa53 	bl	8006a0c <SPI_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f9a5 	bl	80068cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80065a0:	7efb      	ldrb	r3, [r7, #27]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop

080065ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3330      	adds	r3, #48	; 0x30
 80065c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_SPI_Receive+0x2a>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e173      	b.n	80068be <HAL_SPI_Receive+0x312>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065de:	f7fc fc15 	bl	8002e0c <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d007      	beq.n	8006600 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
 80065f2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
 80065fe:	e15e      	b.n	80068be <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_SPI_Receive+0x60>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d107      	bne.n	800661c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006618:	7ffb      	ldrb	r3, [r7, #31]
 800661a:	e150      	b.n	80068be <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2204      	movs	r2, #4
 8006620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800666c:	d108      	bne.n	8006680 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e009      	b.n	8006694 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006692:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	4b8b      	ldr	r3, [pc, #556]	; (80068c8 <HAL_SPI_Receive+0x31c>)
 800669c:	4013      	ands	r3, r2
 800669e:	88f9      	ldrh	r1, [r7, #6]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c0:	d107      	bne.n	80066d2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	d948      	bls.n	800676c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80066da:	e040      	b.n	800675e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	f248 0308 	movw	r3, #32776	; 0x8008
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d014      	beq.n	8006716 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066f6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fc:	1d1a      	adds	r2, r3, #4
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006714:	e023      	b.n	800675e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006716:	f7fc fb79 	bl	8002e0c <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d803      	bhi.n	800672e <HAL_SPI_Receive+0x182>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d102      	bne.n	8006734 <HAL_SPI_Receive+0x188>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d114      	bne.n	800675e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f8c9 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006748:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e0af      	b.n	80068be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1b8      	bne.n	80066dc <HAL_SPI_Receive+0x130>
 800676a:	e095      	b.n	8006898 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b07      	cmp	r3, #7
 8006772:	f240 808b 	bls.w	800688c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006776:	e03f      	b.n	80067f8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b01      	cmp	r3, #1
 8006784:	d114      	bne.n	80067b0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	8812      	ldrh	r2, [r2, #0]
 800678e:	b292      	uxth	r2, r2
 8006790:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006796:	1c9a      	adds	r2, r3, #2
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067ae:	e023      	b.n	80067f8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b0:	f7fc fb2c 	bl	8002e0c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d803      	bhi.n	80067c8 <HAL_SPI_Receive+0x21c>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d102      	bne.n	80067ce <HAL_SPI_Receive+0x222>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d114      	bne.n	80067f8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f87c 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e062      	b.n	80068be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1b9      	bne.n	8006778 <HAL_SPI_Receive+0x1cc>
 8006804:	e048      	b.n	8006898 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d117      	bne.n	8006844 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006842:	e023      	b.n	800688c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006844:	f7fc fae2 	bl	8002e0c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d803      	bhi.n	800685c <HAL_SPI_Receive+0x2b0>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d102      	bne.n	8006862 <HAL_SPI_Receive+0x2b6>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d114      	bne.n	800688c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f832 	bl	80068cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e018      	b.n	80068be <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1b6      	bne.n	8006806 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f817 	bl	80068cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80068bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	ffff0000 	.word	0xffff0000

080068cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0208 	orr.w	r2, r2, #8
 80068ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0210 	orr.w	r2, r2, #16
 80068fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6919      	ldr	r1, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b3c      	ldr	r3, [pc, #240]	; (8006a08 <SPI_CloseTransfer+0x13c>)
 8006918:	400b      	ands	r3, r1
 800691a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800692a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b04      	cmp	r3, #4
 8006936:	d014      	beq.n	8006962 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00f      	beq.n	8006962 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006948:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0220 	orr.w	r2, r2, #32
 8006960:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d014      	beq.n	8006998 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00f      	beq.n	8006998 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697e:	f043 0204 	orr.w	r2, r3, #4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006996:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00f      	beq.n	80069c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	f043 0201 	orr.w	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699a      	ldr	r2, [r3, #24]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d2:	f043 0208 	orr.w	r2, r3, #8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	fffffc90 	.word	0xfffffc90

08006a0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a1c:	e010      	b.n	8006a40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1e:	f7fc f9f5 	bl	8002e0c <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d803      	bhi.n	8006a36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d102      	bne.n	8006a3c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e00f      	b.n	8006a60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d0df      	beq.n	8006a1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3307      	adds	r3, #7
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e049      	b.n	8006b44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fa f863 	bl	8000b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f000 f949 	bl	8006d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e0ff      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b14      	cmp	r3, #20
 8006b76:	f200 80f0 	bhi.w	8006d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006d5b 	.word	0x08006d5b
 8006b88:	08006d5b 	.word	0x08006d5b
 8006b8c:	08006d5b 	.word	0x08006d5b
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006d5b 	.word	0x08006d5b
 8006b98:	08006d5b 	.word	0x08006d5b
 8006b9c:	08006d5b 	.word	0x08006d5b
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006d5b 	.word	0x08006d5b
 8006ba8:	08006d5b 	.word	0x08006d5b
 8006bac:	08006d5b 	.word	0x08006d5b
 8006bb0:	08006c97 	.word	0x08006c97
 8006bb4:	08006d5b 	.word	0x08006d5b
 8006bb8:	08006d5b 	.word	0x08006d5b
 8006bbc:	08006d5b 	.word	0x08006d5b
 8006bc0:	08006cd9 	.word	0x08006cd9
 8006bc4:	08006d5b 	.word	0x08006d5b
 8006bc8:	08006d5b 	.word	0x08006d5b
 8006bcc:	08006d5b 	.word	0x08006d5b
 8006bd0:	08006d19 	.word	0x08006d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f964 	bl	8006ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
      break;
 8006c12:	e0a5      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f9d4 	bl	8006fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e084      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fa3d 	bl	80070dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0208 	orr.w	r2, r2, #8
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0204 	bic.w	r2, r2, #4
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
      break;
 8006c94:	e064      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 faa5 	bl	80071ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
      break;
 8006cd6:	e043      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 faee 	bl	80072c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0208 	orr.w	r2, r2, #8
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0204 	bic.w	r2, r2, #4
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d16:	e023      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fb32 	bl	8007388 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d58:	e002      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <TIM_Base_SetConfig+0x114>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d013      	beq.n	8006db4 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d92:	d00f      	beq.n	8006db4 <TIM_Base_SetConfig+0x40>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a3d      	ldr	r2, [pc, #244]	; (8006e8c <TIM_Base_SetConfig+0x118>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a3c      	ldr	r2, [pc, #240]	; (8006e90 <TIM_Base_SetConfig+0x11c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a3b      	ldr	r2, [pc, #236]	; (8006e94 <TIM_Base_SetConfig+0x120>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0x40>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a3a      	ldr	r2, [pc, #232]	; (8006e98 <TIM_Base_SetConfig+0x124>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2f      	ldr	r2, [pc, #188]	; (8006e88 <TIM_Base_SetConfig+0x114>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01f      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd4:	d01b      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <TIM_Base_SetConfig+0x118>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d017      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2b      	ldr	r2, [pc, #172]	; (8006e90 <TIM_Base_SetConfig+0x11c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d013      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <TIM_Base_SetConfig+0x120>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00f      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <TIM_Base_SetConfig+0x124>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <TIM_Base_SetConfig+0x128>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <TIM_Base_SetConfig+0x12c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <TIM_Base_SetConfig+0x130>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d108      	bne.n	8006e20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a10      	ldr	r2, [pc, #64]	; (8006e88 <TIM_Base_SetConfig+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00f      	beq.n	8006e6c <TIM_Base_SetConfig+0xf8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a12      	ldr	r2, [pc, #72]	; (8006e98 <TIM_Base_SetConfig+0x124>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <TIM_Base_SetConfig+0xf8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a11      	ldr	r2, [pc, #68]	; (8006e9c <TIM_Base_SetConfig+0x128>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_Base_SetConfig+0xf8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a10      	ldr	r2, [pc, #64]	; (8006ea0 <TIM_Base_SetConfig+0x12c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_Base_SetConfig+0xf8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a0f      	ldr	r2, [pc, #60]	; (8006ea4 <TIM_Base_SetConfig+0x130>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d103      	bne.n	8006e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	615a      	str	r2, [r3, #20]
}
 8006e7a:	bf00      	nop
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40000400 	.word	0x40000400
 8006e90:	40000800 	.word	0x40000800
 8006e94:	40000c00 	.word	0x40000c00
 8006e98:	40010400 	.word	0x40010400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4b37      	ldr	r3, [pc, #220]	; (8006fb0 <TIM_OC1_SetConfig+0x108>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 0302 	bic.w	r3, r3, #2
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a2d      	ldr	r2, [pc, #180]	; (8006fb4 <TIM_OC1_SetConfig+0x10c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00f      	beq.n	8006f24 <TIM_OC1_SetConfig+0x7c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a2c      	ldr	r2, [pc, #176]	; (8006fb8 <TIM_OC1_SetConfig+0x110>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_OC1_SetConfig+0x7c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a2b      	ldr	r2, [pc, #172]	; (8006fbc <TIM_OC1_SetConfig+0x114>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_OC1_SetConfig+0x7c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <TIM_OC1_SetConfig+0x118>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC1_SetConfig+0x7c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <TIM_OC1_SetConfig+0x11c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10c      	bne.n	8006f3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0308 	bic.w	r3, r3, #8
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <TIM_OC1_SetConfig+0x10c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00f      	beq.n	8006f66 <TIM_OC1_SetConfig+0xbe>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1b      	ldr	r2, [pc, #108]	; (8006fb8 <TIM_OC1_SetConfig+0x110>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00b      	beq.n	8006f66 <TIM_OC1_SetConfig+0xbe>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1a      	ldr	r2, [pc, #104]	; (8006fbc <TIM_OC1_SetConfig+0x114>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_OC1_SetConfig+0xbe>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <TIM_OC1_SetConfig+0x118>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_OC1_SetConfig+0xbe>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <TIM_OC1_SetConfig+0x11c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d111      	bne.n	8006f8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	fffeff8f 	.word	0xfffeff8f
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40010400 	.word	0x40010400
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	40014800 	.word	0x40014800

08006fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0210 	bic.w	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4b34      	ldr	r3, [pc, #208]	; (80070c4 <TIM_OC2_SetConfig+0xfc>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <TIM_OC2_SetConfig+0x100>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC2_SetConfig+0x68>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a28      	ldr	r2, [pc, #160]	; (80070cc <TIM_OC2_SetConfig+0x104>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10d      	bne.n	800704c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <TIM_OC2_SetConfig+0x100>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00f      	beq.n	8007074 <TIM_OC2_SetConfig+0xac>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1d      	ldr	r2, [pc, #116]	; (80070cc <TIM_OC2_SetConfig+0x104>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00b      	beq.n	8007074 <TIM_OC2_SetConfig+0xac>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <TIM_OC2_SetConfig+0x108>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_OC2_SetConfig+0xac>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <TIM_OC2_SetConfig+0x10c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC2_SetConfig+0xac>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <TIM_OC2_SetConfig+0x110>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d113      	bne.n	800709c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800707a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	feff8fff 	.word	0xfeff8fff
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40010400 	.word	0x40010400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800

080070dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4b33      	ldr	r3, [pc, #204]	; (80071d4 <TIM_OC3_SetConfig+0xf8>)
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a28      	ldr	r2, [pc, #160]	; (80071d8 <TIM_OC3_SetConfig+0xfc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC3_SetConfig+0x66>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a27      	ldr	r2, [pc, #156]	; (80071dc <TIM_OC3_SetConfig+0x100>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10d      	bne.n	800715e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800715c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <TIM_OC3_SetConfig+0xfc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_OC3_SetConfig+0xaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <TIM_OC3_SetConfig+0x100>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_OC3_SetConfig+0xaa>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1b      	ldr	r2, [pc, #108]	; (80071e0 <TIM_OC3_SetConfig+0x104>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_OC3_SetConfig+0xaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <TIM_OC3_SetConfig+0x108>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_OC3_SetConfig+0xaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <TIM_OC3_SetConfig+0x10c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d113      	bne.n	80071ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800718c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	621a      	str	r2, [r3, #32]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	fffeff8f 	.word	0xfffeff8f
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800

080071ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <TIM_OC4_SetConfig+0xbc>)
 8007218:	4013      	ands	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	031b      	lsls	r3, r3, #12
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <TIM_OC4_SetConfig+0xc0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00f      	beq.n	800726c <TIM_OC4_SetConfig+0x80>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <TIM_OC4_SetConfig+0xc4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00b      	beq.n	800726c <TIM_OC4_SetConfig+0x80>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <TIM_OC4_SetConfig+0xc8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_OC4_SetConfig+0x80>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <TIM_OC4_SetConfig+0xcc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC4_SetConfig+0x80>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <TIM_OC4_SetConfig+0xd0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d109      	bne.n	8007280 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	019b      	lsls	r3, r3, #6
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	feff8fff 	.word	0xfeff8fff
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4b21      	ldr	r3, [pc, #132]	; (8007370 <TIM_OC5_SetConfig+0xb0>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <TIM_OC5_SetConfig+0xb4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_OC5_SetConfig+0x76>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a17      	ldr	r2, [pc, #92]	; (8007378 <TIM_OC5_SetConfig+0xb8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_OC5_SetConfig+0x76>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a16      	ldr	r2, [pc, #88]	; (800737c <TIM_OC5_SetConfig+0xbc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_OC5_SetConfig+0x76>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <TIM_OC5_SetConfig+0xc0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_OC5_SetConfig+0x76>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a14      	ldr	r2, [pc, #80]	; (8007384 <TIM_OC5_SetConfig+0xc4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d109      	bne.n	800734a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	621a      	str	r2, [r3, #32]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	fffeff8f 	.word	0xfffeff8f
 8007374:	40010000 	.word	0x40010000
 8007378:	40010400 	.word	0x40010400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4b22      	ldr	r3, [pc, #136]	; (800743c <TIM_OC6_SetConfig+0xb4>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	051b      	lsls	r3, r3, #20
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a19      	ldr	r2, [pc, #100]	; (8007440 <TIM_OC6_SetConfig+0xb8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00f      	beq.n	8007400 <TIM_OC6_SetConfig+0x78>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a18      	ldr	r2, [pc, #96]	; (8007444 <TIM_OC6_SetConfig+0xbc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00b      	beq.n	8007400 <TIM_OC6_SetConfig+0x78>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <TIM_OC6_SetConfig+0xc0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <TIM_OC6_SetConfig+0x78>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC6_SetConfig+0xc4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC6_SetConfig+0x78>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a15      	ldr	r2, [pc, #84]	; (8007450 <TIM_OC6_SetConfig+0xc8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d109      	bne.n	8007414 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	feff8fff 	.word	0xfeff8fff
 8007440:	40010000 	.word	0x40010000
 8007444:	40010400 	.word	0x40010400
 8007448:	40014000 	.word	0x40014000
 800744c:	40014400 	.word	0x40014400
 8007450:	40014800 	.word	0x40014800

08007454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e06d      	b.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a30      	ldr	r2, [pc, #192]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a2f      	ldr	r2, [pc, #188]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a20      	ldr	r2, [pc, #128]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d022      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074de:	d01d      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d018      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d013      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00e      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a16      	ldr	r2, [pc, #88]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a15      	ldr	r2, [pc, #84]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d10c      	bne.n	8007536 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	4313      	orrs	r3, r2
 800752c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40010000 	.word	0x40010000
 8007558:	40010400 	.word	0x40010400
 800755c:	40000400 	.word	0x40000400
 8007560:	40000800 	.word	0x40000800
 8007564:	40000c00 	.word	0x40000c00
 8007568:	40001800 	.word	0x40001800
 800756c:	40014000 	.word	0x40014000

08007570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007588:	2302      	movs	r3, #2
 800758a:	e065      	b.n	8007658 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d004      	beq.n	800761a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d115      	bne.n	8007646 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	051b      	lsls	r3, r3, #20
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40010000 	.word	0x40010000
 8007668:	40010400 	.word	0x40010400

0800766c <__errno>:
 800766c:	4b01      	ldr	r3, [pc, #4]	; (8007674 <__errno+0x8>)
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	240000a0 	.word	0x240000a0

08007678 <__libc_init_array>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4d0d      	ldr	r5, [pc, #52]	; (80076b0 <__libc_init_array+0x38>)
 800767c:	4c0d      	ldr	r4, [pc, #52]	; (80076b4 <__libc_init_array+0x3c>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	2600      	movs	r6, #0
 8007684:	42a6      	cmp	r6, r4
 8007686:	d109      	bne.n	800769c <__libc_init_array+0x24>
 8007688:	4d0b      	ldr	r5, [pc, #44]	; (80076b8 <__libc_init_array+0x40>)
 800768a:	4c0c      	ldr	r4, [pc, #48]	; (80076bc <__libc_init_array+0x44>)
 800768c:	f000 fc8e 	bl	8007fac <_init>
 8007690:	1b64      	subs	r4, r4, r5
 8007692:	10a4      	asrs	r4, r4, #2
 8007694:	2600      	movs	r6, #0
 8007696:	42a6      	cmp	r6, r4
 8007698:	d105      	bne.n	80076a6 <__libc_init_array+0x2e>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a0:	4798      	blx	r3
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7ee      	b.n	8007684 <__libc_init_array+0xc>
 80076a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076aa:	4798      	blx	r3
 80076ac:	3601      	adds	r6, #1
 80076ae:	e7f2      	b.n	8007696 <__libc_init_array+0x1e>
 80076b0:	08008aa0 	.word	0x08008aa0
 80076b4:	08008aa0 	.word	0x08008aa0
 80076b8:	08008aa0 	.word	0x08008aa0
 80076bc:	08008aa4 	.word	0x08008aa4

080076c0 <memset>:
 80076c0:	4402      	add	r2, r0
 80076c2:	4603      	mov	r3, r0
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d100      	bne.n	80076ca <memset+0xa>
 80076c8:	4770      	bx	lr
 80076ca:	f803 1b01 	strb.w	r1, [r3], #1
 80076ce:	e7f9      	b.n	80076c4 <memset+0x4>

080076d0 <siprintf>:
 80076d0:	b40e      	push	{r1, r2, r3}
 80076d2:	b500      	push	{lr}
 80076d4:	b09c      	sub	sp, #112	; 0x70
 80076d6:	ab1d      	add	r3, sp, #116	; 0x74
 80076d8:	9002      	str	r0, [sp, #8]
 80076da:	9006      	str	r0, [sp, #24]
 80076dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076e0:	4809      	ldr	r0, [pc, #36]	; (8007708 <siprintf+0x38>)
 80076e2:	9107      	str	r1, [sp, #28]
 80076e4:	9104      	str	r1, [sp, #16]
 80076e6:	4909      	ldr	r1, [pc, #36]	; (800770c <siprintf+0x3c>)
 80076e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ec:	9105      	str	r1, [sp, #20]
 80076ee:	6800      	ldr	r0, [r0, #0]
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	a902      	add	r1, sp, #8
 80076f4:	f000 f868 	bl	80077c8 <_svfiprintf_r>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	b01c      	add	sp, #112	; 0x70
 8007700:	f85d eb04 	ldr.w	lr, [sp], #4
 8007704:	b003      	add	sp, #12
 8007706:	4770      	bx	lr
 8007708:	240000a0 	.word	0x240000a0
 800770c:	ffff0208 	.word	0xffff0208

08007710 <__ssputs_r>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	688e      	ldr	r6, [r1, #8]
 8007716:	429e      	cmp	r6, r3
 8007718:	4682      	mov	sl, r0
 800771a:	460c      	mov	r4, r1
 800771c:	4690      	mov	r8, r2
 800771e:	461f      	mov	r7, r3
 8007720:	d838      	bhi.n	8007794 <__ssputs_r+0x84>
 8007722:	898a      	ldrh	r2, [r1, #12]
 8007724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007728:	d032      	beq.n	8007790 <__ssputs_r+0x80>
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	6909      	ldr	r1, [r1, #16]
 800772e:	eba5 0901 	sub.w	r9, r5, r1
 8007732:	6965      	ldr	r5, [r4, #20]
 8007734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007738:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800773c:	3301      	adds	r3, #1
 800773e:	444b      	add	r3, r9
 8007740:	106d      	asrs	r5, r5, #1
 8007742:	429d      	cmp	r5, r3
 8007744:	bf38      	it	cc
 8007746:	461d      	movcc	r5, r3
 8007748:	0553      	lsls	r3, r2, #21
 800774a:	d531      	bpl.n	80077b0 <__ssputs_r+0xa0>
 800774c:	4629      	mov	r1, r5
 800774e:	f000 fb63 	bl	8007e18 <_malloc_r>
 8007752:	4606      	mov	r6, r0
 8007754:	b950      	cbnz	r0, 800776c <__ssputs_r+0x5c>
 8007756:	230c      	movs	r3, #12
 8007758:	f8ca 3000 	str.w	r3, [sl]
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776c:	6921      	ldr	r1, [r4, #16]
 800776e:	464a      	mov	r2, r9
 8007770:	f000 fabe 	bl	8007cf0 <memcpy>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800777a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	6126      	str	r6, [r4, #16]
 8007782:	6165      	str	r5, [r4, #20]
 8007784:	444e      	add	r6, r9
 8007786:	eba5 0509 	sub.w	r5, r5, r9
 800778a:	6026      	str	r6, [r4, #0]
 800778c:	60a5      	str	r5, [r4, #8]
 800778e:	463e      	mov	r6, r7
 8007790:	42be      	cmp	r6, r7
 8007792:	d900      	bls.n	8007796 <__ssputs_r+0x86>
 8007794:	463e      	mov	r6, r7
 8007796:	6820      	ldr	r0, [r4, #0]
 8007798:	4632      	mov	r2, r6
 800779a:	4641      	mov	r1, r8
 800779c:	f000 fab6 	bl	8007d0c <memmove>
 80077a0:	68a3      	ldr	r3, [r4, #8]
 80077a2:	1b9b      	subs	r3, r3, r6
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	4433      	add	r3, r6
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	2000      	movs	r0, #0
 80077ae:	e7db      	b.n	8007768 <__ssputs_r+0x58>
 80077b0:	462a      	mov	r2, r5
 80077b2:	f000 fba5 	bl	8007f00 <_realloc_r>
 80077b6:	4606      	mov	r6, r0
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d1e1      	bne.n	8007780 <__ssputs_r+0x70>
 80077bc:	6921      	ldr	r1, [r4, #16]
 80077be:	4650      	mov	r0, sl
 80077c0:	f000 fabe 	bl	8007d40 <_free_r>
 80077c4:	e7c7      	b.n	8007756 <__ssputs_r+0x46>
	...

080077c8 <_svfiprintf_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4698      	mov	r8, r3
 80077ce:	898b      	ldrh	r3, [r1, #12]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	b09d      	sub	sp, #116	; 0x74
 80077d4:	4607      	mov	r7, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	d50e      	bpl.n	80077fa <_svfiprintf_r+0x32>
 80077dc:	690b      	ldr	r3, [r1, #16]
 80077de:	b963      	cbnz	r3, 80077fa <_svfiprintf_r+0x32>
 80077e0:	2140      	movs	r1, #64	; 0x40
 80077e2:	f000 fb19 	bl	8007e18 <_malloc_r>
 80077e6:	6028      	str	r0, [r5, #0]
 80077e8:	6128      	str	r0, [r5, #16]
 80077ea:	b920      	cbnz	r0, 80077f6 <_svfiprintf_r+0x2e>
 80077ec:	230c      	movs	r3, #12
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e0d1      	b.n	800799a <_svfiprintf_r+0x1d2>
 80077f6:	2340      	movs	r3, #64	; 0x40
 80077f8:	616b      	str	r3, [r5, #20]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
 80077fe:	2320      	movs	r3, #32
 8007800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007804:	f8cd 800c 	str.w	r8, [sp, #12]
 8007808:	2330      	movs	r3, #48	; 0x30
 800780a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079b4 <_svfiprintf_r+0x1ec>
 800780e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007812:	f04f 0901 	mov.w	r9, #1
 8007816:	4623      	mov	r3, r4
 8007818:	469a      	mov	sl, r3
 800781a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800781e:	b10a      	cbz	r2, 8007824 <_svfiprintf_r+0x5c>
 8007820:	2a25      	cmp	r2, #37	; 0x25
 8007822:	d1f9      	bne.n	8007818 <_svfiprintf_r+0x50>
 8007824:	ebba 0b04 	subs.w	fp, sl, r4
 8007828:	d00b      	beq.n	8007842 <_svfiprintf_r+0x7a>
 800782a:	465b      	mov	r3, fp
 800782c:	4622      	mov	r2, r4
 800782e:	4629      	mov	r1, r5
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff ff6d 	bl	8007710 <__ssputs_r>
 8007836:	3001      	adds	r0, #1
 8007838:	f000 80aa 	beq.w	8007990 <_svfiprintf_r+0x1c8>
 800783c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783e:	445a      	add	r2, fp
 8007840:	9209      	str	r2, [sp, #36]	; 0x24
 8007842:	f89a 3000 	ldrb.w	r3, [sl]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80a2 	beq.w	8007990 <_svfiprintf_r+0x1c8>
 800784c:	2300      	movs	r3, #0
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007856:	f10a 0a01 	add.w	sl, sl, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007862:	931a      	str	r3, [sp, #104]	; 0x68
 8007864:	4654      	mov	r4, sl
 8007866:	2205      	movs	r2, #5
 8007868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786c:	4851      	ldr	r0, [pc, #324]	; (80079b4 <_svfiprintf_r+0x1ec>)
 800786e:	f7f8 fd37 	bl	80002e0 <memchr>
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	b9d8      	cbnz	r0, 80078ae <_svfiprintf_r+0xe6>
 8007876:	06d0      	lsls	r0, r2, #27
 8007878:	bf44      	itt	mi
 800787a:	2320      	movmi	r3, #32
 800787c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007880:	0711      	lsls	r1, r2, #28
 8007882:	bf44      	itt	mi
 8007884:	232b      	movmi	r3, #43	; 0x2b
 8007886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788a:	f89a 3000 	ldrb.w	r3, [sl]
 800788e:	2b2a      	cmp	r3, #42	; 0x2a
 8007890:	d015      	beq.n	80078be <_svfiprintf_r+0xf6>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	4654      	mov	r4, sl
 8007896:	2000      	movs	r0, #0
 8007898:	f04f 0c0a 	mov.w	ip, #10
 800789c:	4621      	mov	r1, r4
 800789e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a2:	3b30      	subs	r3, #48	; 0x30
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d94e      	bls.n	8007946 <_svfiprintf_r+0x17e>
 80078a8:	b1b0      	cbz	r0, 80078d8 <_svfiprintf_r+0x110>
 80078aa:	9207      	str	r2, [sp, #28]
 80078ac:	e014      	b.n	80078d8 <_svfiprintf_r+0x110>
 80078ae:	eba0 0308 	sub.w	r3, r0, r8
 80078b2:	fa09 f303 	lsl.w	r3, r9, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	46a2      	mov	sl, r4
 80078bc:	e7d2      	b.n	8007864 <_svfiprintf_r+0x9c>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d19      	adds	r1, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9103      	str	r1, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfbb      	ittet	lt
 80078ca:	425b      	neglt	r3, r3
 80078cc:	f042 0202 	orrlt.w	r2, r2, #2
 80078d0:	9307      	strge	r3, [sp, #28]
 80078d2:	9307      	strlt	r3, [sp, #28]
 80078d4:	bfb8      	it	lt
 80078d6:	9204      	strlt	r2, [sp, #16]
 80078d8:	7823      	ldrb	r3, [r4, #0]
 80078da:	2b2e      	cmp	r3, #46	; 0x2e
 80078dc:	d10c      	bne.n	80078f8 <_svfiprintf_r+0x130>
 80078de:	7863      	ldrb	r3, [r4, #1]
 80078e0:	2b2a      	cmp	r3, #42	; 0x2a
 80078e2:	d135      	bne.n	8007950 <_svfiprintf_r+0x188>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	9203      	str	r2, [sp, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfb8      	it	lt
 80078f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80078f4:	3402      	adds	r4, #2
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079c4 <_svfiprintf_r+0x1fc>
 80078fc:	7821      	ldrb	r1, [r4, #0]
 80078fe:	2203      	movs	r2, #3
 8007900:	4650      	mov	r0, sl
 8007902:	f7f8 fced 	bl	80002e0 <memchr>
 8007906:	b140      	cbz	r0, 800791a <_svfiprintf_r+0x152>
 8007908:	2340      	movs	r3, #64	; 0x40
 800790a:	eba0 000a 	sub.w	r0, r0, sl
 800790e:	fa03 f000 	lsl.w	r0, r3, r0
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	4303      	orrs	r3, r0
 8007916:	3401      	adds	r4, #1
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791e:	4826      	ldr	r0, [pc, #152]	; (80079b8 <_svfiprintf_r+0x1f0>)
 8007920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007924:	2206      	movs	r2, #6
 8007926:	f7f8 fcdb 	bl	80002e0 <memchr>
 800792a:	2800      	cmp	r0, #0
 800792c:	d038      	beq.n	80079a0 <_svfiprintf_r+0x1d8>
 800792e:	4b23      	ldr	r3, [pc, #140]	; (80079bc <_svfiprintf_r+0x1f4>)
 8007930:	bb1b      	cbnz	r3, 800797a <_svfiprintf_r+0x1b2>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	3307      	adds	r3, #7
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	3308      	adds	r3, #8
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	4433      	add	r3, r6
 8007942:	9309      	str	r3, [sp, #36]	; 0x24
 8007944:	e767      	b.n	8007816 <_svfiprintf_r+0x4e>
 8007946:	fb0c 3202 	mla	r2, ip, r2, r3
 800794a:	460c      	mov	r4, r1
 800794c:	2001      	movs	r0, #1
 800794e:	e7a5      	b.n	800789c <_svfiprintf_r+0xd4>
 8007950:	2300      	movs	r3, #0
 8007952:	3401      	adds	r4, #1
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	4619      	mov	r1, r3
 8007958:	f04f 0c0a 	mov.w	ip, #10
 800795c:	4620      	mov	r0, r4
 800795e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007962:	3a30      	subs	r2, #48	; 0x30
 8007964:	2a09      	cmp	r2, #9
 8007966:	d903      	bls.n	8007970 <_svfiprintf_r+0x1a8>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0c5      	beq.n	80078f8 <_svfiprintf_r+0x130>
 800796c:	9105      	str	r1, [sp, #20]
 800796e:	e7c3      	b.n	80078f8 <_svfiprintf_r+0x130>
 8007970:	fb0c 2101 	mla	r1, ip, r1, r2
 8007974:	4604      	mov	r4, r0
 8007976:	2301      	movs	r3, #1
 8007978:	e7f0      	b.n	800795c <_svfiprintf_r+0x194>
 800797a:	ab03      	add	r3, sp, #12
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	462a      	mov	r2, r5
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <_svfiprintf_r+0x1f8>)
 8007982:	a904      	add	r1, sp, #16
 8007984:	4638      	mov	r0, r7
 8007986:	f3af 8000 	nop.w
 800798a:	1c42      	adds	r2, r0, #1
 800798c:	4606      	mov	r6, r0
 800798e:	d1d6      	bne.n	800793e <_svfiprintf_r+0x176>
 8007990:	89ab      	ldrh	r3, [r5, #12]
 8007992:	065b      	lsls	r3, r3, #25
 8007994:	f53f af2c 	bmi.w	80077f0 <_svfiprintf_r+0x28>
 8007998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799a:	b01d      	add	sp, #116	; 0x74
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	462a      	mov	r2, r5
 80079a6:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <_svfiprintf_r+0x1f8>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4638      	mov	r0, r7
 80079ac:	f000 f87a 	bl	8007aa4 <_printf_i>
 80079b0:	e7eb      	b.n	800798a <_svfiprintf_r+0x1c2>
 80079b2:	bf00      	nop
 80079b4:	08008a6c 	.word	0x08008a6c
 80079b8:	08008a76 	.word	0x08008a76
 80079bc:	00000000 	.word	0x00000000
 80079c0:	08007711 	.word	0x08007711
 80079c4:	08008a72 	.word	0x08008a72

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4616      	mov	r6, r2
 80079ce:	4699      	mov	r9, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bfb8      	it	lt
 80079dc:	4613      	movlt	r3, r2
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b10a      	cbz	r2, 80079ee <_printf_common+0x26>
 80079ea:	3301      	adds	r3, #1
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	0699      	lsls	r1, r3, #26
 80079f2:	bf42      	ittt	mi
 80079f4:	6833      	ldrmi	r3, [r6, #0]
 80079f6:	3302      	addmi	r3, #2
 80079f8:	6033      	strmi	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d106      	bne.n	8007a10 <_printf_common+0x48>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	6832      	ldr	r2, [r6, #0]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dc26      	bgt.n	8007a5e <_printf_common+0x96>
 8007a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a14:	1e13      	subs	r3, r2, #0
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	bf18      	it	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	0692      	lsls	r2, r2, #26
 8007a1e:	d42b      	bmi.n	8007a78 <_printf_common+0xb0>
 8007a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a24:	4649      	mov	r1, r9
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c0      	blx	r8
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d01e      	beq.n	8007a6c <_printf_common+0xa4>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	68e5      	ldr	r5, [r4, #12]
 8007a32:	6832      	ldr	r2, [r6, #0]
 8007a34:	f003 0306 	and.w	r3, r3, #6
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	bf08      	it	eq
 8007a3c:	1aad      	subeq	r5, r5, r2
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	6922      	ldr	r2, [r4, #16]
 8007a42:	bf0c      	ite	eq
 8007a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a48:	2500      	movne	r5, #0
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bfc4      	itt	gt
 8007a4e:	1a9b      	subgt	r3, r3, r2
 8007a50:	18ed      	addgt	r5, r5, r3
 8007a52:	2600      	movs	r6, #0
 8007a54:	341a      	adds	r4, #26
 8007a56:	42b5      	cmp	r5, r6
 8007a58:	d11a      	bne.n	8007a90 <_printf_common+0xc8>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e008      	b.n	8007a70 <_printf_common+0xa8>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4649      	mov	r1, r9
 8007a64:	4638      	mov	r0, r7
 8007a66:	47c0      	blx	r8
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_printf_common+0xac>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7c6      	b.n	8007a06 <_printf_common+0x3e>
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	2030      	movs	r0, #48	; 0x30
 8007a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a82:	4422      	add	r2, r4
 8007a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	e7c7      	b.n	8007a20 <_printf_common+0x58>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4622      	mov	r2, r4
 8007a94:	4649      	mov	r1, r9
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c0      	blx	r8
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0e6      	beq.n	8007a6c <_printf_common+0xa4>
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7d9      	b.n	8007a56 <_printf_common+0x8e>
	...

08007aa4 <_printf_i>:
 8007aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	7e0f      	ldrb	r7, [r1, #24]
 8007aaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aac:	2f78      	cmp	r7, #120	; 0x78
 8007aae:	4691      	mov	r9, r2
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aba:	d807      	bhi.n	8007acc <_printf_i+0x28>
 8007abc:	2f62      	cmp	r7, #98	; 0x62
 8007abe:	d80a      	bhi.n	8007ad6 <_printf_i+0x32>
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	f000 80d8 	beq.w	8007c76 <_printf_i+0x1d2>
 8007ac6:	2f58      	cmp	r7, #88	; 0x58
 8007ac8:	f000 80a3 	beq.w	8007c12 <_printf_i+0x16e>
 8007acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ad4:	e03a      	b.n	8007b4c <_printf_i+0xa8>
 8007ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ada:	2b15      	cmp	r3, #21
 8007adc:	d8f6      	bhi.n	8007acc <_printf_i+0x28>
 8007ade:	a101      	add	r1, pc, #4	; (adr r1, 8007ae4 <_printf_i+0x40>)
 8007ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007acd 	.word	0x08007acd
 8007af0:	08007acd 	.word	0x08007acd
 8007af4:	08007acd 	.word	0x08007acd
 8007af8:	08007acd 	.word	0x08007acd
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007acd 	.word	0x08007acd
 8007b04:	08007acd 	.word	0x08007acd
 8007b08:	08007acd 	.word	0x08007acd
 8007b0c:	08007acd 	.word	0x08007acd
 8007b10:	08007c5d 	.word	0x08007c5d
 8007b14:	08007b81 	.word	0x08007b81
 8007b18:	08007c3f 	.word	0x08007c3f
 8007b1c:	08007acd 	.word	0x08007acd
 8007b20:	08007acd 	.word	0x08007acd
 8007b24:	08007c7f 	.word	0x08007c7f
 8007b28:	08007acd 	.word	0x08007acd
 8007b2c:	08007b81 	.word	0x08007b81
 8007b30:	08007acd 	.word	0x08007acd
 8007b34:	08007acd 	.word	0x08007acd
 8007b38:	08007c47 	.word	0x08007c47
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	602a      	str	r2, [r5, #0]
 8007b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0a3      	b.n	8007c98 <_printf_i+0x1f4>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	6829      	ldr	r1, [r5, #0]
 8007b54:	0606      	lsls	r6, r0, #24
 8007b56:	f101 0304 	add.w	r3, r1, #4
 8007b5a:	d50a      	bpl.n	8007b72 <_printf_i+0xce>
 8007b5c:	680e      	ldr	r6, [r1, #0]
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	da03      	bge.n	8007b6c <_printf_i+0xc8>
 8007b64:	232d      	movs	r3, #45	; 0x2d
 8007b66:	4276      	negs	r6, r6
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6c:	485e      	ldr	r0, [pc, #376]	; (8007ce8 <_printf_i+0x244>)
 8007b6e:	230a      	movs	r3, #10
 8007b70:	e019      	b.n	8007ba6 <_printf_i+0x102>
 8007b72:	680e      	ldr	r6, [r1, #0]
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b7a:	bf18      	it	ne
 8007b7c:	b236      	sxthne	r6, r6
 8007b7e:	e7ef      	b.n	8007b60 <_printf_i+0xbc>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	6820      	ldr	r0, [r4, #0]
 8007b84:	1d19      	adds	r1, r3, #4
 8007b86:	6029      	str	r1, [r5, #0]
 8007b88:	0601      	lsls	r1, r0, #24
 8007b8a:	d501      	bpl.n	8007b90 <_printf_i+0xec>
 8007b8c:	681e      	ldr	r6, [r3, #0]
 8007b8e:	e002      	b.n	8007b96 <_printf_i+0xf2>
 8007b90:	0646      	lsls	r6, r0, #25
 8007b92:	d5fb      	bpl.n	8007b8c <_printf_i+0xe8>
 8007b94:	881e      	ldrh	r6, [r3, #0]
 8007b96:	4854      	ldr	r0, [pc, #336]	; (8007ce8 <_printf_i+0x244>)
 8007b98:	2f6f      	cmp	r7, #111	; 0x6f
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2308      	moveq	r3, #8
 8007b9e:	230a      	movne	r3, #10
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ba6:	6865      	ldr	r5, [r4, #4]
 8007ba8:	60a5      	str	r5, [r4, #8]
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	bfa2      	ittt	ge
 8007bae:	6821      	ldrge	r1, [r4, #0]
 8007bb0:	f021 0104 	bicge.w	r1, r1, #4
 8007bb4:	6021      	strge	r1, [r4, #0]
 8007bb6:	b90e      	cbnz	r6, 8007bbc <_printf_i+0x118>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	d04d      	beq.n	8007c58 <_printf_i+0x1b4>
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bc2:	fb03 6711 	mls	r7, r3, r1, r6
 8007bc6:	5dc7      	ldrb	r7, [r0, r7]
 8007bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bcc:	4637      	mov	r7, r6
 8007bce:	42bb      	cmp	r3, r7
 8007bd0:	460e      	mov	r6, r1
 8007bd2:	d9f4      	bls.n	8007bbe <_printf_i+0x11a>
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d10b      	bne.n	8007bf0 <_printf_i+0x14c>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	07de      	lsls	r6, r3, #31
 8007bdc:	d508      	bpl.n	8007bf0 <_printf_i+0x14c>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	6861      	ldr	r1, [r4, #4]
 8007be2:	4299      	cmp	r1, r3
 8007be4:	bfde      	ittt	le
 8007be6:	2330      	movle	r3, #48	; 0x30
 8007be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bf0:	1b52      	subs	r2, r2, r5
 8007bf2:	6122      	str	r2, [r4, #16]
 8007bf4:	f8cd a000 	str.w	sl, [sp]
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	aa03      	add	r2, sp, #12
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4640      	mov	r0, r8
 8007c00:	f7ff fee2 	bl	80079c8 <_printf_common>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d14c      	bne.n	8007ca2 <_printf_i+0x1fe>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b004      	add	sp, #16
 8007c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c12:	4835      	ldr	r0, [pc, #212]	; (8007ce8 <_printf_i+0x244>)
 8007c14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c18:	6829      	ldr	r1, [r5, #0]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c20:	6029      	str	r1, [r5, #0]
 8007c22:	061d      	lsls	r5, r3, #24
 8007c24:	d514      	bpl.n	8007c50 <_printf_i+0x1ac>
 8007c26:	07df      	lsls	r7, r3, #31
 8007c28:	bf44      	itt	mi
 8007c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c2e:	6023      	strmi	r3, [r4, #0]
 8007c30:	b91e      	cbnz	r6, 8007c3a <_printf_i+0x196>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f023 0320 	bic.w	r3, r3, #32
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	e7b0      	b.n	8007ba0 <_printf_i+0xfc>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	f043 0320 	orr.w	r3, r3, #32
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	2378      	movs	r3, #120	; 0x78
 8007c48:	4828      	ldr	r0, [pc, #160]	; (8007cec <_printf_i+0x248>)
 8007c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c4e:	e7e3      	b.n	8007c18 <_printf_i+0x174>
 8007c50:	0659      	lsls	r1, r3, #25
 8007c52:	bf48      	it	mi
 8007c54:	b2b6      	uxthmi	r6, r6
 8007c56:	e7e6      	b.n	8007c26 <_printf_i+0x182>
 8007c58:	4615      	mov	r5, r2
 8007c5a:	e7bb      	b.n	8007bd4 <_printf_i+0x130>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	6826      	ldr	r6, [r4, #0]
 8007c60:	6961      	ldr	r1, [r4, #20]
 8007c62:	1d18      	adds	r0, r3, #4
 8007c64:	6028      	str	r0, [r5, #0]
 8007c66:	0635      	lsls	r5, r6, #24
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	d501      	bpl.n	8007c70 <_printf_i+0x1cc>
 8007c6c:	6019      	str	r1, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <_printf_i+0x1d2>
 8007c70:	0670      	lsls	r0, r6, #25
 8007c72:	d5fb      	bpl.n	8007c6c <_printf_i+0x1c8>
 8007c74:	8019      	strh	r1, [r3, #0]
 8007c76:	2300      	movs	r3, #0
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	4615      	mov	r5, r2
 8007c7c:	e7ba      	b.n	8007bf4 <_printf_i+0x150>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	1d1a      	adds	r2, r3, #4
 8007c82:	602a      	str	r2, [r5, #0]
 8007c84:	681d      	ldr	r5, [r3, #0]
 8007c86:	6862      	ldr	r2, [r4, #4]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f7f8 fb28 	bl	80002e0 <memchr>
 8007c90:	b108      	cbz	r0, 8007c96 <_printf_i+0x1f2>
 8007c92:	1b40      	subs	r0, r0, r5
 8007c94:	6060      	str	r0, [r4, #4]
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	6123      	str	r3, [r4, #16]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca0:	e7a8      	b.n	8007bf4 <_printf_i+0x150>
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	47d0      	blx	sl
 8007cac:	3001      	adds	r0, #1
 8007cae:	d0ab      	beq.n	8007c08 <_printf_i+0x164>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	079b      	lsls	r3, r3, #30
 8007cb4:	d413      	bmi.n	8007cde <_printf_i+0x23a>
 8007cb6:	68e0      	ldr	r0, [r4, #12]
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	4298      	cmp	r0, r3
 8007cbc:	bfb8      	it	lt
 8007cbe:	4618      	movlt	r0, r3
 8007cc0:	e7a4      	b.n	8007c0c <_printf_i+0x168>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	4640      	mov	r0, r8
 8007cca:	47d0      	blx	sl
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d09b      	beq.n	8007c08 <_printf_i+0x164>
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	9903      	ldr	r1, [sp, #12]
 8007cd6:	1a5b      	subs	r3, r3, r1
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dcf2      	bgt.n	8007cc2 <_printf_i+0x21e>
 8007cdc:	e7eb      	b.n	8007cb6 <_printf_i+0x212>
 8007cde:	2500      	movs	r5, #0
 8007ce0:	f104 0619 	add.w	r6, r4, #25
 8007ce4:	e7f5      	b.n	8007cd2 <_printf_i+0x22e>
 8007ce6:	bf00      	nop
 8007ce8:	08008a7d 	.word	0x08008a7d
 8007cec:	08008a8e 	.word	0x08008a8e

08007cf0 <memcpy>:
 8007cf0:	440a      	add	r2, r1
 8007cf2:	4291      	cmp	r1, r2
 8007cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf8:	d100      	bne.n	8007cfc <memcpy+0xc>
 8007cfa:	4770      	bx	lr
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d06:	4291      	cmp	r1, r2
 8007d08:	d1f9      	bne.n	8007cfe <memcpy+0xe>
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <memmove>:
 8007d0c:	4288      	cmp	r0, r1
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	eb01 0402 	add.w	r4, r1, r2
 8007d14:	d902      	bls.n	8007d1c <memmove+0x10>
 8007d16:	4284      	cmp	r4, r0
 8007d18:	4623      	mov	r3, r4
 8007d1a:	d807      	bhi.n	8007d2c <memmove+0x20>
 8007d1c:	1e43      	subs	r3, r0, #1
 8007d1e:	42a1      	cmp	r1, r4
 8007d20:	d008      	beq.n	8007d34 <memmove+0x28>
 8007d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d2a:	e7f8      	b.n	8007d1e <memmove+0x12>
 8007d2c:	4402      	add	r2, r0
 8007d2e:	4601      	mov	r1, r0
 8007d30:	428a      	cmp	r2, r1
 8007d32:	d100      	bne.n	8007d36 <memmove+0x2a>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d3e:	e7f7      	b.n	8007d30 <memmove+0x24>

08007d40 <_free_r>:
 8007d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d42:	2900      	cmp	r1, #0
 8007d44:	d044      	beq.n	8007dd0 <_free_r+0x90>
 8007d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4a:	9001      	str	r0, [sp, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d52:	bfb8      	it	lt
 8007d54:	18e4      	addlt	r4, r4, r3
 8007d56:	f000 f913 	bl	8007f80 <__malloc_lock>
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	; (8007dd4 <_free_r+0x94>)
 8007d5c:	9801      	ldr	r0, [sp, #4]
 8007d5e:	6813      	ldr	r3, [r2, #0]
 8007d60:	b933      	cbnz	r3, 8007d70 <_free_r+0x30>
 8007d62:	6063      	str	r3, [r4, #4]
 8007d64:	6014      	str	r4, [r2, #0]
 8007d66:	b003      	add	sp, #12
 8007d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d6c:	f000 b90e 	b.w	8007f8c <__malloc_unlock>
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	d908      	bls.n	8007d86 <_free_r+0x46>
 8007d74:	6825      	ldr	r5, [r4, #0]
 8007d76:	1961      	adds	r1, r4, r5
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf01      	itttt	eq
 8007d7c:	6819      	ldreq	r1, [r3, #0]
 8007d7e:	685b      	ldreq	r3, [r3, #4]
 8007d80:	1949      	addeq	r1, r1, r5
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	e7ed      	b.n	8007d62 <_free_r+0x22>
 8007d86:	461a      	mov	r2, r3
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	b10b      	cbz	r3, 8007d90 <_free_r+0x50>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d9fa      	bls.n	8007d86 <_free_r+0x46>
 8007d90:	6811      	ldr	r1, [r2, #0]
 8007d92:	1855      	adds	r5, r2, r1
 8007d94:	42a5      	cmp	r5, r4
 8007d96:	d10b      	bne.n	8007db0 <_free_r+0x70>
 8007d98:	6824      	ldr	r4, [r4, #0]
 8007d9a:	4421      	add	r1, r4
 8007d9c:	1854      	adds	r4, r2, r1
 8007d9e:	42a3      	cmp	r3, r4
 8007da0:	6011      	str	r1, [r2, #0]
 8007da2:	d1e0      	bne.n	8007d66 <_free_r+0x26>
 8007da4:	681c      	ldr	r4, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	6053      	str	r3, [r2, #4]
 8007daa:	4421      	add	r1, r4
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	e7da      	b.n	8007d66 <_free_r+0x26>
 8007db0:	d902      	bls.n	8007db8 <_free_r+0x78>
 8007db2:	230c      	movs	r3, #12
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	e7d6      	b.n	8007d66 <_free_r+0x26>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf04      	itt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	bf04      	itt	eq
 8007dc8:	1949      	addeq	r1, r1, r5
 8007dca:	6021      	streq	r1, [r4, #0]
 8007dcc:	6054      	str	r4, [r2, #4]
 8007dce:	e7ca      	b.n	8007d66 <_free_r+0x26>
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bd30      	pop	{r4, r5, pc}
 8007dd4:	24000770 	.word	0x24000770

08007dd8 <sbrk_aligned>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	4e0e      	ldr	r6, [pc, #56]	; (8007e14 <sbrk_aligned+0x3c>)
 8007ddc:	460c      	mov	r4, r1
 8007dde:	6831      	ldr	r1, [r6, #0]
 8007de0:	4605      	mov	r5, r0
 8007de2:	b911      	cbnz	r1, 8007dea <sbrk_aligned+0x12>
 8007de4:	f000 f8bc 	bl	8007f60 <_sbrk_r>
 8007de8:	6030      	str	r0, [r6, #0]
 8007dea:	4621      	mov	r1, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f8b7 	bl	8007f60 <_sbrk_r>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	d00a      	beq.n	8007e0c <sbrk_aligned+0x34>
 8007df6:	1cc4      	adds	r4, r0, #3
 8007df8:	f024 0403 	bic.w	r4, r4, #3
 8007dfc:	42a0      	cmp	r0, r4
 8007dfe:	d007      	beq.n	8007e10 <sbrk_aligned+0x38>
 8007e00:	1a21      	subs	r1, r4, r0
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f8ac 	bl	8007f60 <_sbrk_r>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d101      	bne.n	8007e10 <sbrk_aligned+0x38>
 8007e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e10:	4620      	mov	r0, r4
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	24000774 	.word	0x24000774

08007e18 <_malloc_r>:
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	1ccd      	adds	r5, r1, #3
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	db01      	blt.n	8007e34 <_malloc_r+0x1c>
 8007e30:	42a9      	cmp	r1, r5
 8007e32:	d905      	bls.n	8007e40 <_malloc_r+0x28>
 8007e34:	230c      	movs	r3, #12
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	2600      	movs	r6, #0
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e40:	4e2e      	ldr	r6, [pc, #184]	; (8007efc <_malloc_r+0xe4>)
 8007e42:	f000 f89d 	bl	8007f80 <__malloc_lock>
 8007e46:	6833      	ldr	r3, [r6, #0]
 8007e48:	461c      	mov	r4, r3
 8007e4a:	bb34      	cbnz	r4, 8007e9a <_malloc_r+0x82>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f7ff ffc2 	bl	8007dd8 <sbrk_aligned>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	4604      	mov	r4, r0
 8007e58:	d14d      	bne.n	8007ef6 <_malloc_r+0xde>
 8007e5a:	6834      	ldr	r4, [r6, #0]
 8007e5c:	4626      	mov	r6, r4
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d140      	bne.n	8007ee4 <_malloc_r+0xcc>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	4631      	mov	r1, r6
 8007e66:	4638      	mov	r0, r7
 8007e68:	eb04 0803 	add.w	r8, r4, r3
 8007e6c:	f000 f878 	bl	8007f60 <_sbrk_r>
 8007e70:	4580      	cmp	r8, r0
 8007e72:	d13a      	bne.n	8007eea <_malloc_r+0xd2>
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	3503      	adds	r5, #3
 8007e78:	1a6d      	subs	r5, r5, r1
 8007e7a:	f025 0503 	bic.w	r5, r5, #3
 8007e7e:	3508      	adds	r5, #8
 8007e80:	2d0c      	cmp	r5, #12
 8007e82:	bf38      	it	cc
 8007e84:	250c      	movcc	r5, #12
 8007e86:	4629      	mov	r1, r5
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ffa5 	bl	8007dd8 <sbrk_aligned>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d02b      	beq.n	8007eea <_malloc_r+0xd2>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	442b      	add	r3, r5
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	e00e      	b.n	8007eb8 <_malloc_r+0xa0>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	1b52      	subs	r2, r2, r5
 8007e9e:	d41e      	bmi.n	8007ede <_malloc_r+0xc6>
 8007ea0:	2a0b      	cmp	r2, #11
 8007ea2:	d916      	bls.n	8007ed2 <_malloc_r+0xba>
 8007ea4:	1961      	adds	r1, r4, r5
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	6025      	str	r5, [r4, #0]
 8007eaa:	bf18      	it	ne
 8007eac:	6059      	strne	r1, [r3, #4]
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	bf08      	it	eq
 8007eb2:	6031      	streq	r1, [r6, #0]
 8007eb4:	5162      	str	r2, [r4, r5]
 8007eb6:	604b      	str	r3, [r1, #4]
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f104 060b 	add.w	r6, r4, #11
 8007ebe:	f000 f865 	bl	8007f8c <__malloc_unlock>
 8007ec2:	f026 0607 	bic.w	r6, r6, #7
 8007ec6:	1d23      	adds	r3, r4, #4
 8007ec8:	1af2      	subs	r2, r6, r3
 8007eca:	d0b6      	beq.n	8007e3a <_malloc_r+0x22>
 8007ecc:	1b9b      	subs	r3, r3, r6
 8007ece:	50a3      	str	r3, [r4, r2]
 8007ed0:	e7b3      	b.n	8007e3a <_malloc_r+0x22>
 8007ed2:	6862      	ldr	r2, [r4, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	bf0c      	ite	eq
 8007ed8:	6032      	streq	r2, [r6, #0]
 8007eda:	605a      	strne	r2, [r3, #4]
 8007edc:	e7ec      	b.n	8007eb8 <_malloc_r+0xa0>
 8007ede:	4623      	mov	r3, r4
 8007ee0:	6864      	ldr	r4, [r4, #4]
 8007ee2:	e7b2      	b.n	8007e4a <_malloc_r+0x32>
 8007ee4:	4634      	mov	r4, r6
 8007ee6:	6876      	ldr	r6, [r6, #4]
 8007ee8:	e7b9      	b.n	8007e5e <_malloc_r+0x46>
 8007eea:	230c      	movs	r3, #12
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f000 f84c 	bl	8007f8c <__malloc_unlock>
 8007ef4:	e7a1      	b.n	8007e3a <_malloc_r+0x22>
 8007ef6:	6025      	str	r5, [r4, #0]
 8007ef8:	e7de      	b.n	8007eb8 <_malloc_r+0xa0>
 8007efa:	bf00      	nop
 8007efc:	24000770 	.word	0x24000770

08007f00 <_realloc_r>:
 8007f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	4680      	mov	r8, r0
 8007f06:	4614      	mov	r4, r2
 8007f08:	460e      	mov	r6, r1
 8007f0a:	b921      	cbnz	r1, 8007f16 <_realloc_r+0x16>
 8007f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	4611      	mov	r1, r2
 8007f12:	f7ff bf81 	b.w	8007e18 <_malloc_r>
 8007f16:	b92a      	cbnz	r2, 8007f24 <_realloc_r+0x24>
 8007f18:	f7ff ff12 	bl	8007d40 <_free_r>
 8007f1c:	4625      	mov	r5, r4
 8007f1e:	4628      	mov	r0, r5
 8007f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f24:	f000 f838 	bl	8007f98 <_malloc_usable_size_r>
 8007f28:	4284      	cmp	r4, r0
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	d802      	bhi.n	8007f34 <_realloc_r+0x34>
 8007f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f32:	d812      	bhi.n	8007f5a <_realloc_r+0x5a>
 8007f34:	4621      	mov	r1, r4
 8007f36:	4640      	mov	r0, r8
 8007f38:	f7ff ff6e 	bl	8007e18 <_malloc_r>
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d0ed      	beq.n	8007f1e <_realloc_r+0x1e>
 8007f42:	42bc      	cmp	r4, r7
 8007f44:	4622      	mov	r2, r4
 8007f46:	4631      	mov	r1, r6
 8007f48:	bf28      	it	cs
 8007f4a:	463a      	movcs	r2, r7
 8007f4c:	f7ff fed0 	bl	8007cf0 <memcpy>
 8007f50:	4631      	mov	r1, r6
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7ff fef4 	bl	8007d40 <_free_r>
 8007f58:	e7e1      	b.n	8007f1e <_realloc_r+0x1e>
 8007f5a:	4635      	mov	r5, r6
 8007f5c:	e7df      	b.n	8007f1e <_realloc_r+0x1e>
	...

08007f60 <_sbrk_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_sbrk_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f8 fcc2 	bl	80008f4 <_sbrk>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_sbrk_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_sbrk_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	24000778 	.word	0x24000778

08007f80 <__malloc_lock>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__malloc_lock+0x8>)
 8007f82:	f000 b811 	b.w	8007fa8 <__retarget_lock_acquire_recursive>
 8007f86:	bf00      	nop
 8007f88:	2400077c 	.word	0x2400077c

08007f8c <__malloc_unlock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__malloc_unlock+0x8>)
 8007f8e:	f000 b80c 	b.w	8007faa <__retarget_lock_release_recursive>
 8007f92:	bf00      	nop
 8007f94:	2400077c 	.word	0x2400077c

08007f98 <_malloc_usable_size_r>:
 8007f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f9c:	1f18      	subs	r0, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bfbc      	itt	lt
 8007fa2:	580b      	ldrlt	r3, [r1, r0]
 8007fa4:	18c0      	addlt	r0, r0, r3
 8007fa6:	4770      	bx	lr

08007fa8 <__retarget_lock_acquire_recursive>:
 8007fa8:	4770      	bx	lr

08007faa <__retarget_lock_release_recursive>:
 8007faa:	4770      	bx	lr

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
