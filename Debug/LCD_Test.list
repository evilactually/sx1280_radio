
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f24  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ef0c  0800ef0c  0001ef0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ef10  0800ef10  0001ef10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  24000000  0800ef14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000067c  24000104  0800f018  00020104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000780  0800f018  00020780  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015f3c  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d9c  00000000  00000000  0003606e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011e0  00000000  00000000  00038e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001050  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000393f0  00000000  00000000  0003b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000176fa  00000000  00000000  00074430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001699dc  00000000  00000000  0008bb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f5506  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004cf8  00000000  00000000  001f5558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000104 	.word	0x24000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007fd0 	.word	0x08007fd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000108 	.word	0x24000108
 80002dc:	08007fd0 	.word	0x08007fd0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <MX_GPIO_Init+0x100>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a38      	ldr	r2, [pc, #224]	; (8000480 <MX_GPIO_Init+0x100>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <MX_GPIO_Init+0x100>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_GPIO_Init+0x100>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a31      	ldr	r2, [pc, #196]	; (8000480 <MX_GPIO_Init+0x100>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_GPIO_Init+0x100>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_GPIO_Init+0x100>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a29      	ldr	r2, [pc, #164]	; (8000480 <MX_GPIO_Init+0x100>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <MX_GPIO_Init+0x100>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0x100>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	481c      	ldr	r0, [pc, #112]	; (8000484 <MX_GPIO_Init+0x104>)
 8000414:	f003 f802 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <MX_GPIO_Init+0x104>)
 8000420:	f002 fffc 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E3_Pin;
 8000424:	2308      	movs	r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0x104>)
 800043c:	f002 fe26 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_GPIO_Init+0x108>)
 8000456:	f002 fe19 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800045a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x104>)
 8000474:	f002 fe0a 	bl	800308c <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58024400 	.word	0x58024400
 8000484:	58021000 	.word	0x58021000
 8000488:	58020800 	.word	0x58020800

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f002 fc48 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f80c 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f7ff ff72 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 800049c:	f000 f898 	bl	80005d0 <MX_RTC_Init>
  MX_SPI4_Init();
 80004a0:	f000 f924 	bl	80006ec <MX_SPI4_Init>
  MX_TIM1_Init();
 80004a4:	f000 fae4 	bl	8000a70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  LCD_Test();
 80004a8:	f000 fbfa 	bl	8000ca0 <LCD_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x20>
	...

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09c      	sub	sp, #112	; 0x70
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	224c      	movs	r2, #76	; 0x4c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 f910 	bl	80076e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2220      	movs	r2, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 f90a 	bl	80076e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f002 ffcd 	bl	8003470 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <SystemClock_Config+0x108>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <SystemClock_Config+0x108>)
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <SystemClock_Config+0x108>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <SystemClock_Config+0x10c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f8:	4a30      	ldr	r2, [pc, #192]	; (80005bc <SystemClock_Config+0x10c>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <SystemClock_Config+0x10c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050c:	bf00      	nop
 800050e:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <SystemClock_Config+0x10c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800051a:	d1f8      	bne.n	800050e <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800051c:	f002 ff98 	bl	8003450 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000520:	f002 fcb6 	bl	8002e90 <HAL_GetREVID>
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <SystemClock_Config+0x110>)
 8000526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000528:	4a25      	ldr	r2, [pc, #148]	; (80005c0 <SystemClock_Config+0x110>)
 800052a:	f023 0318 	bic.w	r3, r3, #24
 800052e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000530:	2305      	movs	r3, #5
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	2302      	movs	r3, #2
 8000544:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800054a:	230c      	movs	r3, #12
 800054c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800055a:	230c      	movs	r3, #12
 800055c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800055e:	2302      	movs	r3, #2
 8000560:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4618      	mov	r0, r3
 800056c:	f002 ffba 	bl	80034e4 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000576:	f000 f825 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	233f      	movs	r3, #63	; 0x3f
 800057c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fbf9 	bl	8003d98 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80005ac:	f000 f80a 	bl	80005c4 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3770      	adds	r7, #112	; 0x70
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800
 80005c0:	58024400 	.word	0x58024400

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_RTC_Init+0xb0>)
 80005ea:	4a26      	ldr	r2, [pc, #152]	; (8000684 <MX_RTC_Init+0xb4>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <MX_RTC_Init+0xb0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_RTC_Init+0xb0>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_RTC_Init+0xb0>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_RTC_Init+0xb0>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_RTC_Init+0xb0>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_RTC_Init+0xb0>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_RTC_Init+0xb0>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000618:	4819      	ldr	r0, [pc, #100]	; (8000680 <MX_RTC_Init+0xb0>)
 800061a:	f005 fa5b 	bl	8005ad4 <HAL_RTC_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000624:	f7ff ffce 	bl	80005c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000628:	2312      	movs	r3, #18
 800062a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800062c:	2300      	movs	r3, #0
 800062e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000630:	2300      	movs	r3, #0
 8000632:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <MX_RTC_Init+0xb0>)
 8000644:	f005 fac8 	bl	8005bd8 <HAL_RTC_SetTime>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800064e:	f7ff ffb9 	bl	80005c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000652:	2301      	movs	r3, #1
 8000654:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000656:	2306      	movs	r3, #6
 8000658:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800065a:	2301      	movs	r3, #1
 800065c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800065e:	2320      	movs	r3, #32
 8000660:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_RTC_Init+0xb0>)
 800066a:	f005 fb53 	bl	8005d14 <HAL_RTC_SetDate>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000674:	f7ff ffa6 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	24000120 	.word	0x24000120
 8000684:	58004000 	.word	0x58004000

08000688 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b2      	sub	sp, #200	; 0xc8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	22c0      	movs	r2, #192	; 0xc0
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f007 f823 	bl	80076e4 <memset>
  if(rtcHandle->Instance==RTC)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_RTC_MspInit+0x5c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d119      	bne.n	80006dc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fe99 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80006cc:	f7ff ff7a 	bl	80005c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_RTC_MspInit+0x60>)
 80006d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_RTC_MspInit+0x60>)
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	37c8      	adds	r7, #200	; 0xc8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58004000 	.word	0x58004000
 80006e8:	58024400 	.word	0x58024400

080006ec <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_SPI4_Init+0xa8>)
 80006f2:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_SPI4_Init+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_SPI4_Init+0xa8>)
 80006f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000700:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000704:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000708:	2207      	movs	r2, #7
 800070a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_SPI4_Init+0xa8>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_SPI4_Init+0xa8>)
 800071a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800071e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000722:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000726:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_SPI4_Init+0xa8>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI4_Init+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI4_Init+0xa8>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI4_Init+0xa8>)
 800075c:	2200      	movs	r2, #0
 800075e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000762:	2200      	movs	r2, #0
 8000764:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000768:	2200      	movs	r2, #0
 800076a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI4_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI4_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_SPI4_Init+0xa8>)
 8000780:	f005 fc06 	bl	8005f90 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800078a:	f7ff ff1b 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000144 	.word	0x24000144
 8000798:	40013400 	.word	0x40013400

0800079c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0ba      	sub	sp, #232	; 0xe8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	22c0      	movs	r2, #192	; 0xc0
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 ff91 	bl	80076e4 <memset>
  if(spiHandle->Instance==SPI4)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <HAL_SPI_MspInit+0xc4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d145      	bne.n	8000858 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80007cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007d8:	2300      	movs	r3, #0
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fe09 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80007ec:	f7ff feea 	bl	80005c4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 80007f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 80007f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_SPI_MspInit+0xc8>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800082c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2302      	movs	r3, #2
 8000842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000846:	2305      	movs	r3, #5
 8000848:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_SPI_MspInit+0xcc>)
 8000854:	f002 fc1a 	bl	800308c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	37e8      	adds	r7, #232	; 0xe8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013400 	.word	0x40013400
 8000864:	58024400 	.word	0x58024400
 8000868:	58021000 	.word	0x58021000

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x30>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x30>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x30>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	58024400 	.word	0x58024400

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f002 fa8c 	bl	8002e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f006 feb4 	bl	8007690 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24080000 	.word	0x24080000
 8000954:	00000400 	.word	0x00000400
 8000958:	240001cc 	.word	0x240001cc
 800095c:	24000780 	.word	0x24000780

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <SystemInit+0xe4>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <SystemInit+0xe4>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0xe8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	2b06      	cmp	r3, #6
 800097e:	d807      	bhi.n	8000990 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <SystemInit+0xe8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 030f 	bic.w	r3, r3, #15
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <SystemInit+0xe8>)
 800098a:	f043 0307 	orr.w	r3, r3, #7
 800098e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0xec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <SystemInit+0xec>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemInit+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <SystemInit+0xec>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4929      	ldr	r1, [pc, #164]	; (8000a4c <SystemInit+0xec>)
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemInit+0xf0>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <SystemInit+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 030f 	bic.w	r3, r3, #15
 80009c2:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SystemInit+0xe8>)
 80009c4:	f043 0307 	orr.w	r3, r3, #7
 80009c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0xec>)
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <SystemInit+0xf4>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0xec>)
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <SystemInit+0xf8>)
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0xec>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0xfc>)
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0xec>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0xfc>)
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0xec>)
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <SystemInit+0xfc>)
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SystemInit+0xec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0xec>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <SystemInit+0xec>)
 8000a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SystemInit+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <SystemInit+0x100>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SystemInit+0x104>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0x108>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SystemInit+0x10c>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	5c001000 	.word	0x5c001000
 8000a64:	ffff0000 	.word	0xffff0000
 8000a68:	51008108 	.word	0x51008108
 8000a6c:	52004000 	.word	0x52004000

08000a70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	222c      	movs	r2, #44	; 0x2c
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f006 fe21 	bl	80076e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa2:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aa4:	4a39      	ldr	r2, [pc, #228]	; (8000b8c <MX_TIM1_Init+0x11c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aaa:	220b      	movs	r2, #11
 8000aac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ace:	482e      	ldr	r0, [pc, #184]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000ad0:	f005 fff7 	bl	8006ac2 <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f7ff fd73 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000af2:	f006 fcc1 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000afc:	f7ff fd62 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b26:	f006 f823 	bl	8006b70 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b30:	f7ff fd48 	bl	80005c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b6a:	f006 fd13 	bl	8007594 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b74:	f7ff fd26 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x118>)
 8000b7a:	f000 f82b 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	; 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240001d0 	.word	0x240001d0
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_TIM_MspPostInit+0x6c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11f      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_TIM_MspPostInit+0x74>)
 8000c32:	f002 fa2b 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58021000 	.word	0x58021000

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c50:	f7ff fe86 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f006 fd0f 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc05 	bl	800048c <main>
  bx  lr
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c8c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000c90:	0800ef14 	.word	0x0800ef14
  ldr r2, =_sbss
 8000c94:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000c98:	24000780 	.word	0x24000780

08000c9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC3_IRQHandler>
	...

08000ca0 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
	uint8_t text[20];

	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000ca6:	4b7d      	ldr	r3, [pc, #500]	; (8000e9c <LCD_Test+0x1fc>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000cac:	4b7b      	ldr	r3, [pc, #492]	; (8000e9c <LCD_Test+0x1fc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8000cb2:	4b7a      	ldr	r3, [pc, #488]	; (8000e9c <LCD_Test+0x1fc>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	735a      	strb	r2, [r3, #13]
	#else
	//error "Unknown Screen"

	#endif

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000cb8:	4979      	ldr	r1, [pc, #484]	; (8000ea0 <LCD_Test+0x200>)
 8000cba:	487a      	ldr	r0, [pc, #488]	; (8000ea4 <LCD_Test+0x204>)
 8000cbc:	f000 fcfa 	bl	80016b4 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000cc0:	4b79      	ldr	r3, [pc, #484]	; (8000ea8 <LCD_Test+0x208>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a75      	ldr	r2, [pc, #468]	; (8000e9c <LCD_Test+0x1fc>)
 8000cc6:	2105      	movs	r1, #5
 8000cc8:	4876      	ldr	r0, [pc, #472]	; (8000ea4 <LCD_Test+0x204>)
 8000cca:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8000ccc:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <LCD_Test+0x208>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4976      	ldr	r1, [pc, #472]	; (8000eac <LCD_Test+0x20c>)
 8000cd2:	4874      	ldr	r0, [pc, #464]	; (8000ea4 <LCD_Test+0x204>)
 8000cd4:	4798      	blx	r3

	LCD_SetBrightness(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f8fa 	bl	8000ed0 <LCD_SetBrightness>

	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8000cdc:	4b72      	ldr	r3, [pc, #456]	; (8000ea8 <LCD_Test+0x208>)
 8000cde:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000ce0:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <LCD_Test+0x210>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	486f      	ldr	r0, [pc, #444]	; (8000ea4 <LCD_Test+0x204>)
 8000ce8:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);
	#endif

  uint32_t tick = get_tick();
 8000cea:	f002 f8a1 	bl	8002e30 <HAL_GetTick>
 8000cee:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000cf0:	e06a      	b.n	8000dc8 <LCD_Test+0x128>
	{
		delay_ms(10);
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f002 f8a8 	bl	8002e48 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8000cf8:	f002 f89a 	bl	8002e30 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d06:	d80f      	bhi.n	8000d28 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000d08:	f002 f892 	bl	8002e30 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2264      	movs	r2, #100	; 0x64
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	4a66      	ldr	r2, [pc, #408]	; (8000eb4 <LCD_Test+0x214>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f8d5 	bl	8000ed0 <LCD_SetBrightness>
 8000d26:	e04f      	b.n	8000dc8 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8000d28:	f002 f882 	bl	8002e30 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d83d      	bhi.n	8000db6 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000d3a:	f002 f879 	bl	8002e30 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d48:	4a5b      	ldr	r2, [pc, #364]	; (8000eb8 <LCD_Test+0x218>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	463b      	mov	r3, r7
 8000d52:	495a      	ldr	r1, [pc, #360]	; (8000ebc <LCD_Test+0x21c>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 fccd 	bl	80076f4 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000d5a:	4b50      	ldr	r3, [pc, #320]	; (8000e9c <LCD_Test+0x1fc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3b1e      	subs	r3, #30
 8000d62:	b298      	uxth	r0, r3
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <LCD_Test+0x1fc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	2310      	movs	r3, #16
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2310      	movs	r3, #16
 8000d74:	2101      	movs	r1, #1
 8000d76:	f000 fb55 	bl	8001424 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <LCD_Test+0x208>)
 8000d7c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000d7e:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <LCD_Test+0x1fc>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	1edd      	subs	r5, r3, #3
 8000d84:	f002 f854 	bl	8002e30 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d92:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <LCD_Test+0x1fc>)
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <LCD_Test+0x214>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	09db      	lsrs	r3, r3, #7
 8000da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	462a      	mov	r2, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	483c      	ldr	r0, [pc, #240]	; (8000ea4 <LCD_Test+0x204>)
 8000db2:	47a0      	blx	r4
 8000db4:	e008      	b.n	8000dc8 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8000db6:	f002 f83b 	bl	8002e30 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d808      	bhi.n	8000dda <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	483c      	ldr	r0, [pc, #240]	; (8000ec0 <LCD_Test+0x220>)
 8000dce:	f002 fb0d 	bl	80033ec <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d18c      	bne.n	8000cf2 <LCD_Test+0x52>
 8000dd8:	e004      	b.n	8000de4 <LCD_Test+0x144>
			break;
 8000dda:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000ddc:	e002      	b.n	8000de4 <LCD_Test+0x144>
	{
		delay_ms(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f002 f832 	bl	8002e48 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	4835      	ldr	r0, [pc, #212]	; (8000ec0 <LCD_Test+0x220>)
 8000dea:	f002 faff 	bl	80033ec <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d0f4      	beq.n	8000dde <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 8000df4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f88b 	bl	8000f14 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <LCD_Test+0x208>)
 8000e00:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <LCD_Test+0x1fc>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <LCD_Test+0x1fc>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	9101      	str	r1, [sp, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <LCD_Test+0x204>)
 8000e18:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4929      	ldr	r1, [pc, #164]	; (8000ec4 <LCD_Test+0x224>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f006 fc68 	bl	80076f4 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <LCD_Test+0x1fc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	2310      	movs	r3, #16
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2310      	movs	r3, #16
 8000e34:	2104      	movs	r1, #4
 8000e36:	2004      	movs	r0, #4
 8000e38:	f000 faf4 	bl	8001424 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000e3c:	f002 f834 	bl	8002ea8 <HAL_GetDEVID>
 8000e40:	4602      	mov	r2, r0
 8000e42:	463b      	mov	r3, r7
 8000e44:	4920      	ldr	r1, [pc, #128]	; (8000ec8 <LCD_Test+0x228>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 fc54 	bl	80076f4 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <LCD_Test+0x1fc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	463b      	mov	r3, r7
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	2310      	movs	r3, #16
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	2116      	movs	r1, #22
 8000e5e:	2004      	movs	r0, #4
 8000e60:	f000 fae0 	bl	8001424 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <LCD_Test+0x20c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4918      	ldr	r1, [pc, #96]	; (8000ecc <LCD_Test+0x22c>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 fc41 	bl	80076f4 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <LCD_Test+0x1fc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	463b      	mov	r3, r7
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2310      	movs	r3, #16
 8000e82:	2128      	movs	r1, #40	; 0x28
 8000e84:	2004      	movs	r0, #4
 8000e86:	f000 facd 	bl	8001424 <LCD_ShowString>

	LCD_Light(100, 200);
 8000e8a:	21c8      	movs	r1, #200	; 0xc8
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f000 f841 	bl	8000f14 <LCD_Light>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400025c 	.word	0x2400025c
 8000ea0:	24000008 	.word	0x24000008
 8000ea4:	2400021c 	.word	0x2400021c
 8000ea8:	2400002c 	.word	0x2400002c
 8000eac:	24000254 	.word	0x24000254
 8000eb0:	08008a90 	.word	0x08008a90
 8000eb4:	10624dd3 	.word	0x10624dd3
 8000eb8:	cccccccd 	.word	0xcccccccd
 8000ebc:	08007fe8 	.word	0x08007fe8
 8000ec0:	58020800 	.word	0x58020800
 8000ec4:	08007ff0 	.word	0x08007ff0
 8000ec8:	08008000 	.word	0x08008000
 8000ecc:	08008010 	.word	0x08008010

08000ed0 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_WR_RS_GPIO_Port,GPIO_PIN_10,GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <LCD_SetBrightness+0x24>)
 8000ee0:	f002 fa9c 	bl	800341c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <LCD_SetBrightness+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58021000 	.word	0x58021000
 8000ef8:	240001d0 	.word	0x240001d0

08000efc <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <LCD_GetBrightness+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	240001d0 	.word	0x240001d0

08000f14 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8000f1e:	f7ff ffed 	bl	8000efc <LCD_GetBrightness>
 8000f22:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d05e      	beq.n	8000fee <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d05c      	beq.n	8000ff2 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f50:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f66:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8000f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f84:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8c:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8000f90:	f001 ff4e 	bl	8002e30 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f001 ff56 	bl	8002e48 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8000f9c:	f001 ff48 	bl	8002e30 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb2:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8000fb6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fdc:	ee17 0a90 	vmov	r0, s15
 8000fe0:	f7ff ff76 	bl	8000ed0 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8000fe4:	6a3a      	ldr	r2, [r7, #32]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d204      	bcs.n	8000ff6 <LCD_Light+0xe2>
		delay_ms(1);
 8000fec:	e7d3      	b.n	8000f96 <LCD_Light+0x82>
		return;
 8000fee:	bf00      	nop
 8000ff0:	e002      	b.n	8000ff8 <LCD_Light+0xe4>
		return;
 8000ff2:	bf00      	nop
 8000ff4:	e000      	b.n	8000ff8 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8000ff6:	bf00      	nop
		
	}
}
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b097      	sub	sp, #92	; 0x5c
 8001006:	af02      	add	r7, sp, #8
 8001008:	461e      	mov	r6, r3
 800100a:	4603      	mov	r3, r0
 800100c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800100e:	460b      	mov	r3, r1
 8001010:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001012:	4613      	mov	r3, r2
 8001014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001018:	4633      	mov	r3, r6
 800101a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800101e:	466b      	mov	r3, sp
 8001020:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8001022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001024:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 8001028:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800102a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 800102e:	4baf      	ldr	r3, [pc, #700]	; (80012ec <LCD_ShowChar+0x2ec>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001036:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d101      	bne.n	8001042 <LCD_ShowChar+0x42>
 800103e:	2106      	movs	r1, #6
 8001040:	e000      	b.n	8001044 <LCD_ShowChar+0x44>
 8001042:	2108      	movs	r1, #8
 8001044:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001048:	1e4b      	subs	r3, r1, #1
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
 800104c:	460a      	mov	r2, r1
 800104e:	2300      	movs	r3, #0
 8001050:	4692      	mov	sl, r2
 8001052:	469b      	mov	fp, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001060:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001064:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001068:	460b      	mov	r3, r1
 800106a:	005e      	lsls	r6, r3, #1
 800106c:	4603      	mov	r3, r0
 800106e:	3b01      	subs	r3, #1
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001072:	460a      	mov	r2, r1
 8001074:	2300      	movs	r3, #0
 8001076:	61ba      	str	r2, [r7, #24]
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	b2c3      	uxtb	r3, r0
 800107c:	2200      	movs	r2, #0
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	627a      	str	r2, [r7, #36]	; 0x24
 8001082:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001086:	465b      	mov	r3, fp
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	fb02 fc03 	mul.w	ip, r2, r3
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	4652      	mov	r2, sl
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	449c      	add	ip, r3
 8001098:	4652      	mov	r2, sl
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	fba2 8903 	umull	r8, r9, r2, r3
 80010a0:	eb0c 0309 	add.w	r3, ip, r9
 80010a4:	4699      	mov	r9, r3
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80010b2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80010b6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80010ba:	460a      	mov	r2, r1
 80010bc:	2300      	movs	r3, #0
 80010be:	613a      	str	r2, [r7, #16]
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	b2c3      	uxtb	r3, r0
 80010c4:	2200      	movs	r2, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	60fa      	str	r2, [r7, #12]
 80010ca:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80010ce:	464b      	mov	r3, r9
 80010d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80010d4:	4652      	mov	r2, sl
 80010d6:	fb02 fc03 	mul.w	ip, r2, r3
 80010da:	465b      	mov	r3, fp
 80010dc:	4642      	mov	r2, r8
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	449c      	add	ip, r3
 80010e4:	4642      	mov	r2, r8
 80010e6:	4653      	mov	r3, sl
 80010e8:	fba2 4503 	umull	r4, r5, r2, r3
 80010ec:	eb0c 0305 	add.w	r3, ip, r5
 80010f0:	461d      	mov	r5, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	012b      	lsls	r3, r5, #4
 80010fc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001100:	0122      	lsls	r2, r4, #4
 8001102:	460b      	mov	r3, r1
 8001104:	4602      	mov	r2, r0
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3307      	adds	r3, #7
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	ebad 0d03 	sub.w	sp, sp, r3
 8001116:	ab02      	add	r3, sp, #8
 8001118:	3301      	adds	r3, #1
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8001120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001124:	4619      	mov	r1, r3
 8001126:	4872      	ldr	r0, [pc, #456]	; (80012f0 <LCD_ShowChar+0x2f0>)
 8001128:	f001 fc20 	bl	800296c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800112c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001130:	4619      	mov	r1, r3
 8001132:	486f      	ldr	r0, [pc, #444]	; (80012f0 <LCD_ShowChar+0x2f0>)
 8001134:	f001 fc2c 	bl	8002990 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800113c:	3b20      	subs	r3, #32
 800113e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8001148:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 80a7 	bne.w	80012a0 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 8001152:	2300      	movs	r3, #0
 8001154:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001158:	e09a      	b.n	8001290 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 800115a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d10e      	bne.n	8001180 <LCD_ShowChar+0x180>
 8001162:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001166:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 800116a:	4862      	ldr	r0, [pc, #392]	; (80012f4 <LCD_ShowChar+0x2f4>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4403      	add	r3, r0
 8001176:	440b      	add	r3, r1
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800117e:	e00a      	b.n	8001196 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 8001180:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001184:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001188:	495b      	ldr	r1, [pc, #364]	; (80012f8 <LCD_ShowChar+0x2f8>)
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	440a      	add	r2, r1
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 8001196:	2300      	movs	r3, #0
 8001198:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800119c:	e06d      	b.n	800127a <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 800119e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da0e      	bge.n	80011c4 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80011a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <LCD_ShowChar+0x2ec>)
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	e00d      	b.n	80011e0 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <LCD_ShowChar+0x2fc>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <LCD_ShowChar+0x2fc>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b43      	ldr	r3, [pc, #268]	; (80012ec <LCD_ShowChar+0x2ec>)
 80011de:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80011e0:	0872      	lsrs	r2, r6, #1
 80011e2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80011e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461c      	mov	r4, r3
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <LCD_ShowChar+0x2ec>)
 80011f2:	8818      	ldrh	r0, [r3, #0]
 80011f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f6:	fb01 f202 	mul.w	r2, r1, r2
 80011fa:	4422      	add	r2, r4
 80011fc:	4601      	mov	r1, r0
 80011fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001206:	3301      	adds	r3, #1
 8001208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 800120c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001216:	429a      	cmp	r2, r3
 8001218:	d302      	bcc.n	8001220 <LCD_ShowChar+0x220>
 800121a:	2300      	movs	r3, #0
 800121c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001220:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800122a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800122c:	3301      	adds	r3, #1
 800122e:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001230:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	429a      	cmp	r2, r3
 8001236:	d304      	bcc.n	8001242 <LCD_ShowChar+0x242>
 8001238:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <LCD_ShowChar+0x2ec>)
 800123a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800123e:	8013      	strh	r3, [r2, #0]
 8001240:	e0e6      	b.n	8001410 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8001242:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001244:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001248:	1ad2      	subs	r2, r2, r3
 800124a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800124e:	429a      	cmp	r2, r3
 8001250:	d10e      	bne.n	8001270 <LCD_ShowChar+0x270>
				{
					y=y0;
 8001252:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001256:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800125a:	3301      	adds	r3, #1
 800125c:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800125e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001262:	429a      	cmp	r2, r3
 8001264:	d30e      	bcc.n	8001284 <LCD_ShowChar+0x284>
 8001266:	4a21      	ldr	r2, [pc, #132]	; (80012ec <LCD_ShowChar+0x2ec>)
 8001268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800126c:	8013      	strh	r3, [r2, #0]
 800126e:	e0cf      	b.n	8001410 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001270:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001274:	3301      	adds	r3, #1
 8001276:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800127a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800127e:	2b07      	cmp	r3, #7
 8001280:	d98d      	bls.n	800119e <LCD_ShowChar+0x19e>
 8001282:	e000      	b.n	8001286 <LCD_ShowChar+0x286>
					break;
 8001284:	bf00      	nop
		for(t=0;t<size;t++)
 8001286:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800128a:	3301      	adds	r3, #1
 800128c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001290:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001294:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001298:	429a      	cmp	r2, r3
 800129a:	f4ff af5e 	bcc.w	800115a <LCD_ShowChar+0x15a>
 800129e:	e09c      	b.n	80013da <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80012a6:	e091      	b.n	80013cc <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80012a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d10e      	bne.n	80012ce <LCD_ShowChar+0x2ce>
 80012b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012b4:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <LCD_ShowChar+0x2f4>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4403      	add	r3, r0
 80012c4:	440b      	add	r3, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012cc:	e00a      	b.n	80012e4 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80012ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <LCD_ShowChar+0x2f8>)
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	440a      	add	r2, r1
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80012ea:	e064      	b.n	80013b6 <LCD_ShowChar+0x3b6>
 80012ec:	24000028 	.word	0x24000028
 80012f0:	2400021c 	.word	0x2400021c
 80012f4:	0800802c 	.word	0x0800802c
 80012f8:	080084a0 	.word	0x080084a0
 80012fc:	24000258 	.word	0x24000258
			{			    
				if(temp&0x80)
 8001300:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001304:	2b00      	cmp	r3, #0
 8001306:	da1a      	bge.n	800133e <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001308:	4b44      	ldr	r3, [pc, #272]	; (800141c <LCD_ShowChar+0x41c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <LCD_ShowChar+0x41c>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b218      	sxth	r0, r3
 800131e:	0872      	lsrs	r2, r6, #1
 8001320:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8001324:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461c      	mov	r4, r3
 800132e:	b280      	uxth	r0, r0
 8001330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001332:	fb01 f202 	mul.w	r2, r1, r2
 8001336:	4422      	add	r2, r4
 8001338:	4601      	mov	r1, r0
 800133a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800133e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001342:	3301      	adds	r3, #1
 8001344:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001348:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001352:	429a      	cmp	r2, r3
 8001354:	d302      	bcc.n	800135c <LCD_ShowChar+0x35c>
 8001356:	2300      	movs	r3, #0
 8001358:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 800135c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001366:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001368:	3301      	adds	r3, #1
 800136a:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800136c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	429a      	cmp	r2, r3
 8001372:	d304      	bcc.n	800137e <LCD_ShowChar+0x37e>
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <LCD_ShowChar+0x41c>)
 8001376:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800137a:	8013      	strh	r3, [r2, #0]
 800137c:	e048      	b.n	8001410 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800137e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001380:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800138a:	429a      	cmp	r2, r3
 800138c:	d10e      	bne.n	80013ac <LCD_ShowChar+0x3ac>
				{
					y=y0;
 800138e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001392:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001396:	3301      	adds	r3, #1
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800139a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139e:	429a      	cmp	r2, r3
 80013a0:	d30e      	bcc.n	80013c0 <LCD_ShowChar+0x3c0>
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <LCD_ShowChar+0x41c>)
 80013a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013a8:	8013      	strh	r3, [r2, #0]
 80013aa:	e031      	b.n	8001410 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 80013ac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013b0:	3301      	adds	r3, #1
 80013b2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80013b6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	d9a0      	bls.n	8001300 <LCD_ShowChar+0x300>
 80013be:	e000      	b.n	80013c2 <LCD_ShowChar+0x3c2>
					break;
 80013c0:	bf00      	nop
		for(t=0;t<size;t++)
 80013c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013c6:	3301      	adds	r3, #1
 80013c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013cc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80013d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f4ff af67 	bcc.w	80012a8 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80013da:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80013de:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80013e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d101      	bne.n	80013ee <LCD_ShowChar+0x3ee>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e000      	b.n	80013f0 <LCD_ShowChar+0x3f0>
 80013ee:	2308      	movs	r3, #8
 80013f0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013fa:	4602      	mov	r2, r0
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <LCD_ShowChar+0x420>)
 80013fe:	f001 f907 	bl	8002610 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <LCD_ShowChar+0x41c>)
 8001404:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001408:	8013      	strh	r3, [r2, #0]
 800140a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800140e:	e001      	b.n	8001414 <LCD_ShowChar+0x414>
 8001410:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8001414:	3754      	adds	r7, #84	; 0x54
 8001416:	46bd      	mov	sp, r7
 8001418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800141c:	24000028 	.word	0x24000028
 8001420:	2400021c 	.word	0x2400021c

08001424 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af02      	add	r7, sp, #8
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4413      	add	r3, r2
 800144c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800144e:	883a      	ldrh	r2, [r7, #0]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001456:	e024      	b.n	80014a2 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d307      	bcc.n	8001470 <LCD_ShowString+0x4c>
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001468:	b29a      	uxth	r2, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8001470:	88ba      	ldrh	r2, [r7, #4]
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d21d      	bcs.n	80014b4 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001480:	88b9      	ldrh	r1, [r7, #4]
 8001482:	88f8      	ldrh	r0, [r7, #6]
 8001484:	2400      	movs	r4, #0
 8001486:	9400      	str	r4, [sp, #0]
 8001488:	f7ff fdba 	bl	8001000 <LCD_ShowChar>
        x+=size/2;
 800148c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4413      	add	r3, r2
 800149a:	80fb      	strh	r3, [r7, #6]
        p++;
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3301      	adds	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b7e      	cmp	r3, #126	; 0x7e
 80014a8:	d805      	bhi.n	80014b6 <LCD_ShowString+0x92>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b1f      	cmp	r3, #31
 80014b0:	d8d2      	bhi.n	8001458 <LCD_ShowString+0x34>
    }  
}
 80014b2:	e000      	b.n	80014b6 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80014b4:	bf00      	nop
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}

080014be <lcd_init>:

static int32_t lcd_init(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	//HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
	return result;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80014da:	f001 fca9 	bl	8002e30 <HAL_GetTick>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <lcd_writereg+0x8c>)
 80014fa:	f001 ff8f 	bl	800341c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <lcd_writereg+0x8c>)
 8001506:	f001 ff89 	bl	800341c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800150a:	f107 010f 	add.w	r1, r7, #15
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	2201      	movs	r2, #1
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <lcd_writereg+0x90>)
 8001514:	f004 fe60 	bl	80061d8 <HAL_SPI_Transmit>
 8001518:	4603      	mov	r3, r0
 800151a:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <lcd_writereg+0x8c>)
 8001524:	f001 ff7a 	bl	800341c <HAL_GPIO_WritePin>
	if(length > 0)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	b29a      	uxth	r2, r3
 8001532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <lcd_writereg+0x90>)
 800153a:	f004 fe4d 	bl	80061d8 <HAL_SPI_Transmit>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <lcd_writereg+0x8c>)
 8001550:	f001 ff64 	bl	800341c <HAL_GPIO_WritePin>
	if(result>0){
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dd03      	ble.n	8001562 <lcd_writereg+0x7e>
		result = -1;}
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e001      	b.n	8001566 <lcd_writereg+0x82>
	else{
		result = 0;}
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
	return result;
 8001566:	697b      	ldr	r3, [r7, #20]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58021000 	.word	0x58021000
 8001574:	24000144 	.word	0x24000144

08001578 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <lcd_readreg+0x80>)
 800158c:	f001 ff46 	bl	800341c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	4818      	ldr	r0, [pc, #96]	; (80015f8 <lcd_readreg+0x80>)
 8001598:	f001 ff40 	bl	800341c <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800159c:	1df9      	adds	r1, r7, #7
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	2201      	movs	r2, #1
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <lcd_readreg+0x84>)
 80015a4:	f004 fe18 	bl	80061d8 <HAL_SPI_Transmit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <lcd_readreg+0x80>)
 80015b4:	f001 ff32 	bl	800341c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80015b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015bc:	2201      	movs	r2, #1
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <lcd_readreg+0x84>)
 80015c2:	f005 f805 	bl	80065d0 <HAL_SPI_Receive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <lcd_readreg+0x80>)
 80015d8:	f001 ff20 	bl	800341c <HAL_GPIO_WritePin>
	if(result>0){
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd03      	ble.n	80015ea <lcd_readreg+0x72>
		result = -1;}
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e001      	b.n	80015ee <lcd_readreg+0x76>
	else{
		result = 0;}
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
	return result;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	58021000 	.word	0x58021000
 80015fc:	24000144 	.word	0x24000144

08001600 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <lcd_senddata+0x50>)
 8001612:	f001 ff03 	bl	800341c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b29a      	uxth	r2, r3
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <lcd_senddata+0x54>)
 8001620:	f004 fdda 	bl	80061d8 <HAL_SPI_Transmit>
 8001624:	4603      	mov	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <lcd_senddata+0x50>)
 8001630:	f001 fef4 	bl	800341c <HAL_GPIO_WritePin>
	if(result>0){
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd03      	ble.n	8001642 <lcd_senddata+0x42>
		result = -1;}
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e001      	b.n	8001646 <lcd_senddata+0x46>
	else{
		result = 0;}
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	return result;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58021000 	.word	0x58021000
 8001654:	24000144 	.word	0x24000144

08001658 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <lcd_recvdata+0x54>)
 800166a:	f001 fed7 	bl	800341c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b29a      	uxth	r2, r3
 8001672:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <lcd_recvdata+0x58>)
 800167a:	f004 ffa9 	bl	80065d0 <HAL_SPI_Receive>
 800167e:	4603      	mov	r3, r0
 8001680:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <lcd_recvdata+0x54>)
 800168a:	f001 fec7 	bl	800341c <HAL_GPIO_WritePin>
	if(result>0){
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	dd03      	ble.n	800169c <lcd_recvdata+0x44>
		result = -1;}
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e001      	b.n	80016a0 <lcd_recvdata+0x48>
	else{
		result = 0;}
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
	return result;
 80016a0:	68fb      	ldr	r3, [r7, #12]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	58021000 	.word	0x58021000
 80016b0:	24000144 	.word	0x24000144

080016b4 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e03a      	b.n	8001742 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	891a      	ldrh	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <ST7735_RegisterBusIO+0x98>)
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <ST7735_RegisterBusIO+0x9c>)
 8001716:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <ST7735_RegisterBusIO+0xa0>)
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <ST7735_RegisterBusIO+0xa4>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4798      	blx	r3
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	e002      	b.n	8001742 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08002bbd 	.word	0x08002bbd
 8001750:	08002be5 	.word	0x08002be5
 8001754:	08002c0f 	.word	0x08002c0f
 8001758:	08002c33 	.word	0x08002c33

0800175c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e3a6      	b.n	8001ec4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f103 0020 	add.w	r0, r3, #32
 8001780:	f107 0213 	add.w	r2, r7, #19
 8001784:	2300      	movs	r3, #0
 8001786:	2101      	movs	r1, #1
 8001788:	f001 fa92 	bl	8002cb0 <st7735_write_reg>
 800178c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800178e:	2178      	movs	r1, #120	; 0x78
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f001 fa60 	bl	8002c56 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f103 0020 	add.w	r0, r3, #32
 80017a0:	f107 0213 	add.w	r2, r7, #19
 80017a4:	2300      	movs	r3, #0
 80017a6:	2101      	movs	r1, #1
 80017a8:	f001 fa82 	bl	8002cb0 <st7735_write_reg>
 80017ac:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80017ae:	2178      	movs	r1, #120	; 0x78
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f001 fa50 	bl	8002c56 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f103 0020 	add.w	r0, r3, #32
 80017c0:	f107 0213 	add.w	r2, r7, #19
 80017c4:	2301      	movs	r3, #1
 80017c6:	2111      	movs	r1, #17
 80017c8:	f001 fa72 	bl	8002cb0 <st7735_write_reg>
 80017cc:	4602      	mov	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f103 0020 	add.w	r0, r3, #32
 80017da:	f107 0213 	add.w	r2, r7, #19
 80017de:	2300      	movs	r3, #0
 80017e0:	21b1      	movs	r1, #177	; 0xb1
 80017e2:	f001 fa65 	bl	8002cb0 <st7735_write_reg>
 80017e6:	4602      	mov	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80017ee:	2301      	movs	r3, #1
 80017f0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3320      	adds	r3, #32
 80017f6:	f107 0113 	add.w	r1, r7, #19
 80017fa:	2201      	movs	r2, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fa6c 	bl	8002cda <st7735_send_data>
 8001802:	4602      	mov	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800180a:	232c      	movs	r3, #44	; 0x2c
 800180c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3320      	adds	r3, #32
 8001812:	f107 0113 	add.w	r1, r7, #19
 8001816:	2201      	movs	r2, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fa5e 	bl	8002cda <st7735_send_data>
 800181e:	4602      	mov	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001826:	232d      	movs	r3, #45	; 0x2d
 8001828:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3320      	adds	r3, #32
 800182e:	f107 0113 	add.w	r1, r7, #19
 8001832:	2201      	movs	r2, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fa50 	bl	8002cda <st7735_send_data>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001842:	2301      	movs	r3, #1
 8001844:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f103 0020 	add.w	r0, r3, #32
 800184c:	f107 0213 	add.w	r2, r7, #19
 8001850:	2301      	movs	r3, #1
 8001852:	21b2      	movs	r1, #178	; 0xb2
 8001854:	f001 fa2c 	bl	8002cb0 <st7735_write_reg>
 8001858:	4602      	mov	r2, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001860:	232c      	movs	r3, #44	; 0x2c
 8001862:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3320      	adds	r3, #32
 8001868:	f107 0113 	add.w	r1, r7, #19
 800186c:	2201      	movs	r2, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f001 fa33 	bl	8002cda <st7735_send_data>
 8001874:	4602      	mov	r2, r0
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800187c:	232d      	movs	r3, #45	; 0x2d
 800187e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3320      	adds	r3, #32
 8001884:	f107 0113 	add.w	r1, r7, #19
 8001888:	2201      	movs	r2, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fa25 	bl	8002cda <st7735_send_data>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001898:	2301      	movs	r3, #1
 800189a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f103 0020 	add.w	r0, r3, #32
 80018a2:	f107 0213 	add.w	r2, r7, #19
 80018a6:	2301      	movs	r3, #1
 80018a8:	21b3      	movs	r1, #179	; 0xb3
 80018aa:	f001 fa01 	bl	8002cb0 <st7735_write_reg>
 80018ae:	4602      	mov	r2, r0
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80018b6:	232c      	movs	r3, #44	; 0x2c
 80018b8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3320      	adds	r3, #32
 80018be:	f107 0113 	add.w	r1, r7, #19
 80018c2:	2201      	movs	r2, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fa08 	bl	8002cda <st7735_send_data>
 80018ca:	4602      	mov	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80018d2:	232d      	movs	r3, #45	; 0x2d
 80018d4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3320      	adds	r3, #32
 80018da:	f107 0113 	add.w	r1, r7, #19
 80018de:	2201      	movs	r2, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f9fa 	bl	8002cda <st7735_send_data>
 80018e6:	4602      	mov	r2, r0
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80018ee:	2301      	movs	r3, #1
 80018f0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3320      	adds	r3, #32
 80018f6:	f107 0113 	add.w	r1, r7, #19
 80018fa:	2201      	movs	r2, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f9ec 	bl	8002cda <st7735_send_data>
 8001902:	4602      	mov	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4413      	add	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800190a:	232c      	movs	r3, #44	; 0x2c
 800190c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3320      	adds	r3, #32
 8001912:	f107 0113 	add.w	r1, r7, #19
 8001916:	2201      	movs	r2, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f001 f9de 	bl	8002cda <st7735_send_data>
 800191e:	4602      	mov	r2, r0
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001926:	232d      	movs	r3, #45	; 0x2d
 8001928:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3320      	adds	r3, #32
 800192e:	f107 0113 	add.w	r1, r7, #19
 8001932:	2201      	movs	r2, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f9d0 	bl	8002cda <st7735_send_data>
 800193a:	4602      	mov	r2, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001942:	2307      	movs	r3, #7
 8001944:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f103 0020 	add.w	r0, r3, #32
 800194c:	f107 0213 	add.w	r2, r7, #19
 8001950:	2301      	movs	r3, #1
 8001952:	21b4      	movs	r1, #180	; 0xb4
 8001954:	f001 f9ac 	bl	8002cb0 <st7735_write_reg>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001960:	23a2      	movs	r3, #162	; 0xa2
 8001962:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f103 0020 	add.w	r0, r3, #32
 800196a:	f107 0213 	add.w	r2, r7, #19
 800196e:	2301      	movs	r3, #1
 8001970:	21c0      	movs	r1, #192	; 0xc0
 8001972:	f001 f99d 	bl	8002cb0 <st7735_write_reg>
 8001976:	4602      	mov	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800197e:	2302      	movs	r3, #2
 8001980:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3320      	adds	r3, #32
 8001986:	f107 0113 	add.w	r1, r7, #19
 800198a:	2201      	movs	r2, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f001 f9a4 	bl	8002cda <st7735_send_data>
 8001992:	4602      	mov	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 800199a:	2384      	movs	r3, #132	; 0x84
 800199c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3320      	adds	r3, #32
 80019a2:	f107 0113 	add.w	r1, r7, #19
 80019a6:	2201      	movs	r2, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f996 	bl	8002cda <st7735_send_data>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4413      	add	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 80019b6:	23c5      	movs	r3, #197	; 0xc5
 80019b8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f103 0020 	add.w	r0, r3, #32
 80019c0:	f107 0213 	add.w	r2, r7, #19
 80019c4:	2301      	movs	r3, #1
 80019c6:	21c1      	movs	r1, #193	; 0xc1
 80019c8:	f001 f972 	bl	8002cb0 <st7735_write_reg>
 80019cc:	4602      	mov	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 80019d4:	230a      	movs	r3, #10
 80019d6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f103 0020 	add.w	r0, r3, #32
 80019de:	f107 0213 	add.w	r2, r7, #19
 80019e2:	2301      	movs	r3, #1
 80019e4:	21c2      	movs	r1, #194	; 0xc2
 80019e6:	f001 f963 	bl	8002cb0 <st7735_write_reg>
 80019ea:	4602      	mov	r2, r0
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3320      	adds	r3, #32
 80019fa:	f107 0113 	add.w	r1, r7, #19
 80019fe:	2201      	movs	r2, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 f96a 	bl	8002cda <st7735_send_data>
 8001a06:	4602      	mov	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001a0e:	238a      	movs	r3, #138	; 0x8a
 8001a10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f103 0020 	add.w	r0, r3, #32
 8001a18:	f107 0213 	add.w	r2, r7, #19
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	21c3      	movs	r1, #195	; 0xc3
 8001a20:	f001 f946 	bl	8002cb0 <st7735_write_reg>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001a2c:	232a      	movs	r3, #42	; 0x2a
 8001a2e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3320      	adds	r3, #32
 8001a34:	f107 0113 	add.w	r1, r7, #19
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f94d 	bl	8002cda <st7735_send_data>
 8001a40:	4602      	mov	r2, r0
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001a48:	238a      	movs	r3, #138	; 0x8a
 8001a4a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f103 0020 	add.w	r0, r3, #32
 8001a52:	f107 0213 	add.w	r2, r7, #19
 8001a56:	2301      	movs	r3, #1
 8001a58:	21c4      	movs	r1, #196	; 0xc4
 8001a5a:	f001 f929 	bl	8002cb0 <st7735_write_reg>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	4413      	add	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001a66:	23ee      	movs	r3, #238	; 0xee
 8001a68:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3320      	adds	r3, #32
 8001a6e:	f107 0113 	add.w	r1, r7, #19
 8001a72:	2201      	movs	r2, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f930 	bl	8002cda <st7735_send_data>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001a82:	230e      	movs	r3, #14
 8001a84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f103 0020 	add.w	r0, r3, #32
 8001a8c:	f107 0213 	add.w	r2, r7, #19
 8001a90:	2301      	movs	r3, #1
 8001a92:	21c5      	movs	r1, #197	; 0xc5
 8001a94:	f001 f90c 	bl	8002cb0 <st7735_write_reg>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f103 0020 	add.w	r0, r3, #32
 8001aae:	f107 0213 	add.w	r2, r7, #19
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2121      	movs	r1, #33	; 0x21
 8001ab6:	f001 f8fb 	bl	8002cb0 <st7735_write_reg>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e00c      	b.n	8001ade <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f103 0020 	add.w	r0, r3, #32
 8001aca:	f107 0213 	add.w	r2, r7, #19
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	f001 f8ed 	bl	8002cb0 <st7735_write_reg>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f103 0020 	add.w	r0, r3, #32
 8001ae4:	f107 0208 	add.w	r2, r7, #8
 8001ae8:	2301      	movs	r3, #1
 8001aea:	213a      	movs	r1, #58	; 0x3a
 8001aec:	f001 f8e0 	bl	8002cb0 <st7735_write_reg>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001af8:	2302      	movs	r3, #2
 8001afa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f103 0020 	add.w	r0, r3, #32
 8001b02:	f107 0213 	add.w	r2, r7, #19
 8001b06:	2301      	movs	r3, #1
 8001b08:	21e0      	movs	r1, #224	; 0xe0
 8001b0a:	f001 f8d1 	bl	8002cb0 <st7735_write_reg>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001b16:	231c      	movs	r3, #28
 8001b18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3320      	adds	r3, #32
 8001b1e:	f107 0113 	add.w	r1, r7, #19
 8001b22:	2201      	movs	r2, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 f8d8 	bl	8002cda <st7735_send_data>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001b32:	2307      	movs	r3, #7
 8001b34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3320      	adds	r3, #32
 8001b3a:	f107 0113 	add.w	r1, r7, #19
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 f8ca 	bl	8002cda <st7735_send_data>
 8001b46:	4602      	mov	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3320      	adds	r3, #32
 8001b56:	f107 0113 	add.w	r1, r7, #19
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 f8bc 	bl	8002cda <st7735_send_data>
 8001b62:	4602      	mov	r2, r0
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001b6a:	2337      	movs	r3, #55	; 0x37
 8001b6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3320      	adds	r3, #32
 8001b72:	f107 0113 	add.w	r1, r7, #19
 8001b76:	2201      	movs	r2, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 f8ae 	bl	8002cda <st7735_send_data>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001b86:	2332      	movs	r3, #50	; 0x32
 8001b88:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3320      	adds	r3, #32
 8001b8e:	f107 0113 	add.w	r1, r7, #19
 8001b92:	2201      	movs	r2, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 f8a0 	bl	8002cda <st7735_send_data>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001ba2:	2329      	movs	r3, #41	; 0x29
 8001ba4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3320      	adds	r3, #32
 8001baa:	f107 0113 	add.w	r1, r7, #19
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 f892 	bl	8002cda <st7735_send_data>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4413      	add	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001bbe:	232d      	movs	r3, #45	; 0x2d
 8001bc0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3320      	adds	r3, #32
 8001bc6:	f107 0113 	add.w	r1, r7, #19
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 f884 	bl	8002cda <st7735_send_data>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001bda:	2329      	movs	r3, #41	; 0x29
 8001bdc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3320      	adds	r3, #32
 8001be2:	f107 0113 	add.w	r1, r7, #19
 8001be6:	2201      	movs	r2, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 f876 	bl	8002cda <st7735_send_data>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8001bf6:	2325      	movs	r3, #37	; 0x25
 8001bf8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3320      	adds	r3, #32
 8001bfe:	f107 0113 	add.w	r1, r7, #19
 8001c02:	2201      	movs	r2, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 f868 	bl	8002cda <st7735_send_data>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4413      	add	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8001c12:	232b      	movs	r3, #43	; 0x2b
 8001c14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3320      	adds	r3, #32
 8001c1a:	f107 0113 	add.w	r1, r7, #19
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 f85a 	bl	8002cda <st7735_send_data>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8001c2e:	2339      	movs	r3, #57	; 0x39
 8001c30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3320      	adds	r3, #32
 8001c36:	f107 0113 	add.w	r1, r7, #19
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 f84c 	bl	8002cda <st7735_send_data>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3320      	adds	r3, #32
 8001c52:	f107 0113 	add.w	r1, r7, #19
 8001c56:	2201      	movs	r2, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 f83e 	bl	8002cda <st7735_send_data>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4413      	add	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3320      	adds	r3, #32
 8001c6e:	f107 0113 	add.w	r1, r7, #19
 8001c72:	2201      	movs	r2, #1
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 f830 	bl	8002cda <st7735_send_data>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	4413      	add	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8001c82:	2303      	movs	r3, #3
 8001c84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3320      	adds	r3, #32
 8001c8a:	f107 0113 	add.w	r1, r7, #19
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 f822 	bl	8002cda <st7735_send_data>
 8001c96:	4602      	mov	r2, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3320      	adds	r3, #32
 8001ca6:	f107 0113 	add.w	r1, r7, #19
 8001caa:	2201      	movs	r2, #1
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 f814 	bl	8002cda <st7735_send_data>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f103 0020 	add.w	r0, r3, #32
 8001cc4:	f107 0213 	add.w	r2, r7, #19
 8001cc8:	2301      	movs	r3, #1
 8001cca:	21e1      	movs	r1, #225	; 0xe1
 8001ccc:	f000 fff0 	bl	8002cb0 <st7735_write_reg>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8001cd8:	231d      	movs	r3, #29
 8001cda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3320      	adds	r3, #32
 8001ce0:	f107 0113 	add.w	r1, r7, #19
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fff7 	bl	8002cda <st7735_send_data>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	f107 0113 	add.w	r1, r7, #19
 8001d00:	2201      	movs	r2, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 ffe9 	bl	8002cda <st7735_send_data>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8001d10:	2306      	movs	r3, #6
 8001d12:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0113 	add.w	r1, r7, #19
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 ffdb 	bl	8002cda <st7735_send_data>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001d2c:	232e      	movs	r3, #46	; 0x2e
 8001d2e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3320      	adds	r3, #32
 8001d34:	f107 0113 	add.w	r1, r7, #19
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 ffcd 	bl	8002cda <st7735_send_data>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d48:	232c      	movs	r3, #44	; 0x2c
 8001d4a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3320      	adds	r3, #32
 8001d50:	f107 0113 	add.w	r1, r7, #19
 8001d54:	2201      	movs	r2, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 ffbf 	bl	8002cda <st7735_send_data>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001d64:	2329      	movs	r3, #41	; 0x29
 8001d66:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3320      	adds	r3, #32
 8001d6c:	f107 0113 	add.w	r1, r7, #19
 8001d70:	2201      	movs	r2, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 ffb1 	bl	8002cda <st7735_send_data>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d80:	232d      	movs	r3, #45	; 0x2d
 8001d82:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3320      	adds	r3, #32
 8001d88:	f107 0113 	add.w	r1, r7, #19
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 ffa3 	bl	8002cda <st7735_send_data>
 8001d94:	4602      	mov	r2, r0
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001d9c:	232e      	movs	r3, #46	; 0x2e
 8001d9e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3320      	adds	r3, #32
 8001da4:	f107 0113 	add.w	r1, r7, #19
 8001da8:	2201      	movs	r2, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 ff95 	bl	8002cda <st7735_send_data>
 8001db0:	4602      	mov	r2, r0
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4413      	add	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001db8:	232e      	movs	r3, #46	; 0x2e
 8001dba:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	f107 0113 	add.w	r1, r7, #19
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 ff87 	bl	8002cda <st7735_send_data>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001dd4:	2337      	movs	r3, #55	; 0x37
 8001dd6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3320      	adds	r3, #32
 8001ddc:	f107 0113 	add.w	r1, r7, #19
 8001de0:	2201      	movs	r2, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 ff79 	bl	8002cda <st7735_send_data>
 8001de8:	4602      	mov	r2, r0
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8001df0:	233f      	movs	r3, #63	; 0x3f
 8001df2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3320      	adds	r3, #32
 8001df8:	f107 0113 	add.w	r1, r7, #19
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ff6b 	bl	8002cda <st7735_send_data>
 8001e04:	4602      	mov	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3320      	adds	r3, #32
 8001e14:	f107 0113 	add.w	r1, r7, #19
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 ff5d 	bl	8002cda <st7735_send_data>
 8001e20:	4602      	mov	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4413      	add	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3320      	adds	r3, #32
 8001e30:	f107 0113 	add.w	r1, r7, #19
 8001e34:	2201      	movs	r2, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 ff4f 	bl	8002cda <st7735_send_data>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4413      	add	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001e44:	2302      	movs	r3, #2
 8001e46:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	f107 0113 	add.w	r1, r7, #19
 8001e50:	2201      	movs	r2, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 ff41 	bl	8002cda <st7735_send_data>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001e60:	2310      	movs	r3, #16
 8001e62:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3320      	adds	r3, #32
 8001e68:	f107 0113 	add.w	r1, r7, #19
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 ff33 	bl	8002cda <st7735_send_data>
 8001e74:	4602      	mov	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f103 0020 	add.w	r0, r3, #32
 8001e86:	f107 0213 	add.w	r2, r7, #19
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2113      	movs	r1, #19
 8001e8e:	f000 ff0f 	bl	8002cb0 <st7735_write_reg>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	4413      	add	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f103 0020 	add.w	r0, r3, #32
 8001ea0:	f107 0213 	add.w	r2, r7, #19
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2129      	movs	r1, #41	; 0x29
 8001ea8:	f000 ff02 	bl	8002cb0 <st7735_write_reg>
 8001eac:	4602      	mov	r2, r0
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f944 	bl	8002144 <ST7735_SetOrientation>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001ed0:	697b      	ldr	r3, [r7, #20]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3320      	adds	r3, #32
 8001efe:	f107 0208 	add.w	r2, r7, #8
 8001f02:	21da      	movs	r1, #218	; 0xda
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fec0 	bl	8002c8a <st7735_read_reg>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e02d      	b.n	8001f74 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 0020 	add.w	r0, r3, #32
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	3301      	adds	r3, #1
 8001f24:	461a      	mov	r2, r3
 8001f26:	21db      	movs	r1, #219	; 0xdb
 8001f28:	f000 feaf 	bl	8002c8a <st7735_read_reg>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e01c      	b.n	8001f74 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0020 	add.w	r0, r3, #32
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	3302      	adds	r3, #2
 8001f46:	461a      	mov	r2, r3
 8001f48:	21dc      	movs	r1, #220	; 0xdc
 8001f4a:	f000 fe9e 	bl	8002c8a <st7735_read_reg>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e00b      	b.n	8001f74 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8001f5c:	7abb      	ldrb	r3, [r7, #10]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	7a7b      	ldrb	r3, [r7, #9]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	431a      	orrs	r2, r3
 8001f66:	7a3b      	ldrb	r3, [r7, #8]
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f103 0020 	add.w	r0, r3, #32
 8001f92:	f107 020b 	add.w	r2, r7, #11
 8001f96:	2300      	movs	r3, #0
 8001f98:	2113      	movs	r1, #19
 8001f9a:	f000 fe89 	bl	8002cb0 <st7735_write_reg>
 8001f9e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8001fa0:	210a      	movs	r1, #10
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fe57 	bl	8002c56 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0020 	add.w	r0, r3, #32
 8001fae:	f107 020b 	add.w	r2, r7, #11
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2129      	movs	r1, #41	; 0x29
 8001fb6:	f000 fe7b 	bl	8002cb0 <st7735_write_reg>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8001fc2:	210a      	movs	r1, #10
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fe46 	bl	8002c56 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f103 0020 	add.w	r0, r3, #32
 8001fd0:	f107 020b 	add.w	r2, r7, #11
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2136      	movs	r1, #54	; 0x36
 8001fd8:	f000 fe6a 	bl	8002cb0 <st7735_write_reg>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <ST7735_DisplayOn+0xc0>)
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <ST7735_DisplayOn+0xc0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <ST7735_DisplayOn+0xc4>)
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	e006      	b.n	8002010 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <ST7735_DisplayOn+0xc0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <ST7735_DisplayOn+0xc4>)
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800200e:	b2db      	uxtb	r3, r3
 8002010:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3320      	adds	r3, #32
 8002016:	f107 010b 	add.w	r1, r7, #11
 800201a:	2201      	movs	r2, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fe5c 	bl	8002cda <st7735_send_data>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	2400025c 	.word	0x2400025c
 8002044:	24000078 	.word	0x24000078

08002048 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0020 	add.w	r0, r3, #32
 800205a:	f107 020b 	add.w	r2, r7, #11
 800205e:	2300      	movs	r3, #0
 8002060:	2113      	movs	r1, #19
 8002062:	f000 fe25 	bl	8002cb0 <st7735_write_reg>
 8002066:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002068:	210a      	movs	r1, #10
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fdf3 	bl	8002c56 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0020 	add.w	r0, r3, #32
 8002076:	f107 020b 	add.w	r2, r7, #11
 800207a:	2300      	movs	r3, #0
 800207c:	2128      	movs	r1, #40	; 0x28
 800207e:	f000 fe17 	bl	8002cb0 <st7735_write_reg>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800208a:	210a      	movs	r1, #10
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fde2 	bl	8002c56 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f103 0020 	add.w	r0, r3, #32
 8002098:	f107 020b 	add.w	r2, r7, #11
 800209c:	2300      	movs	r3, #0
 800209e:	2136      	movs	r1, #54	; 0x36
 80020a0:	f000 fe06 	bl	8002cb0 <st7735_write_reg>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <ST7735_DisplayOff+0xc0>)
 80020ae:	7b1b      	ldrb	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <ST7735_DisplayOff+0xc0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <ST7735_DisplayOff+0xc4>)
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e006      	b.n	80020d8 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <ST7735_DisplayOff+0xc0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <ST7735_DisplayOff+0xc4>)
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3320      	adds	r3, #32
 80020de:	f107 010b 	add.w	r1, r7, #11
 80020e2:	2201      	movs	r2, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fdf8 	bl	8002cda <st7735_send_data>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2400025c 	.word	0x2400025c
 800210c:	24000078 	.word	0x24000078

08002110 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <ST7735_SetOrientation+0x1a>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d119      	bne.n	8002192 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7b5b      	ldrb	r3, [r3, #13]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <ST7735_SetOrientation+0x114>)
 8002168:	2250      	movs	r2, #80	; 0x50
 800216a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <ST7735_SetOrientation+0x114>)
 800216e:	22a0      	movs	r2, #160	; 0xa0
 8002170:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002172:	e028      	b.n	80021c6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	7b5b      	ldrb	r3, [r3, #13]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ST7735_SetOrientation+0x40>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7b5b      	ldrb	r3, [r3, #13]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d120      	bne.n	80021c6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <ST7735_SetOrientation+0x114>)
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <ST7735_SetOrientation+0x114>)
 800218c:	22a0      	movs	r2, #160	; 0xa0
 800218e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002190:	e019      	b.n	80021c6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7b5b      	ldrb	r3, [r3, #13]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d106      	bne.n	80021a8 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <ST7735_SetOrientation+0x114>)
 800219c:	22a0      	movs	r2, #160	; 0xa0
 800219e:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021a2:	2250      	movs	r2, #80	; 0x50
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e00f      	b.n	80021c8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7b5b      	ldrb	r3, [r3, #13]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <ST7735_SetOrientation+0x74>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7b5b      	ldrb	r3, [r3, #13]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d107      	bne.n	80021c8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021ba:	22a0      	movs	r2, #160	; 0xa0
 80021bc:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	e000      	b.n	80021c8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80021c6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021ce:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7b1a      	ldrb	r2, [r3, #12]
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021d6:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7b5a      	ldrb	r2, [r3, #13]
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021de:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fbdf 	bl	80029b4 <ST7735_SetDisplayWindow>
 80021f6:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <ST7735_SetOrientation+0x114>)
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <ST7735_SetOrientation+0x114>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a15      	ldr	r2, [pc, #84]	; (800225c <ST7735_SetOrientation+0x118>)
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e006      	b.n	8002224 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <ST7735_SetOrientation+0x114>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <ST7735_SetOrientation+0x118>)
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002222:	b2db      	uxtb	r3, r3
 8002224:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0020 	add.w	r0, r3, #32
 800222c:	f107 020b 	add.w	r2, r7, #11
 8002230:	2301      	movs	r3, #1
 8002232:	2136      	movs	r1, #54	; 0x36
 8002234:	f000 fd3c 	bl	8002cb0 <st7735_write_reg>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2400025c 	.word	0x2400025c
 800225c:	24000078 	.word	0x24000078

08002260 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <ST7735_GetOrientation+0x20>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	2400025c 	.word	0x2400025c

08002284 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <ST7735_SetCursor+0x174>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d821      	bhi.n	80022dc <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002298:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <ST7735_SetCursor+0x174>)
 800229a:	7b5b      	ldrb	r3, [r3, #13]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10e      	bne.n	80022be <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80022a0:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <ST7735_SetCursor+0x174>)
 80022a2:	7b1b      	ldrb	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	331a      	adds	r3, #26
 80022ac:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3301      	adds	r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	e033      	b.n	800231e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3318      	adds	r3, #24
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e02f      	b.n	800231e <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <ST7735_SetCursor+0x174>)
 80022c0:	7b5b      	ldrb	r3, [r3, #13]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d12b      	bne.n	800231e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80022c6:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <ST7735_SetCursor+0x174>)
 80022c8:	7b1b      	ldrb	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d127      	bne.n	800231e <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3302      	adds	r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	e020      	b.n	800231e <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <ST7735_SetCursor+0x174>)
 80022de:	7b5b      	ldrb	r3, [r3, #13]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10e      	bne.n	8002302 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <ST7735_SetCursor+0x174>)
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <ST7735_SetCursor+0x76>
				Xpos += 1;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	331a      	adds	r3, #26
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	e011      	b.n	800231e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3318      	adds	r3, #24
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	e00d      	b.n	800231e <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <ST7735_SetCursor+0x174>)
 8002304:	7b5b      	ldrb	r3, [r3, #13]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d109      	bne.n	800231e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <ST7735_SetCursor+0x174>)
 800230c:	7b1b      	ldrb	r3, [r3, #12]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3301      	adds	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3302      	adds	r3, #2
 800231c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f103 0020 	add.w	r0, r3, #32
 8002324:	f107 0213 	add.w	r2, r7, #19
 8002328:	2300      	movs	r3, #0
 800232a:	212a      	movs	r1, #42	; 0x2a
 800232c:	f000 fcc0 	bl	8002cb0 <st7735_write_reg>
 8002330:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b2db      	uxtb	r3, r3
 8002338:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3320      	adds	r3, #32
 800233e:	f107 0113 	add.w	r1, r7, #19
 8002342:	2201      	movs	r2, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fcc8 	bl	8002cda <st7735_send_data>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3320      	adds	r3, #32
 800235c:	f107 0113 	add.w	r1, r7, #19
 8002360:	2201      	movs	r2, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fcb9 	bl	8002cda <st7735_send_data>
 8002368:	4602      	mov	r2, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f103 0020 	add.w	r0, r3, #32
 8002376:	f107 0213 	add.w	r2, r7, #19
 800237a:	2300      	movs	r3, #0
 800237c:	212b      	movs	r1, #43	; 0x2b
 800237e:	f000 fc97 	bl	8002cb0 <st7735_write_reg>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	4413      	add	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b2db      	uxtb	r3, r3
 8002390:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3320      	adds	r3, #32
 8002396:	f107 0113 	add.w	r1, r7, #19
 800239a:	2201      	movs	r2, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fc9c 	bl	8002cda <st7735_send_data>
 80023a2:	4602      	mov	r2, r0
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4413      	add	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3320      	adds	r3, #32
 80023b4:	f107 0113 	add.w	r1, r7, #19
 80023b8:	2201      	movs	r2, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fc8d 	bl	8002cda <st7735_send_data>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4413      	add	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f103 0020 	add.w	r0, r3, #32
 80023ce:	f107 0213 	add.w	r2, r7, #19
 80023d2:	2300      	movs	r3, #0
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	f000 fc6b 	bl	8002cb0 <st7735_write_reg>
 80023da:	4602      	mov	r2, r0
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ec:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80023ee:	697b      	ldr	r3, [r7, #20]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2400025c 	.word	0x2400025c

080023fc <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b090      	sub	sp, #64	; 0x40
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	330a      	adds	r3, #10
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	330b      	adds	r3, #11
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	441a      	add	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	041b      	lsls	r3, r3, #16
 800242c:	441a      	add	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	330d      	adds	r3, #13
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	4413      	add	r3, r2
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3312      	adds	r3, #18
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3313      	adds	r3, #19
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	441a      	add	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	441a      	add	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3315      	adds	r3, #21
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	4413      	add	r3, r2
 8002460:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3316      	adds	r3, #22
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	3317      	adds	r3, #23
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	441a      	add	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3318      	adds	r3, #24
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	441a      	add	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3319      	adds	r3, #25
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4413      	add	r3, r2
 8002488:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3302      	adds	r3, #2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3303      	adds	r3, #3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	441a      	add	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3304      	adds	r3, #4
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	441a      	add	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	3305      	adds	r3, #5
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	4413      	add	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	4413      	add	r3, r2
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	1ad2      	subs	r2, r2, r3
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa6a 	bl	80029b4 <ST7735_SetDisplayWindow>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
 80024ec:	e087      	b.n	80025fe <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80024f0:	7b1b      	ldrb	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80024f6:	4b44      	ldr	r3, [pc, #272]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4a44      	ldr	r2, [pc, #272]	; (800260c <ST7735_DrawBitmap+0x210>)
 80024fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002500:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	e005      	b.n	8002516 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <ST7735_DrawBitmap+0x210>)
 8002510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002514:	b2db      	uxtb	r3, r3
 8002516:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f103 0020 	add.w	r0, r3, #32
 800251e:	f107 0213 	add.w	r2, r7, #19
 8002522:	2301      	movs	r3, #1
 8002524:	2136      	movs	r1, #54	; 0x36
 8002526:	f000 fbc3 	bl	8002cb0 <st7735_write_reg>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
 8002536:	e062      	b.n	80025fe <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fea1 	bl	8002284 <ST7735_SetCursor>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
 800254e:	e056      	b.n	80025fe <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3320      	adds	r3, #32
 8002560:	f107 0114 	add.w	r1, r7, #20
 8002564:	2202      	movs	r2, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fbb7 	bl	8002cda <st7735_send_data>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002578:	e009      	b.n	800258e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	3302      	adds	r3, #2
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	3302      	adds	r3, #2
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3e0      	bcc.n	8002550 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 8002590:	7b1b      	ldrb	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <ST7735_DrawBitmap+0x210>)
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e006      	b.n	80025ba <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a16      	ldr	r2, [pc, #88]	; (800260c <ST7735_DrawBitmap+0x210>)
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f103 0020 	add.w	r0, r3, #32
 80025c2:	f107 0213 	add.w	r2, r7, #19
 80025c6:	2301      	movs	r3, #1
 80025c8:	2136      	movs	r1, #54	; 0x36
 80025ca:	f000 fb71 	bl	8002cb0 <st7735_write_reg>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e010      	b.n	80025fe <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <ST7735_DrawBitmap+0x20c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9e1 	bl	80029b4 <ST7735_SetDisplayWindow>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002600:	4618      	mov	r0, r3
 8002602:	3738      	adds	r7, #56	; 0x38
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2400025c 	.word	0x2400025c
 800260c:	24000078 	.word	0x24000078

08002610 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	441a      	add	r2, r3
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <ST7735_FillRGBRect+0xcc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d806      	bhi.n	8002642 <ST7735_FillRGBRect+0x32>
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	441a      	add	r2, r3
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <ST7735_FillRGBRect+0xcc>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	d903      	bls.n	800264a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e042      	b.n	80026d0 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e03b      	b.n	80026c8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	461a      	mov	r2, r3
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff fe12 	bl	8002284 <ST7735_SetCursor>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e029      	b.n	80026c2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e013      	b.n	800269c <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	7811      	ldrb	r1, [r2, #0]
 800267c:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <ST7735_FillRGBRect+0xd0>)
 800267e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	3301      	adds	r3, #1
 800268a:	7811      	ldrb	r1, [r2, #0]
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <ST7735_FillRGBRect+0xd0>)
 800268e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	3302      	adds	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3e7      	bcc.n	8002674 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f103 0020 	add.w	r0, r3, #32
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	461a      	mov	r2, r3
 80026b0:	490b      	ldr	r1, [pc, #44]	; (80026e0 <ST7735_FillRGBRect+0xd0>)
 80026b2:	f000 fb12 	bl	8002cda <st7735_send_data>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3301      	adds	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3bf      	bcc.n	8002650 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80026d0:	69fb      	ldr	r3, [r7, #28]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2400025c 	.word	0x2400025c
 80026e0:	2400026c 	.word	0x2400026c

080026e4 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	441a      	add	r2, r3
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <ST7735_DrawHLine+0x98>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d903      	bls.n	800270c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e032      	b.n	8002772 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fdb7 	bl	8002284 <ST7735_SetCursor>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e026      	b.n	8002772 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e010      	b.n	800274c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	0a1a      	lsrs	r2, r3, #8
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	b2d1      	uxtb	r1, r2
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <ST7735_DrawHLine+0x9c>)
 8002736:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	3301      	adds	r3, #1
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	b2d1      	uxtb	r1, r2
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <ST7735_DrawHLine+0x9c>)
 8002744:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3301      	adds	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3ea      	bcc.n	800272a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f103 0020 	add.w	r0, r3, #32
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	461a      	mov	r2, r3
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <ST7735_DrawHLine+0x9c>)
 8002762:	f000 faba 	bl	8002cda <st7735_send_data>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002772:	697b      	ldr	r3, [r7, #20]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2400025c 	.word	0x2400025c
 8002780:	240004ec 	.word	0x240004ec

08002784 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	441a      	add	r2, r3
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <ST7735_DrawVLine+0x64>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d903      	bls.n	80027ac <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e018      	b.n	80027de <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e011      	b.n	80027d6 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	441a      	add	r2, r3
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f841 	bl	8002844 <ST7735_SetPixel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	617b      	str	r3, [r7, #20]
        break;
 80027ce:	e006      	b.n	80027de <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3301      	adds	r3, #1
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3e9      	bcc.n	80027b2 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 80027de:	697b      	ldr	r3, [r7, #20]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2400025c 	.word	0x2400025c

080027ec <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e014      	b.n	8002832 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ff66 	bl	80026e4 <ST7735_DrawHLine>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	61fb      	str	r3, [r7, #28]
      break;
 8002824:	e009      	b.n	800283a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	3301      	adds	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	429a      	cmp	r2, r3
 8002838:	d3e6      	bcc.n	8002808 <ST7735_FillRect+0x1c>
  }

  return ret;
 800283a:	69fb      	ldr	r3, [r7, #28]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b29b      	uxth	r3, r3
 800285e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29a      	uxth	r2, r3
 8002866:	8a7b      	ldrh	r3, [r7, #18]
 8002868:	4313      	orrs	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <ST7735_SetPixel+0x84>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d204      	bcs.n	8002882 <ST7735_SetPixel+0x3e>
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <ST7735_SetPixel+0x84>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d303      	bcc.n	800288a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e019      	b.n	80028be <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fcf8 	bl	8002284 <ST7735_SetCursor>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e00d      	b.n	80028be <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3320      	adds	r3, #32
 80028a6:	f107 0112 	add.w	r1, r7, #18
 80028aa:	2202      	movs	r2, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa14 	bl	8002cda <st7735_send_data>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80028be:	697b      	ldr	r3, [r7, #20]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2400025c 	.word	0x2400025c

080028cc <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fcd0 	bl	8002284 <ST7735_SetCursor>
 80028e4:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3320      	adds	r3, #32
 80028ea:	f107 0211 	add.w	r2, r7, #17
 80028ee:	212e      	movs	r1, #46	; 0x2e
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f9ca 	bl	8002c8a <st7735_read_reg>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3320      	adds	r3, #32
 8002902:	f107 0111 	add.w	r1, r7, #17
 8002906:	2201      	movs	r2, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f9f8 	bl	8002cfe <st7735_recv_data>
 800290e:	4602      	mov	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3320      	adds	r3, #32
 800291a:	f107 0113 	add.w	r1, r7, #19
 800291e:	2201      	movs	r2, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f9ec 	bl	8002cfe <st7735_recv_data>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	4413      	add	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3320      	adds	r3, #32
 8002932:	f107 0112 	add.w	r1, r7, #18
 8002936:	2201      	movs	r2, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f9e0 	bl	8002cfe <st7735_recv_data>
 800293e:	4602      	mov	r2, r0
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4413      	add	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	461a      	mov	r2, r3
 800294a:	7cbb      	ldrb	r3, [r7, #18]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	441a      	add	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002960:	697b      	ldr	r3, [r7, #20]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <ST7735_GetXSize+0x20>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	2400025c 	.word	0x2400025c

08002990 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <ST7735_GetYSize+0x20>)
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	2400025c 	.word	0x2400025c

080029b4 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80029c2:	4b7d      	ldr	r3, [pc, #500]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d821      	bhi.n	8002a0e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80029ca:	4b7b      	ldr	r3, [pc, #492]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 80029cc:	7b5b      	ldrb	r3, [r3, #13]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10e      	bne.n	80029f0 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80029d2:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 80029d4:	7b1b      	ldrb	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	331a      	adds	r3, #26
 80029de:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3301      	adds	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	e036      	b.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3318      	adds	r3, #24
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	e032      	b.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80029f0:	4b71      	ldr	r3, [pc, #452]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 80029f2:	7b5b      	ldrb	r3, [r3, #13]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d12e      	bne.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 80029fa:	7b1b      	ldrb	r3, [r3, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d12a      	bne.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3302      	adds	r3, #2
 8002a04:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e023      	b.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 8002a10:	7b5b      	ldrb	r3, [r3, #13]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d111      	bne.n	8002a3a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002a16:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 8002a18:	7b1b      	ldrb	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3301      	adds	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	331a      	adds	r3, #26
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	e014      	b.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3318      	adds	r3, #24
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	e00d      	b.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 8002a3c:	7b5b      	ldrb	r3, [r3, #13]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d109      	bne.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <ST7735_SetDisplayWindow+0x204>)
 8002a44:	7b1b      	ldrb	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3302      	adds	r3, #2
 8002a54:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f103 0020 	add.w	r0, r3, #32
 8002a5c:	f107 0213 	add.w	r2, r7, #19
 8002a60:	2300      	movs	r3, #0
 8002a62:	212a      	movs	r1, #42	; 0x2a
 8002a64:	f000 f924 	bl	8002cb0 <st7735_write_reg>
 8002a68:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3320      	adds	r3, #32
 8002a76:	f107 0113 	add.w	r1, r7, #19
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f92c 	bl	8002cda <st7735_send_data>
 8002a82:	4602      	mov	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3320      	adds	r3, #32
 8002a94:	f107 0113 	add.w	r1, r7, #19
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f91d 	bl	8002cda <st7735_send_data>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3320      	adds	r3, #32
 8002aba:	f107 0113 	add.w	r1, r7, #19
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f90a 	bl	8002cda <st7735_send_data>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4413      	add	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	f107 0113 	add.w	r1, r7, #19
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f8f5 	bl	8002cda <st7735_send_data>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f103 0020 	add.w	r0, r3, #32
 8002afe:	f107 0213 	add.w	r2, r7, #19
 8002b02:	2300      	movs	r3, #0
 8002b04:	212b      	movs	r1, #43	; 0x2b
 8002b06:	f000 f8d3 	bl	8002cb0 <st7735_write_reg>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	f107 0113 	add.w	r1, r7, #19
 8002b22:	2201      	movs	r2, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f8d8 	bl	8002cda <st7735_send_data>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	f107 0113 	add.w	r1, r7, #19
 8002b40:	2201      	movs	r2, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f8c9 	bl	8002cda <st7735_send_data>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	4413      	add	r3, r2
 8002b56:	3b01      	subs	r3, #1
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3320      	adds	r3, #32
 8002b62:	f107 0113 	add.w	r1, r7, #19
 8002b66:	2201      	movs	r2, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f8b6 	bl	8002cda <st7735_send_data>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4413      	add	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	f107 0113 	add.w	r1, r7, #19
 8002b90:	2201      	movs	r2, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f8a1 	bl	8002cda <st7735_send_data>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002bac:	697b      	ldr	r3, [r7, #20]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2400025c 	.word	0x2400025c

08002bbc <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	7afa      	ldrb	r2, [r7, #11]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
 8002bda:	4603      	mov	r3, r0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	7af8      	ldrb	r0, [r7, #11]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4798      	blx	r3
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	4798      	blx	r3
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68b8      	ldr	r0, [r7, #8]
 8002c4a:	4798      	blx	r3
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4798      	blx	r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002c6a:	bf00      	nop
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4798      	blx	r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f5      	bhi.n	8002c6c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	460b      	mov	r3, r1
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6910      	ldr	r0, [r2, #16]
 8002ca0:	7af9      	ldrb	r1, [r7, #11]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681c      	ldr	r4, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6918      	ldr	r0, [r3, #16]
 8002cc8:	7af9      	ldrb	r1, [r7, #11]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	47a0      	blx	r4
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}

08002cda <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6910      	ldr	r0, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4798      	blx	r3
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6910      	ldr	r0, [r2, #16]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	f000 f97c 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d30:	f001 f9e8 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_Init+0x68>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	4913      	ldr	r1, [pc, #76]	; (8002d90 <HAL_Init+0x6c>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_Init+0x68>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_Init+0x6c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_Init+0x70>)
 8002d66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d68:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <HAL_Init+0x74>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f814 	bl	8002d9c <HAL_InitTick>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e002      	b.n	8002d84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7e:	f7fd fd75 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	0800801c 	.word	0x0800801c
 8002d94:	24000004 	.word	0x24000004
 8002d98:	24000000 	.word	0x24000000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_InitTick+0x60>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e021      	b.n	8002df4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_InitTick+0x64>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_InitTick+0x60>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f953 	bl	8003072 <HAL_SYSTICK_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00e      	b.n	8002df4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d80a      	bhi.n	8002df2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f000 f92b 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_InitTick+0x68>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2400009c 	.word	0x2400009c
 8002e00:	24000000 	.word	0x24000000
 8002e04:	24000098 	.word	0x24000098

08002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	2400009c 	.word	0x2400009c
 8002e2c:	2400076c 	.word	0x2400076c

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2400076c 	.word	0x2400076c

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff ffee 	bl	8002e30 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_Delay+0x44>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffde 	bl	8002e30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2400009c 	.word	0x2400009c

08002e90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_GetREVID+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0c1b      	lsrs	r3, r3, #16
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	5c001000 	.word	0x5c001000

08002ea8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HAL_GetDEVID+0x18>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	5c001000 	.word	0x5c001000

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00
 8002f08:	05fa0000 	.word	0x05fa0000

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff47 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff5e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff90 	bl	8002f7c <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5f 	bl	8002f28 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffb2 	bl	8002fe4 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_GPIO_Init+0x234>)
 800309c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800309e:	e194      	b.n	80033ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8186 	beq.w	80033c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d005      	beq.n	80030d0 <HAL_GPIO_Init+0x44>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d130      	bne.n	8003132 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003106:	2201      	movs	r2, #1
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 0201 	and.w	r2, r3, #1
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b03      	cmp	r3, #3
 800313c:	d017      	beq.n	800316e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d123      	bne.n	80031c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	69b9      	ldr	r1, [r7, #24]
 80031be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0203 	and.w	r2, r3, #3
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80e0 	beq.w	80033c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_GPIO_Init+0x238>)
 8003206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <HAL_GPIO_Init+0x238>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_GPIO_Init+0x238>)
 8003216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <HAL_GPIO_Init+0x23c>)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3302      	adds	r3, #2
 800322a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <HAL_GPIO_Init+0x240>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d052      	beq.n	80032f4 <HAL_GPIO_Init+0x268>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_GPIO_Init+0x244>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_GPIO_Init+0x22e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_GPIO_Init+0x248>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02b      	beq.n	80032b6 <HAL_GPIO_Init+0x22a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_GPIO_Init+0x24c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d025      	beq.n	80032b2 <HAL_GPIO_Init+0x226>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_GPIO_Init+0x250>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <HAL_GPIO_Init+0x222>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_GPIO_Init+0x254>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d019      	beq.n	80032aa <HAL_GPIO_Init+0x21e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_GPIO_Init+0x258>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_Init+0x21a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_GPIO_Init+0x25c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_GPIO_Init+0x216>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_GPIO_Init+0x260>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_GPIO_Init+0x212>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_GPIO_Init+0x264>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_GPIO_Init+0x20e>
 8003296:	2309      	movs	r3, #9
 8003298:	e02d      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 800329a:	230a      	movs	r3, #10
 800329c:	e02b      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 800329e:	2308      	movs	r3, #8
 80032a0:	e029      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e027      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032a6:	2306      	movs	r3, #6
 80032a8:	e025      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e023      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e021      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e01f      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e01d      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01b      	b.n	80032f6 <HAL_GPIO_Init+0x26a>
 80032be:	bf00      	nop
 80032c0:	58000080 	.word	0x58000080
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58000400 	.word	0x58000400
 80032cc:	58020000 	.word	0x58020000
 80032d0:	58020400 	.word	0x58020400
 80032d4:	58020800 	.word	0x58020800
 80032d8:	58020c00 	.word	0x58020c00
 80032dc:	58021000 	.word	0x58021000
 80032e0:	58021400 	.word	0x58021400
 80032e4:	58021800 	.word	0x58021800
 80032e8:	58021c00 	.word	0x58021c00
 80032ec:	58022000 	.word	0x58022000
 80032f0:	58022400 	.word	0x58022400
 80032f4:	2300      	movs	r3, #0
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f002 0203 	and.w	r2, r2, #3
 80032fc:	0092      	lsls	r2, r2, #2
 80032fe:	4093      	lsls	r3, r2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003306:	4938      	ldr	r1, [pc, #224]	; (80033e8 <HAL_GPIO_Init+0x35c>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800333a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f ae63 	bne.w	80030a0 <HAL_GPIO_Init+0x14>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	3724      	adds	r7, #36	; 0x24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	58000400 	.word	0x58000400

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	58024800 	.word	0x58024800

08003470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_PWREx_ConfigSupply+0x70>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00a      	beq.n	800349a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_PWREx_ConfigSupply+0x70>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e01f      	b.n	80034d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e01d      	b.n	80034d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_PWREx_ConfigSupply+0x70>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 0207 	bic.w	r2, r3, #7
 80034a2:	490f      	ldr	r1, [pc, #60]	; (80034e0 <HAL_PWREx_ConfigSupply+0x70>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034aa:	f7ff fcc1 	bl	8002e30 <HAL_GetTick>
 80034ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b0:	e009      	b.n	80034c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034b2:	f7ff fcbd 	bl	8002e30 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c0:	d901      	bls.n	80034c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_PWREx_ConfigSupply+0x70>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d2:	d1ee      	bne.n	80034b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	58024800 	.word	0x58024800

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f000 bc48 	b.w	8003d88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8088 	beq.w	8003616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b99      	ldr	r3, [pc, #612]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003510:	4b96      	ldr	r3, [pc, #600]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b10      	cmp	r3, #16
 800351a:	d007      	beq.n	800352c <HAL_RCC_OscConfig+0x48>
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	2b18      	cmp	r3, #24
 8003520:	d111      	bne.n	8003546 <HAL_RCC_OscConfig+0x62>
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b8f      	ldr	r3, [pc, #572]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d06d      	beq.n	8003614 <HAL_RCC_OscConfig+0x130>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d169      	bne.n	8003614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f000 bc21 	b.w	8003d88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x7a>
 8003550:	4b86      	ldr	r3, [pc, #536]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a85      	ldr	r2, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e02e      	b.n	80035bc <HAL_RCC_OscConfig+0xd8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x9c>
 8003566:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800356c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7d      	ldr	r2, [pc, #500]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xd8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 800358a:	4b78      	ldr	r3, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b75      	ldr	r3, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a74      	ldr	r2, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xd8>
 80035a4:	4b71      	ldr	r3, [pc, #452]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a70      	ldr	r2, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b6e      	ldr	r3, [pc, #440]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6d      	ldr	r2, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7ff fc34 	bl	8002e30 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7ff fc30 	bl	8002e30 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e3d4      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7ff fc20 	bl	8002e30 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7ff fc1c 	bl	8002e30 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e3c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003606:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x110>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80ca 	beq.w	80037b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003624:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800362e:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <HAL_RCC_OscConfig+0x166>
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	2b18      	cmp	r3, #24
 800363e:	d156      	bne.n	80036ee <HAL_RCC_OscConfig+0x20a>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d151      	bne.n	80036ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364a:	4b48      	ldr	r3, [pc, #288]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e392      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003662:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0219 	bic.w	r2, r3, #25
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	493f      	ldr	r1, [pc, #252]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff fbdc 	bl	8002e30 <HAL_GetTick>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367c:	f7ff fbd8 	bl	8002e30 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e37c      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	f7ff fbf9 	bl	8002e90 <HAL_GetREVID>
 800369e:	4603      	mov	r3, r0
 80036a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d817      	bhi.n	80036d8 <HAL_RCC_OscConfig+0x1f4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d108      	bne.n	80036c2 <HAL_RCC_OscConfig+0x1de>
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036b8:	4a2c      	ldr	r2, [pc, #176]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c0:	e07a      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	031b      	lsls	r3, r3, #12
 80036d0:	4926      	ldr	r1, [pc, #152]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d6:	e06f      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	4921      	ldr	r1, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ec:	e064      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d047      	beq.n	8003786 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_RCC_OscConfig+0x288>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 0219 	bic.w	r2, r3, #25
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	491a      	ldr	r1, [pc, #104]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7ff fb92 	bl	8002e30 <HAL_GetTick>
 800370c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003710:	f7ff fb8e 	bl	8002e30 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e332      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	f7ff fbaf 	bl	8002e90 <HAL_GetREVID>
 8003732:	4603      	mov	r3, r0
 8003734:	f241 0203 	movw	r2, #4099	; 0x1003
 8003738:	4293      	cmp	r3, r2
 800373a:	d819      	bhi.n	8003770 <HAL_RCC_OscConfig+0x28c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d108      	bne.n	8003756 <HAL_RCC_OscConfig+0x272>
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <HAL_RCC_OscConfig+0x288>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	6053      	str	r3, [r2, #4]
 8003754:	e030      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	031b      	lsls	r3, r3, #12
 8003764:	4901      	ldr	r1, [pc, #4]	; (800376c <HAL_RCC_OscConfig+0x288>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 800376a:	e025      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
 800376c:	58024400 	.word	0x58024400
 8003770:	4b9a      	ldr	r3, [pc, #616]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	4997      	ldr	r1, [pc, #604]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b95      	ldr	r3, [pc, #596]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a94      	ldr	r2, [pc, #592]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7ff fb4d 	bl	8002e30 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7ff fb49 	bl	8002e30 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e2ed      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ac:	4b8b      	ldr	r3, [pc, #556]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a9 	beq.w	8003918 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037d0:	4b82      	ldr	r3, [pc, #520]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d007      	beq.n	80037ec <HAL_RCC_OscConfig+0x308>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b18      	cmp	r3, #24
 80037e0:	d13a      	bne.n	8003858 <HAL_RCC_OscConfig+0x374>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d135      	bne.n	8003858 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ec:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_OscConfig+0x320>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e2c1      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003804:	f7ff fb44 	bl	8002e90 <HAL_GetREVID>
 8003808:	4603      	mov	r3, r0
 800380a:	f241 0203 	movw	r2, #4099	; 0x1003
 800380e:	4293      	cmp	r3, r2
 8003810:	d817      	bhi.n	8003842 <HAL_RCC_OscConfig+0x35e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	2b20      	cmp	r3, #32
 8003818:	d108      	bne.n	800382c <HAL_RCC_OscConfig+0x348>
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003822:	4a6e      	ldr	r2, [pc, #440]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003828:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800382a:	e075      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800382c:	4b6b      	ldr	r3, [pc, #428]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	069b      	lsls	r3, r3, #26
 800383a:	4968      	ldr	r1, [pc, #416]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003840:	e06a      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003842:	4b66      	ldr	r3, [pc, #408]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	4962      	ldr	r1, [pc, #392]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003852:	4313      	orrs	r3, r2
 8003854:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003856:	e05f      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d042      	beq.n	80038e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003860:	4b5e      	ldr	r3, [pc, #376]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5d      	ldr	r2, [pc, #372]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7ff fae0 	bl	8002e30 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003874:	f7ff fadc 	bl	8002e30 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e280      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003886:	4b55      	ldr	r3, [pc, #340]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003892:	f7ff fafd 	bl	8002e90 <HAL_GetREVID>
 8003896:	4603      	mov	r3, r0
 8003898:	f241 0203 	movw	r2, #4099	; 0x1003
 800389c:	4293      	cmp	r3, r2
 800389e:	d817      	bhi.n	80038d0 <HAL_RCC_OscConfig+0x3ec>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x3d6>
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	e02e      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
 80038ba:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	069b      	lsls	r3, r3, #26
 80038c8:	4944      	ldr	r1, [pc, #272]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	e023      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	493f      	ldr	r1, [pc, #252]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60cb      	str	r3, [r1, #12]
 80038e4:	e018      	b.n	8003918 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7ff fa9d 	bl	8002e30 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038fa:	f7ff fa99 	bl	8002e30 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e23d      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d036      	beq.n	8003992 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d019      	beq.n	8003960 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7ff fa7a 	bl	8002e30 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7ff fa76 	bl	8002e30 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e21a      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x45c>
 800395e:	e018      	b.n	8003992 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7ff fa60 	bl	8002e30 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7ff fa5c 	bl	8002e30 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e200      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d039      	beq.n	8003a12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039b2:	f7ff fa3d 	bl	8002e30 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ba:	f7ff fa39 	bl	8002e30 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1dd      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x4d6>
 80039d8:	e01b      	b.n	8003a12 <HAL_RCC_OscConfig+0x52e>
 80039da:	bf00      	nop
 80039dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039e0:	4b9b      	ldr	r3, [pc, #620]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a9a      	ldr	r2, [pc, #616]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039ec:	f7ff fa20 	bl	8002e30 <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f4:	f7ff fa1c 	bl	8002e30 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a06:	4b92      	ldr	r3, [pc, #584]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8081 	beq.w	8003b22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a20:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <HAL_RCC_OscConfig+0x770>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a8b      	ldr	r2, [pc, #556]	; (8003c54 <HAL_RCC_OscConfig+0x770>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a2c:	f7ff fa00 	bl	8002e30 <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7ff f9fc 	bl	8002e30 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1a0      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	4b83      	ldr	r3, [pc, #524]	; (8003c54 <HAL_RCC_OscConfig+0x770>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d106      	bne.n	8003a68 <HAL_RCC_OscConfig+0x584>
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6713      	str	r3, [r2, #112]	; 0x70
 8003a66:	e02d      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5e0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x5a6>
 8003a70:	4b77      	ldr	r3, [pc, #476]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a76      	ldr	r2, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	4b74      	ldr	r3, [pc, #464]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a73      	ldr	r2, [pc, #460]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5e0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x5c8>
 8003a92:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a6b      	ldr	r2, [pc, #428]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5e0>
 8003aac:	4b68      	ldr	r3, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	4b65      	ldr	r3, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a64      	ldr	r2, [pc, #400]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	f023 0304 	bic.w	r3, r3, #4
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d015      	beq.n	8003af8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7ff f9b0 	bl	8002e30 <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7ff f9ac 	bl	8002e30 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e14e      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aea:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ee      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x5f0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7ff f99a 	bl	8002e30 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7ff f996 	bl	8002e30 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e138      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ee      	bne.n	8003b00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 812d 	beq.w	8003d86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b2c:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b34:	2b18      	cmp	r3, #24
 8003b36:	f000 80bd 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 809e 	bne.w	8003c80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7ff f96e 	bl	8002e30 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7ff f96a 	bl	8002e30 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e10e      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x774>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4931      	ldr	r1, [pc, #196]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	3b01      	subs	r3, #1
 8003b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	025b      	lsls	r3, r3, #9
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	3b01      	subs	r3, #1
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bc0:	4923      	ldr	r1, [pc, #140]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCC_OscConfig+0x778>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bde:	00d2      	lsls	r2, r2, #3
 8003be0:	491b      	ldr	r1, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f023 020c 	bic.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4917      	ldr	r1, [pc, #92]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	f023 0202 	bic.w	r2, r3, #2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	4912      	ldr	r1, [pc, #72]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a10      	ldr	r2, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7ff f8f3 	bl	8002e30 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c4c:	e011      	b.n	8003c72 <HAL_RCC_OscConfig+0x78e>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58024800 	.word	0x58024800
 8003c58:	fffffc0c 	.word	0xfffffc0c
 8003c5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7ff f8e6 	bl	8002e30 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e08a      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x77c>
 8003c7e:	e082      	b.n	8003d86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a42      	ldr	r2, [pc, #264]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7ff f8d0 	bl	8002e30 <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7ff f8cc 	bl	8002e30 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e070      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca6:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x7b0>
 8003cb2:	e068      	b.n	8003d86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cba:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d031      	beq.n	8003d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 0203 	and.w	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d12a      	bne.n	8003d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d122      	bne.n	8003d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d11a      	bne.n	8003d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0a5b      	lsrs	r3, r3, #9
 8003cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d111      	bne.n	8003d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d108      	bne.n	8003d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e02b      	b.n	8003d88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d01f      	beq.n	8003d86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d52:	f7ff f86d 	bl	8002e30 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d58:	bf00      	nop
 8003d5a:	f7ff f869 	bl	8002e30 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d0f9      	beq.n	8003d5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCC_OscConfig+0x8b0>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d72:	00d2      	lsls	r2, r2, #3
 8003d74:	4906      	ldr	r1, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_RCC_OscConfig+0x8ac>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	58024400 	.word	0x58024400
 8003d94:	ffff0007 	.word	0xffff0007

08003d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e19c      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d910      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b87      	ldr	r3, [pc, #540]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 020f 	bic.w	r2, r3, #15
 8003dc2:	4985      	ldr	r1, [pc, #532]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b83      	ldr	r3, [pc, #524]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e184      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d908      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003df8:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4975      	ldr	r1, [pc, #468]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d908      	bls.n	8003e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	496a      	ldr	r1, [pc, #424]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d908      	bls.n	8003e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	495e      	ldr	r1, [pc, #376]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d010      	beq.n	8003e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d908      	bls.n	8003e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e82:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4953      	ldr	r1, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d908      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f023 020f 	bic.w	r2, r3, #15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4947      	ldr	r1, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d055      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	4940      	ldr	r1, [pc, #256]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ee8:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d121      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0f6      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d115      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0ea      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f18:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0de      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0d6      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f023 0207 	bic.w	r2, r3, #7
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4925      	ldr	r1, [pc, #148]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4a:	f7fe ff71 	bl	8002e30 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f52:	f7fe ff6d 	bl	8002e30 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0be      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f68:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d1eb      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d208      	bcs.n	8003fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d214      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 020f 	bic.w	r2, r3, #15
 8003fbe:	4906      	ldr	r1, [pc, #24]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_RCC_ClockConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e086      	b.n	80040e6 <HAL_RCC_ClockConfig+0x34e>
 8003fd8:	52002000 	.word	0x52002000
 8003fdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d208      	bcs.n	800400e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	4939      	ldr	r1, [pc, #228]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 800400a:	4313      	orrs	r3, r2
 800400c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004026:	429a      	cmp	r2, r3
 8004028:	d208      	bcs.n	800403c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	492e      	ldr	r1, [pc, #184]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d010      	beq.n	800406a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004054:	429a      	cmp	r2, r3
 8004056:	d208      	bcs.n	800406a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4922      	ldr	r1, [pc, #136]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8004066:	4313      	orrs	r3, r2
 8004068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d010      	beq.n	8004098 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004082:	429a      	cmp	r2, r3
 8004084:	d208      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4917      	ldr	r1, [pc, #92]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 8004094:	4313      	orrs	r3, r2
 8004096:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004098:	f000 f834 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	4912      	ldr	r1, [pc, #72]	; (80040f4 <HAL_RCC_ClockConfig+0x35c>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_RCC_ClockConfig+0x358>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <HAL_RCC_ClockConfig+0x35c>)
 80040c0:	5cd3      	ldrb	r3, [r2, r3]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_RCC_ClockConfig+0x360>)
 80040ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x364>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x368>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fe5e 	bl	8002d9c <HAL_InitTick>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	0800801c 	.word	0x0800801c
 80040f8:	24000004 	.word	0x24000004
 80040fc:	24000000 	.word	0x24000000
 8004100:	24000098 	.word	0x24000098

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410a:	4bb3      	ldr	r3, [pc, #716]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004112:	2b18      	cmp	r3, #24
 8004114:	f200 8155 	bhi.w	80043c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004185 	.word	0x08004185
 8004124:	080043c3 	.word	0x080043c3
 8004128:	080043c3 	.word	0x080043c3
 800412c:	080043c3 	.word	0x080043c3
 8004130:	080043c3 	.word	0x080043c3
 8004134:	080043c3 	.word	0x080043c3
 8004138:	080043c3 	.word	0x080043c3
 800413c:	080043c3 	.word	0x080043c3
 8004140:	080041ab 	.word	0x080041ab
 8004144:	080043c3 	.word	0x080043c3
 8004148:	080043c3 	.word	0x080043c3
 800414c:	080043c3 	.word	0x080043c3
 8004150:	080043c3 	.word	0x080043c3
 8004154:	080043c3 	.word	0x080043c3
 8004158:	080043c3 	.word	0x080043c3
 800415c:	080043c3 	.word	0x080043c3
 8004160:	080041b1 	.word	0x080041b1
 8004164:	080043c3 	.word	0x080043c3
 8004168:	080043c3 	.word	0x080043c3
 800416c:	080043c3 	.word	0x080043c3
 8004170:	080043c3 	.word	0x080043c3
 8004174:	080043c3 	.word	0x080043c3
 8004178:	080043c3 	.word	0x080043c3
 800417c:	080043c3 	.word	0x080043c3
 8004180:	080041b7 	.word	0x080041b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004184:	4b94      	ldr	r3, [pc, #592]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004190:	4b91      	ldr	r3, [pc, #580]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	4a90      	ldr	r2, [pc, #576]	; (80043dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
 80041a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80041a2:	e111      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041a4:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041a6:	61bb      	str	r3, [r7, #24]
      break;
 80041a8:	e10e      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80041aa:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041ac:	61bb      	str	r3, [r7, #24]
      break;
 80041ae:	e10b      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80041b0:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041b2:	61bb      	str	r3, [r7, #24]
      break;
 80041b4:	e108      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041b6:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80041c0:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041d6:	4b80      	ldr	r3, [pc, #512]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80e1 	beq.w	80043bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	f000 8083 	beq.w	8004308 <HAL_RCC_GetSysClockFreq+0x204>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b02      	cmp	r3, #2
 8004206:	f200 80a1 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x248>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x114>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d056      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004216:	e099      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004218:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02d      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004224:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	08db      	lsrs	r3, r3, #3
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424e:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800427e:	e087      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042c2:	e065      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004306:	e043      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a02 	vldr	s12, [r7, #8]
 800432e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800434a:	e021      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800438e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	0a5b      	lsrs	r3, r3, #9
 8004396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439a:	3301      	adds	r3, #1
 800439c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b4:	ee17 3a90 	vmov	r3, s15
 80043b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043c4:	61bb      	str	r3, [r7, #24]
      break;
 80043c6:	bf00      	nop
  }

  return sysclockfreq;
 80043c8:	69bb      	ldr	r3, [r7, #24]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
 80043dc:	03d09000 	.word	0x03d09000
 80043e0:	003d0900 	.word	0x003d0900
 80043e4:	017d7840 	.word	0x017d7840
 80043e8:	46000000 	.word	0x46000000
 80043ec:	4c742400 	.word	0x4c742400
 80043f0:	4a742400 	.word	0x4a742400
 80043f4:	4bbebc20 	.word	0x4bbebc20

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b0ca      	sub	sp, #296	; 0x128
 80043fe:	af00      	add	r7, sp, #0
 8004400:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800441c:	2500      	movs	r5, #0
 800441e:	ea54 0305 	orrs.w	r3, r4, r5
 8004422:	d049      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800442e:	d02f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004430:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004434:	d828      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800443a:	d01a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800443c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004440:	d822      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444a:	d007      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800444c:	e01c      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444e:	4bb8      	ldr	r3, [pc, #736]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	4ab7      	ldr	r2, [pc, #732]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800445a:	e01a      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004460:	3308      	adds	r3, #8
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f9d1 	bl	800580c <RCCEx_PLL2_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004470:	e00f      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	3328      	adds	r3, #40	; 0x28
 8004478:	2102      	movs	r1, #2
 800447a:	4618      	mov	r0, r3
 800447c:	f001 fa78 	bl	8005970 <RCCEx_PLL3_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004486:	e004      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800449a:	4ba5      	ldr	r3, [pc, #660]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a8:	4aa1      	ldr	r2, [pc, #644]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6513      	str	r3, [r2, #80]	; 0x50
 80044ae:	e003      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80044c4:	f04f 0900 	mov.w	r9, #0
 80044c8:	ea58 0309 	orrs.w	r3, r8, r9
 80044cc:	d047      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d82a      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044f5 	.word	0x080044f5
 80044e4:	08004503 	.word	0x08004503
 80044e8:	08004519 	.word	0x08004519
 80044ec:	08004537 	.word	0x08004537
 80044f0:	08004537 	.word	0x08004537
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f4:	4b8e      	ldr	r3, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a8d      	ldr	r2, [pc, #564]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004500:	e01a      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004506:	3308      	adds	r3, #8
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f001 f97e 	bl	800580c <RCCEx_PLL2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004516:	e00f      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	3328      	adds	r3, #40	; 0x28
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fa25 	bl	8005970 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800452c:	e004      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004540:	4b7b      	ldr	r3, [pc, #492]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	f023 0107 	bic.w	r1, r3, #7
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	4a78      	ldr	r2, [pc, #480]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004550:	430b      	orrs	r3, r1
 8004552:	6513      	str	r3, [r2, #80]	; 0x50
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800456a:	f04f 0b00 	mov.w	fp, #0
 800456e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004572:	d04c      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d030      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004584:	d829      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004586:	2bc0      	cmp	r3, #192	; 0xc0
 8004588:	d02d      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800458a:	2bc0      	cmp	r3, #192	; 0xc0
 800458c:	d825      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d018      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d821      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800459e:	e01c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b63      	ldr	r3, [pc, #396]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a62      	ldr	r2, [pc, #392]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045ac:	e01c      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	3308      	adds	r3, #8
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 f928 	bl	800580c <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045c2:	e011      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	3328      	adds	r3, #40	; 0x28
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 f9cf 	bl	8005970 <RCCEx_PLL3_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80045f0:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	4a4c      	ldr	r2, [pc, #304]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004600:	430b      	orrs	r3, r1
 8004602:	6513      	str	r3, [r2, #80]	; 0x50
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800461a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004624:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d053      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800463a:	d035      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800463c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004640:	d82e      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004642:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004646:	d031      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004648:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800464c:	d828      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004652:	d01a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004658:	d822      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800465e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004662:	d007      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004664:	e01c      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	4a31      	ldr	r2, [pc, #196]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800466c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004670:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004672:	e01c      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	3308      	adds	r3, #8
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f8c5 	bl	800580c <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	3328      	adds	r3, #40	; 0x28
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f96c 	bl	8005970 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
 80046cc:	e003      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80046e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d056      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004702:	d038      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004708:	d831      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800470a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800470e:	d034      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004714:	d82b      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471a:	d01d      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800471c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004720:	d825      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800472c:	e01f      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800472e:	bf00      	nop
 8004730:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4ba2      	ldr	r3, [pc, #648]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	4aa1      	ldr	r2, [pc, #644]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004740:	e01c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	3308      	adds	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f85e 	bl	800580c <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	3328      	adds	r3, #40	; 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f905 	bl	8005970 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004784:	4b8e      	ldr	r3, [pc, #568]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004790:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004794:	4a8a      	ldr	r2, [pc, #552]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6593      	str	r3, [r2, #88]	; 0x58
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80047b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d03a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d01f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80047ce:	2b30      	cmp	r3, #48	; 0x30
 80047d0:	d819      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d00c      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d815      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d019      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d111      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e2:	4b77      	ldr	r3, [pc, #476]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	4a76      	ldr	r2, [pc, #472]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80047ee:	e011      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f4:	3308      	adds	r3, #8
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f807 	bl	800580c <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800480c:	e002      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800481c:	4b68      	ldr	r3, [pc, #416]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004820:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800482c:	430b      	orrs	r3, r1
 800482e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004846:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004850:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d051      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004864:	d035      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486a:	d82e      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800486c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004870:	d031      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004876:	d828      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d01a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004882:	d822      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d007      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800488e:	e01c      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800489c:	e01c      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a2:	3308      	adds	r3, #8
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 ffb0 	bl	800580c <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	3328      	adds	r3, #40	; 0x28
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f857 	bl	8005970 <RCCEx_PLL3_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048c8:	e006      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048d0:	e002      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80048d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6513      	str	r3, [r2, #80]	; 0x50
 80048f4:	e003      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800490a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800490e:	2300      	movs	r3, #0
 8004910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004914:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004918:	460b      	mov	r3, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	d056      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d033      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800492a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800492e:	d82c      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004934:	d02f      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800493a:	d826      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800493c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004940:	d02b      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004946:	d820      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800494c:	d012      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800494e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004952:	d81a      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d022      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d115      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f000 ff50 	bl	800580c <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004972:	e015      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fff7 	bl	8005970 <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004988:	e00a      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004990:	e006      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800499e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b6:	4a02      	ldr	r2, [pc, #8]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6513      	str	r3, [r2, #80]	; 0x50
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80049d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d055      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f8:	d033      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80049fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049fe:	d82c      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a04:	d02f      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d826      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a10:	d02b      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a16:	d820      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1c:	d012      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a22:	d81a      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d022      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2c:	d115      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	3308      	adds	r3, #8
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fee8 	bl	800580c <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a42:	e015      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 ff8f 	bl	8005970 <RCCEx_PLL3_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a58:	e00a      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a78:	4ba3      	ldr	r3, [pc, #652]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a88:	4a9f      	ldr	r2, [pc, #636]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d037      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac8:	d816      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4b8c      	ldr	r3, [pc, #560]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4a8b      	ldr	r2, [pc, #556]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ae0:	e00f      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fe8e 	bl	800580c <RCCEx_PLL2_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004af6:	e004      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a7b      	ldr	r2, [pc, #492]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	6513      	str	r3, [r2, #80]	; 0x50
 8004b1e:	e003      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d039      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d81c      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b95 	.word	0x08004b95
 8004b5c:	08004b69 	.word	0x08004b69
 8004b60:	08004b77 	.word	0x08004b77
 8004b64:	08004b95 	.word	0x08004b95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b67      	ldr	r3, [pc, #412]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a66      	ldr	r2, [pc, #408]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b74:	e00f      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fe44 	bl	800580c <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b8a:	e004      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b92:	e000      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	f023 0103 	bic.w	r1, r3, #3
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	4a56      	ldr	r2, [pc, #344]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bb2:	e003      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f000 809f 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bde:	4b4b      	ldr	r3, [pc, #300]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4a      	ldr	r2, [pc, #296]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bea:	f7fe f921 	bl	8002e30 <HAL_GetTick>
 8004bee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf4:	f7fe f91c 	bl	8002e30 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	; 0x64
 8004c02:	d903      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c0a:	e005      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c0c:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ed      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d179      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c2c:	4053      	eors	r3, r2
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d015      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4e:	4b2e      	ldr	r3, [pc, #184]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c5a:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d118      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fe f8de 	bl	8002e30 <HAL_GetTick>
 8004c74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c78:	e00d      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fe f8d9 	bl	8002e30 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c84:	1ad2      	subs	r2, r2, r3
 8004c86:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d903      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004c94:	e005      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0eb      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d129      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cba:	d10e      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ccc:	091a      	lsrs	r2, r3, #4
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6113      	str	r3, [r2, #16]
 8004cd8:	e005      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ce0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ce4:	6113      	str	r3, [r2, #16]
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ce8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf6:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfc:	e00e      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004d06:	e009      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	58024800 	.word	0x58024800
 8004d10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 0301 	and.w	r3, r2, #1
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f000 8089 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	2b28      	cmp	r3, #40	; 0x28
 8004d46:	d86b      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004e29 	.word	0x08004e29
 8004d54:	08004e21 	.word	0x08004e21
 8004d58:	08004e21 	.word	0x08004e21
 8004d5c:	08004e21 	.word	0x08004e21
 8004d60:	08004e21 	.word	0x08004e21
 8004d64:	08004e21 	.word	0x08004e21
 8004d68:	08004e21 	.word	0x08004e21
 8004d6c:	08004e21 	.word	0x08004e21
 8004d70:	08004df5 	.word	0x08004df5
 8004d74:	08004e21 	.word	0x08004e21
 8004d78:	08004e21 	.word	0x08004e21
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e21 	.word	0x08004e21
 8004d88:	08004e21 	.word	0x08004e21
 8004d8c:	08004e21 	.word	0x08004e21
 8004d90:	08004e0b 	.word	0x08004e0b
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e21 	.word	0x08004e21
 8004da4:	08004e21 	.word	0x08004e21
 8004da8:	08004e21 	.word	0x08004e21
 8004dac:	08004e21 	.word	0x08004e21
 8004db0:	08004e29 	.word	0x08004e29
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004e21 	.word	0x08004e21
 8004dc4:	08004e21 	.word	0x08004e21
 8004dc8:	08004e21 	.word	0x08004e21
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004e29 	.word	0x08004e29
 8004dd4:	08004e21 	.word	0x08004e21
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e29 	.word	0x08004e29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df8:	3308      	adds	r3, #8
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd05 	bl	800580c <RCCEx_PLL2_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e08:	e00f      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0e:	3328      	adds	r3, #40	; 0x28
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fdac 	bl	8005970 <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e1e:	e004      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e32:	4bbf      	ldr	r3, [pc, #764]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e40:	4abb      	ldr	r2, [pc, #748]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	6553      	str	r3, [r2, #84]	; 0x54
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f002 0302 	and.w	r3, r2, #2
 8004e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d041      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d824      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004e99 	.word	0x08004e99
 8004e88:	08004eaf 	.word	0x08004eaf
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ecd 	.word	0x08004ecd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fcb3 	bl	800580c <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	3328      	adds	r3, #40	; 0x28
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fd5a 	bl	8005970 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ed6:	4b96      	ldr	r3, [pc, #600]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f023 0107 	bic.w	r1, r3, #7
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee4:	4a92      	ldr	r2, [pc, #584]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6553      	str	r3, [r2, #84]	; 0x54
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f002 0304 	and.w	r3, r2, #4
 8004f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d044      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d825      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f41 	.word	0x08004f41
 8004f30:	08004f57 	.word	0x08004f57
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f75 	.word	0x08004f75
 8004f3c:	08004f75 	.word	0x08004f75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f44:	3308      	adds	r3, #8
 8004f46:	2101      	movs	r1, #1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc5f 	bl	800580c <RCCEx_PLL2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f54:	e00f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5a:	3328      	adds	r3, #40	; 0x28
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fd06 	bl	8005970 <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f7e:	4b6c      	ldr	r3, [pc, #432]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f023 0107 	bic.w	r1, r3, #7
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	4a68      	ldr	r2, [pc, #416]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6593      	str	r3, [r2, #88]	; 0x58
 8004f94:	e003      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f002 0320 	and.w	r3, r2, #32
 8004faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d055      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fca:	d033      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fd0:	d82c      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d02f      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fdc:	d826      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fe2:	d02b      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fe8:	d820      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fee:	d012      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ff4:	d81a      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d022      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ffe:	d115      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	3308      	adds	r3, #8
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fbff 	bl	800580c <RCCEx_PLL2_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005014:	e015      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501a:	3328      	adds	r3, #40	; 0x28
 800501c:	2102      	movs	r1, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fca6 	bl	8005970 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800502a:	e00a      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005034:	bf00      	nop
 8005036:	e004      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800504a:	4b39      	ldr	r3, [pc, #228]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800505c:	430b      	orrs	r3, r1
 800505e:	6553      	str	r3, [r2, #84]	; 0x54
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005080:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005084:	460b      	mov	r3, r1
 8005086:	4313      	orrs	r3, r2
 8005088:	d058      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005092:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005096:	d033      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005098:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800509c:	d82c      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d02f      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d826      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ae:	d02b      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80050b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b4:	d820      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d012      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d81a      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d022      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d115      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d0:	3308      	adds	r3, #8
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fb99 	bl	800580c <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050e0:	e015      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	3328      	adds	r3, #40	; 0x28
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fc40 	bl	8005970 <RCCEx_PLL3_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050f6:	e00a      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050fe:	e006      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005100:	bf00      	nop
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10e      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005126:	4a02      	ldr	r2, [pc, #8]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005128:	430b      	orrs	r3, r1
 800512a:	6593      	str	r3, [r2, #88]	; 0x58
 800512c:	e006      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005152:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d055      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005164:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005168:	d033      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800516a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800516e:	d82c      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d02f      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517a:	d826      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800517c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005180:	d02b      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005182:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005186:	d820      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518c:	d012      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800518e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005192:	d81a      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d115      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	3308      	adds	r3, #8
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fb30 	bl	800580c <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051b2:	e015      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b8:	3328      	adds	r3, #40	; 0x28
 80051ba:	2102      	movs	r1, #2
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fbd7 	bl	8005970 <RCCEx_PLL3_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051c8:	e00a      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051d2:	bf00      	nop
 80051d4:	e004      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051d6:	bf00      	nop
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051e8:	4ba1      	ldr	r3, [pc, #644]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051f8:	4a9d      	ldr	r2, [pc, #628]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6593      	str	r3, [r2, #88]	; 0x58
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 0308 	and.w	r3, r2, #8
 8005214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800521e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d01e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	3328      	adds	r3, #40	; 0x28
 800523c:	2102      	movs	r1, #2
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fb96 	bl	8005970 <RCCEx_PLL3_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005250:	4b87      	ldr	r3, [pc, #540]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005260:	4a83      	ldr	r2, [pc, #524]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005262:	430b      	orrs	r3, r1
 8005264:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f002 0310 	and.w	r3, r2, #16
 8005272:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800527c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d01e      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005298:	3328      	adds	r3, #40	; 0x28
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fb67 	bl	8005970 <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ae:	4b70      	ldr	r3, [pc, #448]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052be:	4a6c      	ldr	r2, [pc, #432]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80052d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	d03e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f0:	d022      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80052f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f6:	d81b      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d00b      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005302:	e015      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	3308      	adds	r3, #8
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fa7d 	bl	800580c <RCCEx_PLL2_Config>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005318:	e00f      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531e:	3328      	adds	r3, #40	; 0x28
 8005320:	2102      	movs	r1, #2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fb24 	bl	8005970 <RCCEx_PLL3_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800532e:	e004      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005336:	e000      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005342:	4b4b      	ldr	r3, [pc, #300]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005352:	4a47      	ldr	r2, [pc, #284]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005354:	430b      	orrs	r3, r1
 8005356:	6593      	str	r3, [r2, #88]	; 0x58
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800536e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005370:	2300      	movs	r3, #0
 8005372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005374:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005378:	460b      	mov	r3, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800538a:	d01f      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800538c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005390:	d818      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005396:	d003      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800539c:	d007      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800539e:	e011      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	4a32      	ldr	r2, [pc, #200]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80053ac:	e00f      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b2:	3328      	adds	r3, #40	; 0x28
 80053b4:	2101      	movs	r1, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fada 	bl	8005970 <RCCEx_PLL3_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6553      	str	r3, [r2, #84]	; 0x54
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005402:	673b      	str	r3, [r7, #112]	; 0x70
 8005404:	2300      	movs	r3, #0
 8005406:	677b      	str	r3, [r7, #116]	; 0x74
 8005408:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d034      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d007      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005422:	e011      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a11      	ldr	r2, [pc, #68]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800542a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005430:	e00e      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	3308      	adds	r3, #8
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f9e6 	bl	800580c <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800544e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10d      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005466:	4a02      	ldr	r2, [pc, #8]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005468:	430b      	orrs	r3, r1
 800546a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800546c:	e006      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005478:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005488:	66bb      	str	r3, [r7, #104]	; 0x68
 800548a:	2300      	movs	r3, #0
 800548c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800548e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d00c      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549c:	3328      	adds	r3, #40	; 0x28
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fa65 	bl	8005970 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80054be:	663b      	str	r3, [r7, #96]	; 0x60
 80054c0:	2300      	movs	r3, #0
 80054c2:	667b      	str	r3, [r7, #100]	; 0x64
 80054c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80054c8:	460b      	mov	r3, r1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	d038      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054da:	d018      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80054dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e0:	d811      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e6:	d014      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d80b      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d106      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f8:	4bc3      	ldr	r3, [pc, #780]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4ac2      	ldr	r2, [pc, #776]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005504:	e008      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800550c:	e004      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800550e:	bf00      	nop
 8005510:	e002      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005520:	4bb9      	ldr	r3, [pc, #740]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	4ab5      	ldr	r2, [pc, #724]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005532:	430b      	orrs	r3, r1
 8005534:	6553      	str	r3, [r2, #84]	; 0x54
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800553c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800554c:	65bb      	str	r3, [r7, #88]	; 0x58
 800554e:	2300      	movs	r3, #0
 8005550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005552:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800555c:	4baa      	ldr	r3, [pc, #680]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	4aa7      	ldr	r2, [pc, #668]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800556c:	430b      	orrs	r3, r1
 800556e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800557c:	653b      	str	r3, [r7, #80]	; 0x50
 800557e:	2300      	movs	r3, #0
 8005580:	657b      	str	r3, [r7, #84]	; 0x54
 8005582:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800558c:	4b9e      	ldr	r3, [pc, #632]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800559c:	4a9a      	ldr	r2, [pc, #616]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800559e:	430b      	orrs	r3, r1
 80055a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80055ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b0:	2300      	movs	r3, #0
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055be:	4b92      	ldr	r3, [pc, #584]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055cc:	4a8e      	ldr	r2, [pc, #568]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	2300      	movs	r3, #0
 80055e2:	647b      	str	r3, [r7, #68]	; 0x44
 80055e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ee:	4b86      	ldr	r3, [pc, #536]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	4a85      	ldr	r2, [pc, #532]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055f8:	6113      	str	r3, [r2, #16]
 80055fa:	4b83      	ldr	r3, [pc, #524]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055fc:	6919      	ldr	r1, [r3, #16]
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005606:	4a80      	ldr	r2, [pc, #512]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005628:	4b77      	ldr	r3, [pc, #476]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005638:	430b      	orrs	r3, r1
 800563a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
 800564a:	2300      	movs	r3, #0
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
 800564e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005658:	4b6b      	ldr	r3, [pc, #428]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005668:	4a67      	ldr	r2, [pc, #412]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566a:	430b      	orrs	r3, r1
 800566c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	2100      	movs	r1, #0
 8005678:	62b9      	str	r1, [r7, #40]	; 0x28
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005680:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005684:	460b      	mov	r3, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	d011      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568e:	3308      	adds	r3, #8
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f8ba 	bl	800580c <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	2100      	movs	r1, #0
 80056b8:	6239      	str	r1, [r7, #32]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d011      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	3308      	adds	r3, #8
 80056d0:	2101      	movs	r1, #1
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f89a 	bl	800580c <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	2100      	movs	r1, #0
 80056f8:	61b9      	str	r1, [r7, #24]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005704:	460b      	mov	r3, r1
 8005706:	4313      	orrs	r3, r2
 8005708:	d011      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	3308      	adds	r3, #8
 8005710:	2102      	movs	r1, #2
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f87a 	bl	800580c <RCCEx_PLL2_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800571e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	2100      	movs	r1, #0
 8005738:	6139      	str	r1, [r7, #16]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d011      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574e:	3328      	adds	r3, #40	; 0x28
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f90c 	bl	8005970 <RCCEx_PLL3_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800576a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	2100      	movs	r1, #0
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d011      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f8ec 	bl	8005970 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	2100      	movs	r1, #0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	607b      	str	r3, [r7, #4]
 80057c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d011      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ce:	3328      	adds	r3, #40	; 0x28
 80057d0:	2102      	movs	r1, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f8cc 	bl	8005970 <RCCEx_PLL3_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80057ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005802:	46bd      	mov	sp, r7
 8005804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005808:	58024400 	.word	0x58024400

0800580c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800581a:	4b53      	ldr	r3, [pc, #332]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d101      	bne.n	800582a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e099      	b.n	800595e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800582a:	4b4f      	ldr	r3, [pc, #316]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a4e      	ldr	r2, [pc, #312]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005836:	f7fd fafb 	bl	8002e30 <HAL_GetTick>
 800583a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800583c:	e008      	b.n	8005850 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800583e:	f7fd faf7 	bl	8002e30 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e086      	b.n	800595e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005850:	4b45      	ldr	r3, [pc, #276]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800585c:	4b42      	ldr	r3, [pc, #264]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	493f      	ldr	r1, [pc, #252]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	628b      	str	r3, [r1, #40]	; 0x28
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	b29b      	uxth	r3, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	3b01      	subs	r3, #1
 800588c:	041b      	lsls	r3, r3, #16
 800588e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	3b01      	subs	r3, #1
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058a0:	4931      	ldr	r1, [pc, #196]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058a6:	4b30      	ldr	r3, [pc, #192]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	492d      	ldr	r1, [pc, #180]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058b8:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f023 0220 	bic.w	r2, r3, #32
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	4928      	ldr	r1, [pc, #160]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058ca:	4b27      	ldr	r3, [pc, #156]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	4a26      	ldr	r2, [pc, #152]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <RCCEx_PLL2_Config+0x160>)
 80058dc:	4013      	ands	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	69d2      	ldr	r2, [r2, #28]
 80058e2:	00d2      	lsls	r2, r2, #3
 80058e4:	4920      	ldr	r1, [pc, #128]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	4a1e      	ldr	r2, [pc, #120]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005906:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005908:	e00f      	b.n	800592a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d106      	bne.n	800591e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005910:	4b15      	ldr	r3, [pc, #84]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800591c:	e005      	b.n	800592a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005928:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005936:	f7fd fa7b 	bl	8002e30 <HAL_GetTick>
 800593a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800593c:	e008      	b.n	8005950 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800593e:	f7fd fa77 	bl	8002e30 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <RCCEx_PLL2_Config+0x15c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	ffff0007 	.word	0xffff0007

08005970 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800597e:	4b53      	ldr	r3, [pc, #332]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b03      	cmp	r3, #3
 8005988:	d101      	bne.n	800598e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e099      	b.n	8005ac2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800598e:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4e      	ldr	r2, [pc, #312]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599a:	f7fd fa49 	bl	8002e30 <HAL_GetTick>
 800599e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a0:	e008      	b.n	80059b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059a2:	f7fd fa45 	bl	8002e30 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e086      	b.n	8005ac2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b4:	4b45      	ldr	r3, [pc, #276]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	051b      	lsls	r3, r3, #20
 80059ce:	493f      	ldr	r1, [pc, #252]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	628b      	str	r3, [r1, #40]	; 0x28
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	3b01      	subs	r3, #1
 80059da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	025b      	lsls	r3, r3, #9
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a04:	4931      	ldr	r1, [pc, #196]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a0a:	4b30      	ldr	r3, [pc, #192]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	492d      	ldr	r1, [pc, #180]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a1c:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	4928      	ldr	r1, [pc, #160]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a2e:	4b27      	ldr	r3, [pc, #156]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a26      	ldr	r2, [pc, #152]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3e:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <RCCEx_PLL3_Config+0x160>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	69d2      	ldr	r2, [r2, #28]
 8005a46:	00d2      	lsls	r2, r2, #3
 8005a48:	4920      	ldr	r1, [pc, #128]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a6c:	e00f      	b.n	8005a8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a80:	e005      	b.n	8005a8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9a:	f7fd f9c9 	bl	8002e30 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa0:	e008      	b.n	8005ab4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aa2:	f7fd f9c5 	bl	8002e30 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <RCCEx_PLL3_Config+0x15c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	ffff0007 	.word	0xffff0007

08005ad4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d071      	beq.n	8005bca <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fa fdc4 	bl	8000688 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d050      	beq.n	8005bb8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ca      	movs	r2, #202	; 0xca
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2253      	movs	r2, #83	; 0x53
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9a0 	bl	8005e6c <RTC_EnterInitMode>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d124      	bne.n	8005b80 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RTC_Init+0x100>)
 8005b42:	400b      	ands	r3, r1
 8005b44:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6899      	ldr	r1, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	0419      	lsls	r1, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9ac 	bl	8005ed4 <RTC_ExitInitMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d113      	bne.n	8005bae <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0203 	bic.w	r2, r2, #3
 8005b94:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bb6:	e001      	b.n	8005bbc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	ff8fffbf 	.word	0xff8fffbf

08005bd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_RTC_SetTime+0x1a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e089      	b.n	8005d06 <HAL_RTC_SetTime+0x12e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ca      	movs	r2, #202	; 0xca
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2253      	movs	r2, #83	; 0x53
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f92a 	bl	8005e6c <RTC_EnterInitMode>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d161      	bne.n	8005ce6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d126      	bne.n	8005c76 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f985 	bl	8005f50 <RTC_ByteToBcd2>
 8005c46:	4603      	mov	r3, r0
 8005c48:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f97e 	bl	8005f50 <RTC_ByteToBcd2>
 8005c54:	4603      	mov	r3, r0
 8005c56:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c58:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	789b      	ldrb	r3, [r3, #2]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f976 	bl	8005f50 <RTC_ByteToBcd2>
 8005c64:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c66:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e018      	b.n	8005ca8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c96:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c9c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <HAL_RTC_SetTime+0x138>)
 8005cb0:	400b      	ands	r3, r1
 8005cb2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6899      	ldr	r1, [r3, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f8f9 	bl	8005ed4 <RTC_ExitInitMode>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	22ff      	movs	r2, #255	; 0xff
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	007f7f7f 	.word	0x007f7f7f

08005d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d14:	b590      	push	{r4, r7, lr}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_RTC_SetDate+0x1a>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e073      	b.n	8005e16 <HAL_RTC_SetDate+0x102>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10e      	bne.n	8005d62 <HAL_RTC_SetDate+0x4e>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	f023 0310 	bic.w	r3, r3, #16
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	330a      	adds	r3, #10
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d11c      	bne.n	8005da2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f8ef 	bl	8005f50 <RTC_ByteToBcd2>
 8005d72:	4603      	mov	r3, r0
 8005d74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f8e8 	bl	8005f50 <RTC_ByteToBcd2>
 8005d80:	4603      	mov	r3, r0
 8005d82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	789b      	ldrb	r3, [r3, #2]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f8e0 	bl	8005f50 <RTC_ByteToBcd2>
 8005d90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e00e      	b.n	8005dc0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005db4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	22ca      	movs	r2, #202	; 0xca
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2253      	movs	r2, #83	; 0x53
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f84b 	bl	8005e6c <RTC_EnterInitMode>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <HAL_RTC_SetDate+0x10c>)
 8005de8:	400b      	ands	r3, r1
 8005dea:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f871 	bl	8005ed4 <RTC_ExitInitMode>
 8005df2:	4603      	mov	r3, r0
 8005df4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e14:	7cfb      	ldrb	r3, [r7, #19]


}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	00ffff3f 	.word	0x00ffff3f

08005e24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_RTC_WaitForSynchro+0x44>)
 8005e32:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005e34:	f7fc fffc 	bl	8002e30 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e3a:	e009      	b.n	8005e50 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e3c:	f7fc fff8 	bl	8002e30 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4a:	d901      	bls.n	8005e50 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e007      	b.n	8005e60 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ee      	beq.n	8005e3c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	0003ff5f 	.word	0x0003ff5f

08005e6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d120      	bne.n	8005ec8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e90:	f7fc ffce 	bl	8002e30 <HAL_GetTick>
 8005e94:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e96:	e00d      	b.n	8005eb4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e98:	f7fc ffca 	bl	8002e30 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea6:	d905      	bls.n	8005eb4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <RTC_EnterInitMode+0x5c>
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d1e7      	bne.n	8005e98 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eea:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005eec:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ff93 	bl	8005e24 <HAL_RTC_WaitForSynchro>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01e      	beq.n	8005f42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2203      	movs	r2, #3
 8005f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e017      	b.n	8005f42 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005f18:	f023 0320 	bic.w	r3, r3, #32
 8005f1c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff ff80 	bl	8005e24 <HAL_RTC_WaitForSynchro>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <RTC_ExitInitMode+0x78>)
 8005f3c:	f043 0320 	orr.w	r3, r3, #32
 8005f40:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	58004000 	.word	0x58004000

08005f50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005f62:	e005      	b.n	8005f70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	3b0a      	subs	r3, #10
 8005f6e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	2b09      	cmp	r3, #9
 8005f74:	d8f6      	bhi.n	8005f64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	b2db      	uxtb	r3, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e10f      	b.n	80061c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a87      	ldr	r2, [pc, #540]	; (80061cc <HAL_SPI_Init+0x23c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <HAL_SPI_Init+0x42>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a86      	ldr	r2, [pc, #536]	; (80061d0 <HAL_SPI_Init+0x240>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00a      	beq.n	8005fd2 <HAL_SPI_Init+0x42>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a84      	ldr	r2, [pc, #528]	; (80061d4 <HAL_SPI_Init+0x244>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d005      	beq.n	8005fd2 <HAL_SPI_Init+0x42>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	d901      	bls.n	8005fd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e0f7      	b.n	80061c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fd5a 	bl	8006a8c <SPI_GetPacketSize>
 8005fd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a7b      	ldr	r2, [pc, #492]	; (80061cc <HAL_SPI_Init+0x23c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00c      	beq.n	8005ffe <HAL_SPI_Init+0x6e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a79      	ldr	r2, [pc, #484]	; (80061d0 <HAL_SPI_Init+0x240>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <HAL_SPI_Init+0x6e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a78      	ldr	r2, [pc, #480]	; (80061d4 <HAL_SPI_Init+0x244>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Init+0x6e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d811      	bhi.n	8006022 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006002:	4a72      	ldr	r2, [pc, #456]	; (80061cc <HAL_SPI_Init+0x23c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a70      	ldr	r2, [pc, #448]	; (80061d0 <HAL_SPI_Init+0x240>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_SPI_Init+0x8c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a6f      	ldr	r2, [pc, #444]	; (80061d4 <HAL_SPI_Init+0x244>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d104      	bne.n	8006026 <HAL_SPI_Init+0x96>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b10      	cmp	r3, #16
 8006020:	d901      	bls.n	8006026 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0cd      	b.n	80061c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fa fbae 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006062:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800606c:	d119      	bne.n	80060a2 <HAL_SPI_Init+0x112>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006076:	d103      	bne.n	8006080 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10c      	bne.n	80060a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800608c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006090:	d107      	bne.n	80060a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <HAL_SPI_Init+0x13e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d90b      	bls.n	80060ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e007      	b.n	80060de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	ea42 0103 	orr.w	r1, r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613e:	ea42 0103 	orr.w	r1, r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006168:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800617c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40013000 	.word	0x40013000
 80061d0:	40003800 	.word	0x40003800
 80061d4:	40003c00 	.word	0x40003c00

080061d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3320      	adds	r3, #32
 80061ee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_SPI_Transmit+0x2a>
 80061fe:	2302      	movs	r3, #2
 8006200:	e1e1      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800620a:	f7fc fe11 	bl	8002e30 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d007      	beq.n	800622c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800621c:	2302      	movs	r3, #2
 800621e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006228:	7efb      	ldrb	r3, [r7, #27]
 800622a:	e1cc      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Transmit+0x60>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006244:	7efb      	ldrb	r3, [r7, #27]
 8006246:	e1be      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2203      	movs	r2, #3
 800624c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006298:	d108      	bne.n	80062ac <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e009      	b.n	80062c0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80062be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	4b96      	ldr	r3, [pc, #600]	; (8006520 <HAL_SPI_Transmit+0x348>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	88f9      	ldrh	r1, [r7, #6]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ec:	d107      	bne.n	80062fe <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d947      	bls.n	8006396 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006306:	e03f      	b.n	8006388 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d114      	bne.n	8006340 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800633e:	e023      	b.n	8006388 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006340:	f7fc fd76 	bl	8002e30 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d803      	bhi.n	8006358 <HAL_SPI_Transmit+0x180>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d102      	bne.n	800635e <HAL_SPI_Transmit+0x186>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d114      	bne.n	8006388 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fac6 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e11e      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1b9      	bne.n	8006308 <HAL_SPI_Transmit+0x130>
 8006394:	e0f1      	b.n	800657a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b07      	cmp	r3, #7
 800639c:	f240 80e6 	bls.w	800656c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063a0:	e05d      	b.n	800645e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d132      	bne.n	8006416 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d918      	bls.n	80063ee <HAL_SPI_Transmit+0x216>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d014      	beq.n	80063ee <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b02      	subs	r3, #2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063ec:	e037      	b.n	800645e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f2:	881a      	ldrh	r2, [r3, #0]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006414:	e023      	b.n	800645e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006416:	f7fc fd0b 	bl	8002e30 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d803      	bhi.n	800642e <HAL_SPI_Transmit+0x256>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d102      	bne.n	8006434 <HAL_SPI_Transmit+0x25c>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d114      	bne.n	800645e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa5b 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e0b3      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d19b      	bne.n	80063a2 <HAL_SPI_Transmit+0x1ca>
 800646a:	e086      	b.n	800657a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d154      	bne.n	8006524 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b03      	cmp	r3, #3
 8006484:	d918      	bls.n	80064b8 <HAL_SPI_Transmit+0x2e0>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d914      	bls.n	80064b8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b04      	subs	r3, #4
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064b6:	e059      	b.n	800656c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d917      	bls.n	80064f4 <HAL_SPI_Transmit+0x31c>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	881a      	ldrh	r2, [r3, #0]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b02      	subs	r3, #2
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064f2:	e03b      	b.n	800656c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3320      	adds	r3, #32
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800651e:	e025      	b.n	800656c <HAL_SPI_Transmit+0x394>
 8006520:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006524:	f7fc fc84 	bl	8002e30 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d803      	bhi.n	800653c <HAL_SPI_Transmit+0x364>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d102      	bne.n	8006542 <HAL_SPI_Transmit+0x36a>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d114      	bne.n	800656c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f9d4 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e02c      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f af79 	bne.w	800646c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2200      	movs	r2, #0
 8006582:	2108      	movs	r1, #8
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fa53 	bl	8006a30 <SPI_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f9a5 	bl	80068f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80065c4:	7efb      	ldrb	r3, [r7, #27]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3330      	adds	r3, #48	; 0x30
 80065ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_SPI_Receive+0x2a>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e173      	b.n	80068e2 <HAL_SPI_Receive+0x312>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006602:	f7fc fc15 	bl	8002e30 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d007      	beq.n	8006624 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006614:	2302      	movs	r3, #2
 8006616:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006620:	7ffb      	ldrb	r3, [r7, #31]
 8006622:	e15e      	b.n	80068e2 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_Receive+0x60>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d107      	bne.n	8006640 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800663c:	7ffb      	ldrb	r3, [r7, #31]
 800663e:	e150      	b.n	80068e2 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006690:	d108      	bne.n	80066a4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e009      	b.n	80066b8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80066b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	4b8b      	ldr	r3, [pc, #556]	; (80068ec <HAL_SPI_Receive+0x31c>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	88f9      	ldrh	r1, [r7, #6]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e4:	d107      	bne.n	80066f6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d948      	bls.n	8006790 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80066fe:	e040      	b.n	8006782 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	f248 0308 	movw	r3, #32776	; 0x8008
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d014      	beq.n	800673a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006718:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800671a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006738:	e023      	b.n	8006782 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800673a:	f7fc fb79 	bl	8002e30 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d803      	bhi.n	8006752 <HAL_SPI_Receive+0x182>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d102      	bne.n	8006758 <HAL_SPI_Receive+0x188>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d114      	bne.n	8006782 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f8c9 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e0af      	b.n	80068e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1b8      	bne.n	8006700 <HAL_SPI_Receive+0x130>
 800678e:	e095      	b.n	80068bc <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b07      	cmp	r3, #7
 8006796:	f240 808b 	bls.w	80068b0 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800679a:	e03f      	b.n	800681c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d114      	bne.n	80067d4 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	8812      	ldrh	r2, [r2, #0]
 80067b2:	b292      	uxth	r2, r2
 80067b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	1c9a      	adds	r2, r3, #2
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067d2:	e023      	b.n	800681c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d4:	f7fc fb2c 	bl	8002e30 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d803      	bhi.n	80067ec <HAL_SPI_Receive+0x21c>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d102      	bne.n	80067f2 <HAL_SPI_Receive+0x222>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d114      	bne.n	800681c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f87c 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e062      	b.n	80068e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1b9      	bne.n	800679c <HAL_SPI_Receive+0x1cc>
 8006828:	e048      	b.n	80068bc <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b01      	cmp	r3, #1
 8006836:	d117      	bne.n	8006868 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006866:	e023      	b.n	80068b0 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006868:	f7fc fae2 	bl	8002e30 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d803      	bhi.n	8006880 <HAL_SPI_Receive+0x2b0>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d102      	bne.n	8006886 <HAL_SPI_Receive+0x2b6>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d114      	bne.n	80068b0 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f832 	bl	80068f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800689a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e018      	b.n	80068e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1b6      	bne.n	800682a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f817 	bl	80068f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	ffff0000 	.word	0xffff0000

080068f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0208 	orr.w	r2, r2, #8
 800690e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0210 	orr.w	r2, r2, #16
 800691e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6919      	ldr	r1, [r3, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b3c      	ldr	r3, [pc, #240]	; (8006a2c <SPI_CloseTransfer+0x13c>)
 800693c:	400b      	ands	r3, r1
 800693e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800694e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b04      	cmp	r3, #4
 800695a:	d014      	beq.n	8006986 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00f      	beq.n	8006986 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0220 	orr.w	r2, r2, #32
 8006984:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d014      	beq.n	80069bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00f      	beq.n	80069bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a2:	f043 0204 	orr.w	r2, r3, #4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f6:	f043 0208 	orr.w	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	fffffc90 	.word	0xfffffc90

08006a30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a40:	e010      	b.n	8006a64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a42:	f7fc f9f5 	bl	8002e30 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d803      	bhi.n	8006a5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d102      	bne.n	8006a60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e00f      	b.n	8006a84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	bf0c      	ite	eq
 8006a74:	2301      	moveq	r3, #1
 8006a76:	2300      	movne	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d0df      	beq.n	8006a42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3307      	adds	r3, #7
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e049      	b.n	8006b68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fa f851 	bl	8000b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f000 f949 	bl	8006d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e0ff      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b14      	cmp	r3, #20
 8006b9a:	f200 80f0 	bhi.w	8006d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006d7f 	.word	0x08006d7f
 8006bac:	08006d7f 	.word	0x08006d7f
 8006bb0:	08006d7f 	.word	0x08006d7f
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006d7f 	.word	0x08006d7f
 8006bbc:	08006d7f 	.word	0x08006d7f
 8006bc0:	08006d7f 	.word	0x08006d7f
 8006bc4:	08006c7b 	.word	0x08006c7b
 8006bc8:	08006d7f 	.word	0x08006d7f
 8006bcc:	08006d7f 	.word	0x08006d7f
 8006bd0:	08006d7f 	.word	0x08006d7f
 8006bd4:	08006cbb 	.word	0x08006cbb
 8006bd8:	08006d7f 	.word	0x08006d7f
 8006bdc:	08006d7f 	.word	0x08006d7f
 8006be0:	08006d7f 	.word	0x08006d7f
 8006be4:	08006cfd 	.word	0x08006cfd
 8006be8:	08006d7f 	.word	0x08006d7f
 8006bec:	08006d7f 	.word	0x08006d7f
 8006bf0:	08006d7f 	.word	0x08006d7f
 8006bf4:	08006d3d 	.word	0x08006d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f964 	bl	8006ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0208 	orr.w	r2, r2, #8
 8006c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0204 	bic.w	r2, r2, #4
 8006c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6999      	ldr	r1, [r3, #24]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	619a      	str	r2, [r3, #24]
      break;
 8006c36:	e0a5      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f9d4 	bl	8006fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6999      	ldr	r1, [r3, #24]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	619a      	str	r2, [r3, #24]
      break;
 8006c78:	e084      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa3d 	bl	8007100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0208 	orr.w	r2, r2, #8
 8006c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0204 	bic.w	r2, r2, #4
 8006ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69d9      	ldr	r1, [r3, #28]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	61da      	str	r2, [r3, #28]
      break;
 8006cb8:	e064      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 faa5 	bl	8007210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	021a      	lsls	r2, r3, #8
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	61da      	str	r2, [r3, #28]
      break;
 8006cfa:	e043      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 faee 	bl	80072e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0208 	orr.w	r2, r2, #8
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0204 	bic.w	r2, r2, #4
 8006d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d3a:	e023      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fb32 	bl	80073ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	021a      	lsls	r2, r3, #8
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d7c:	e002      	b.n	8006d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
      break;
 8006d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop

08006d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a40      	ldr	r2, [pc, #256]	; (8006eac <TIM_Base_SetConfig+0x114>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d013      	beq.n	8006dd8 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d00f      	beq.n	8006dd8 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a3d      	ldr	r2, [pc, #244]	; (8006eb0 <TIM_Base_SetConfig+0x118>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a3c      	ldr	r2, [pc, #240]	; (8006eb4 <TIM_Base_SetConfig+0x11c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a3b      	ldr	r2, [pc, #236]	; (8006eb8 <TIM_Base_SetConfig+0x120>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3a      	ldr	r2, [pc, #232]	; (8006ebc <TIM_Base_SetConfig+0x124>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d108      	bne.n	8006dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2f      	ldr	r2, [pc, #188]	; (8006eac <TIM_Base_SetConfig+0x114>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01f      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d01b      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2c      	ldr	r2, [pc, #176]	; (8006eb0 <TIM_Base_SetConfig+0x118>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d017      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2b      	ldr	r2, [pc, #172]	; (8006eb4 <TIM_Base_SetConfig+0x11c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <TIM_Base_SetConfig+0x120>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a29      	ldr	r2, [pc, #164]	; (8006ebc <TIM_Base_SetConfig+0x124>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <TIM_Base_SetConfig+0x128>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a27      	ldr	r2, [pc, #156]	; (8006ec4 <TIM_Base_SetConfig+0x12c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a26      	ldr	r2, [pc, #152]	; (8006ec8 <TIM_Base_SetConfig+0x130>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <TIM_Base_SetConfig+0x114>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00f      	beq.n	8006e90 <TIM_Base_SetConfig+0xf8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <TIM_Base_SetConfig+0x124>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <TIM_Base_SetConfig+0xf8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <TIM_Base_SetConfig+0x128>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d007      	beq.n	8006e90 <TIM_Base_SetConfig+0xf8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <TIM_Base_SetConfig+0x12c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_Base_SetConfig+0xf8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a0f      	ldr	r2, [pc, #60]	; (8006ec8 <TIM_Base_SetConfig+0x130>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d103      	bne.n	8006e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	615a      	str	r2, [r3, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	40010400 	.word	0x40010400
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <TIM_OC1_SetConfig+0x108>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0302 	bic.w	r3, r3, #2
 8006f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2d      	ldr	r2, [pc, #180]	; (8006fd8 <TIM_OC1_SetConfig+0x10c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00f      	beq.n	8006f48 <TIM_OC1_SetConfig+0x7c>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a2c      	ldr	r2, [pc, #176]	; (8006fdc <TIM_OC1_SetConfig+0x110>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00b      	beq.n	8006f48 <TIM_OC1_SetConfig+0x7c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a2b      	ldr	r2, [pc, #172]	; (8006fe0 <TIM_OC1_SetConfig+0x114>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d007      	beq.n	8006f48 <TIM_OC1_SetConfig+0x7c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <TIM_OC1_SetConfig+0x118>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_OC1_SetConfig+0x7c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d10c      	bne.n	8006f62 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f023 0308 	bic.w	r3, r3, #8
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0304 	bic.w	r3, r3, #4
 8006f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <TIM_OC1_SetConfig+0x10c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00f      	beq.n	8006f8a <TIM_OC1_SetConfig+0xbe>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <TIM_OC1_SetConfig+0x110>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00b      	beq.n	8006f8a <TIM_OC1_SetConfig+0xbe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <TIM_OC1_SetConfig+0x114>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <TIM_OC1_SetConfig+0xbe>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <TIM_OC1_SetConfig+0x118>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_OC1_SetConfig+0xbe>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d111      	bne.n	8006fae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	fffeff8f 	.word	0xfffeff8f
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0210 	bic.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4b34      	ldr	r3, [pc, #208]	; (80070e8 <TIM_OC2_SetConfig+0xfc>)
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0320 	bic.w	r3, r3, #32
 8007036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a29      	ldr	r2, [pc, #164]	; (80070ec <TIM_OC2_SetConfig+0x100>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC2_SetConfig+0x68>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a28      	ldr	r2, [pc, #160]	; (80070f0 <TIM_OC2_SetConfig+0x104>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10d      	bne.n	8007070 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800705a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <TIM_OC2_SetConfig+0x100>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00f      	beq.n	8007098 <TIM_OC2_SetConfig+0xac>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <TIM_OC2_SetConfig+0x104>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00b      	beq.n	8007098 <TIM_OC2_SetConfig+0xac>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <TIM_OC2_SetConfig+0x108>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_OC2_SetConfig+0xac>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <TIM_OC2_SetConfig+0x10c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC2_SetConfig+0xac>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <TIM_OC2_SetConfig+0x110>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d113      	bne.n	80070c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800709e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	feff8fff 	.word	0xfeff8fff
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <TIM_OC3_SetConfig+0xf8>)
 800712c:	4013      	ands	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a28      	ldr	r2, [pc, #160]	; (80071fc <TIM_OC3_SetConfig+0xfc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_OC3_SetConfig+0x66>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a27      	ldr	r2, [pc, #156]	; (8007200 <TIM_OC3_SetConfig+0x100>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d10d      	bne.n	8007182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800716c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1d      	ldr	r2, [pc, #116]	; (80071fc <TIM_OC3_SetConfig+0xfc>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00f      	beq.n	80071aa <TIM_OC3_SetConfig+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1c      	ldr	r2, [pc, #112]	; (8007200 <TIM_OC3_SetConfig+0x100>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00b      	beq.n	80071aa <TIM_OC3_SetConfig+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1b      	ldr	r2, [pc, #108]	; (8007204 <TIM_OC3_SetConfig+0x104>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC3_SetConfig+0xaa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <TIM_OC3_SetConfig+0x108>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC3_SetConfig+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a19      	ldr	r2, [pc, #100]	; (800720c <TIM_OC3_SetConfig+0x10c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d113      	bne.n	80071d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	621a      	str	r2, [r3, #32]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	fffeff8f 	.word	0xfffeff8f
 80071fc:	40010000 	.word	0x40010000
 8007200:	40010400 	.word	0x40010400
 8007204:	40014000 	.word	0x40014000
 8007208:	40014400 	.word	0x40014400
 800720c:	40014800 	.word	0x40014800

08007210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4b24      	ldr	r3, [pc, #144]	; (80072cc <TIM_OC4_SetConfig+0xbc>)
 800723c:	4013      	ands	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800725a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	031b      	lsls	r3, r3, #12
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <TIM_OC4_SetConfig+0xc0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00f      	beq.n	8007290 <TIM_OC4_SetConfig+0x80>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <TIM_OC4_SetConfig+0xc4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_OC4_SetConfig+0x80>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <TIM_OC4_SetConfig+0xc8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_OC4_SetConfig+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a16      	ldr	r2, [pc, #88]	; (80072dc <TIM_OC4_SetConfig+0xcc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_OC4_SetConfig+0x80>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <TIM_OC4_SetConfig+0xd0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d109      	bne.n	80072a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	feff8fff 	.word	0xfeff8fff
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40010400 	.word	0x40010400
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4b21      	ldr	r3, [pc, #132]	; (8007394 <TIM_OC5_SetConfig+0xb0>)
 8007310:	4013      	ands	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <TIM_OC5_SetConfig+0xb4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00f      	beq.n	800735a <TIM_OC5_SetConfig+0x76>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a17      	ldr	r2, [pc, #92]	; (800739c <TIM_OC5_SetConfig+0xb8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00b      	beq.n	800735a <TIM_OC5_SetConfig+0x76>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <TIM_OC5_SetConfig+0xbc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d007      	beq.n	800735a <TIM_OC5_SetConfig+0x76>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <TIM_OC5_SetConfig+0xc0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <TIM_OC5_SetConfig+0x76>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <TIM_OC5_SetConfig+0xc4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d109      	bne.n	800736e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	621a      	str	r2, [r3, #32]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	fffeff8f 	.word	0xfffeff8f
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4b22      	ldr	r3, [pc, #136]	; (8007460 <TIM_OC6_SetConfig+0xb4>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <TIM_OC6_SetConfig+0xb8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00f      	beq.n	8007424 <TIM_OC6_SetConfig+0x78>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <TIM_OC6_SetConfig+0xbc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00b      	beq.n	8007424 <TIM_OC6_SetConfig+0x78>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a17      	ldr	r2, [pc, #92]	; (800746c <TIM_OC6_SetConfig+0xc0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d007      	beq.n	8007424 <TIM_OC6_SetConfig+0x78>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a16      	ldr	r2, [pc, #88]	; (8007470 <TIM_OC6_SetConfig+0xc4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_OC6_SetConfig+0x78>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a15      	ldr	r2, [pc, #84]	; (8007474 <TIM_OC6_SetConfig+0xc8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d109      	bne.n	8007438 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800742a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	029b      	lsls	r3, r3, #10
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	feff8fff 	.word	0xfeff8fff
 8007464:	40010000 	.word	0x40010000
 8007468:	40010400 	.word	0x40010400
 800746c:	40014000 	.word	0x40014000
 8007470:	40014400 	.word	0x40014400
 8007474:	40014800 	.word	0x40014800

08007478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800748c:	2302      	movs	r3, #2
 800748e:	e06d      	b.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a30      	ldr	r2, [pc, #192]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d004      	beq.n	80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a2f      	ldr	r2, [pc, #188]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d108      	bne.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a20      	ldr	r2, [pc, #128]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d022      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007502:	d01d      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d018      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00e      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a15      	ldr	r2, [pc, #84]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d009      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a16      	ldr	r2, [pc, #88]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10c      	bne.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	4313      	orrs	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40010000 	.word	0x40010000
 800757c:	40010400 	.word	0x40010400
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40001800 	.word	0x40001800
 8007590:	40014000 	.word	0x40014000

08007594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e065      	b.n	800767c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a16      	ldr	r2, [pc, #88]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d004      	beq.n	800763e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a14      	ldr	r2, [pc, #80]	; (800768c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d115      	bne.n	800766a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	051b      	lsls	r3, r3, #20
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40010000 	.word	0x40010000
 800768c:	40010400 	.word	0x40010400

08007690 <__errno>:
 8007690:	4b01      	ldr	r3, [pc, #4]	; (8007698 <__errno+0x8>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	240000a0 	.word	0x240000a0

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4d0d      	ldr	r5, [pc, #52]	; (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	; (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1b64      	subs	r4, r4, r5
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2600      	movs	r6, #0
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4d0b      	ldr	r5, [pc, #44]	; (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	; (80076e0 <__libc_init_array+0x44>)
 80076b0:	f000 fc8e 	bl	8007fd0 <_init>
 80076b4:	1b64      	subs	r4, r4, r5
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2600      	movs	r6, #0
 80076ba:	42a6      	cmp	r6, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c4:	4798      	blx	r3
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ce:	4798      	blx	r3
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	0800ef0c 	.word	0x0800ef0c
 80076d8:	0800ef0c 	.word	0x0800ef0c
 80076dc:	0800ef0c 	.word	0x0800ef0c
 80076e0:	0800ef10 	.word	0x0800ef10

080076e4 <memset>:
 80076e4:	4402      	add	r2, r0
 80076e6:	4603      	mov	r3, r0
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d100      	bne.n	80076ee <memset+0xa>
 80076ec:	4770      	bx	lr
 80076ee:	f803 1b01 	strb.w	r1, [r3], #1
 80076f2:	e7f9      	b.n	80076e8 <memset+0x4>

080076f4 <siprintf>:
 80076f4:	b40e      	push	{r1, r2, r3}
 80076f6:	b500      	push	{lr}
 80076f8:	b09c      	sub	sp, #112	; 0x70
 80076fa:	ab1d      	add	r3, sp, #116	; 0x74
 80076fc:	9002      	str	r0, [sp, #8]
 80076fe:	9006      	str	r0, [sp, #24]
 8007700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007704:	4809      	ldr	r0, [pc, #36]	; (800772c <siprintf+0x38>)
 8007706:	9107      	str	r1, [sp, #28]
 8007708:	9104      	str	r1, [sp, #16]
 800770a:	4909      	ldr	r1, [pc, #36]	; (8007730 <siprintf+0x3c>)
 800770c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007710:	9105      	str	r1, [sp, #20]
 8007712:	6800      	ldr	r0, [r0, #0]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	a902      	add	r1, sp, #8
 8007718:	f000 f868 	bl	80077ec <_svfiprintf_r>
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	b01c      	add	sp, #112	; 0x70
 8007724:	f85d eb04 	ldr.w	lr, [sp], #4
 8007728:	b003      	add	sp, #12
 800772a:	4770      	bx	lr
 800772c:	240000a0 	.word	0x240000a0
 8007730:	ffff0208 	.word	0xffff0208

08007734 <__ssputs_r>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	688e      	ldr	r6, [r1, #8]
 800773a:	429e      	cmp	r6, r3
 800773c:	4682      	mov	sl, r0
 800773e:	460c      	mov	r4, r1
 8007740:	4690      	mov	r8, r2
 8007742:	461f      	mov	r7, r3
 8007744:	d838      	bhi.n	80077b8 <__ssputs_r+0x84>
 8007746:	898a      	ldrh	r2, [r1, #12]
 8007748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800774c:	d032      	beq.n	80077b4 <__ssputs_r+0x80>
 800774e:	6825      	ldr	r5, [r4, #0]
 8007750:	6909      	ldr	r1, [r1, #16]
 8007752:	eba5 0901 	sub.w	r9, r5, r1
 8007756:	6965      	ldr	r5, [r4, #20]
 8007758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800775c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007760:	3301      	adds	r3, #1
 8007762:	444b      	add	r3, r9
 8007764:	106d      	asrs	r5, r5, #1
 8007766:	429d      	cmp	r5, r3
 8007768:	bf38      	it	cc
 800776a:	461d      	movcc	r5, r3
 800776c:	0553      	lsls	r3, r2, #21
 800776e:	d531      	bpl.n	80077d4 <__ssputs_r+0xa0>
 8007770:	4629      	mov	r1, r5
 8007772:	f000 fb63 	bl	8007e3c <_malloc_r>
 8007776:	4606      	mov	r6, r0
 8007778:	b950      	cbnz	r0, 8007790 <__ssputs_r+0x5c>
 800777a:	230c      	movs	r3, #12
 800777c:	f8ca 3000 	str.w	r3, [sl]
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007790:	6921      	ldr	r1, [r4, #16]
 8007792:	464a      	mov	r2, r9
 8007794:	f000 fabe 	bl	8007d14 <memcpy>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800779e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	6126      	str	r6, [r4, #16]
 80077a6:	6165      	str	r5, [r4, #20]
 80077a8:	444e      	add	r6, r9
 80077aa:	eba5 0509 	sub.w	r5, r5, r9
 80077ae:	6026      	str	r6, [r4, #0]
 80077b0:	60a5      	str	r5, [r4, #8]
 80077b2:	463e      	mov	r6, r7
 80077b4:	42be      	cmp	r6, r7
 80077b6:	d900      	bls.n	80077ba <__ssputs_r+0x86>
 80077b8:	463e      	mov	r6, r7
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	4632      	mov	r2, r6
 80077be:	4641      	mov	r1, r8
 80077c0:	f000 fab6 	bl	8007d30 <memmove>
 80077c4:	68a3      	ldr	r3, [r4, #8]
 80077c6:	1b9b      	subs	r3, r3, r6
 80077c8:	60a3      	str	r3, [r4, #8]
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4433      	add	r3, r6
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	2000      	movs	r0, #0
 80077d2:	e7db      	b.n	800778c <__ssputs_r+0x58>
 80077d4:	462a      	mov	r2, r5
 80077d6:	f000 fba5 	bl	8007f24 <_realloc_r>
 80077da:	4606      	mov	r6, r0
 80077dc:	2800      	cmp	r0, #0
 80077de:	d1e1      	bne.n	80077a4 <__ssputs_r+0x70>
 80077e0:	6921      	ldr	r1, [r4, #16]
 80077e2:	4650      	mov	r0, sl
 80077e4:	f000 fabe 	bl	8007d64 <_free_r>
 80077e8:	e7c7      	b.n	800777a <__ssputs_r+0x46>
	...

080077ec <_svfiprintf_r>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	4698      	mov	r8, r3
 80077f2:	898b      	ldrh	r3, [r1, #12]
 80077f4:	061b      	lsls	r3, r3, #24
 80077f6:	b09d      	sub	sp, #116	; 0x74
 80077f8:	4607      	mov	r7, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	4614      	mov	r4, r2
 80077fe:	d50e      	bpl.n	800781e <_svfiprintf_r+0x32>
 8007800:	690b      	ldr	r3, [r1, #16]
 8007802:	b963      	cbnz	r3, 800781e <_svfiprintf_r+0x32>
 8007804:	2140      	movs	r1, #64	; 0x40
 8007806:	f000 fb19 	bl	8007e3c <_malloc_r>
 800780a:	6028      	str	r0, [r5, #0]
 800780c:	6128      	str	r0, [r5, #16]
 800780e:	b920      	cbnz	r0, 800781a <_svfiprintf_r+0x2e>
 8007810:	230c      	movs	r3, #12
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	e0d1      	b.n	80079be <_svfiprintf_r+0x1d2>
 800781a:	2340      	movs	r3, #64	; 0x40
 800781c:	616b      	str	r3, [r5, #20]
 800781e:	2300      	movs	r3, #0
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
 8007822:	2320      	movs	r3, #32
 8007824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007828:	f8cd 800c 	str.w	r8, [sp, #12]
 800782c:	2330      	movs	r3, #48	; 0x30
 800782e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079d8 <_svfiprintf_r+0x1ec>
 8007832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007836:	f04f 0901 	mov.w	r9, #1
 800783a:	4623      	mov	r3, r4
 800783c:	469a      	mov	sl, r3
 800783e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007842:	b10a      	cbz	r2, 8007848 <_svfiprintf_r+0x5c>
 8007844:	2a25      	cmp	r2, #37	; 0x25
 8007846:	d1f9      	bne.n	800783c <_svfiprintf_r+0x50>
 8007848:	ebba 0b04 	subs.w	fp, sl, r4
 800784c:	d00b      	beq.n	8007866 <_svfiprintf_r+0x7a>
 800784e:	465b      	mov	r3, fp
 8007850:	4622      	mov	r2, r4
 8007852:	4629      	mov	r1, r5
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff ff6d 	bl	8007734 <__ssputs_r>
 800785a:	3001      	adds	r0, #1
 800785c:	f000 80aa 	beq.w	80079b4 <_svfiprintf_r+0x1c8>
 8007860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007862:	445a      	add	r2, fp
 8007864:	9209      	str	r2, [sp, #36]	; 0x24
 8007866:	f89a 3000 	ldrb.w	r3, [sl]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a2 	beq.w	80079b4 <_svfiprintf_r+0x1c8>
 8007870:	2300      	movs	r3, #0
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800787a:	f10a 0a01 	add.w	sl, sl, #1
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007886:	931a      	str	r3, [sp, #104]	; 0x68
 8007888:	4654      	mov	r4, sl
 800788a:	2205      	movs	r2, #5
 800788c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007890:	4851      	ldr	r0, [pc, #324]	; (80079d8 <_svfiprintf_r+0x1ec>)
 8007892:	f7f8 fd25 	bl	80002e0 <memchr>
 8007896:	9a04      	ldr	r2, [sp, #16]
 8007898:	b9d8      	cbnz	r0, 80078d2 <_svfiprintf_r+0xe6>
 800789a:	06d0      	lsls	r0, r2, #27
 800789c:	bf44      	itt	mi
 800789e:	2320      	movmi	r3, #32
 80078a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078a4:	0711      	lsls	r1, r2, #28
 80078a6:	bf44      	itt	mi
 80078a8:	232b      	movmi	r3, #43	; 0x2b
 80078aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ae:	f89a 3000 	ldrb.w	r3, [sl]
 80078b2:	2b2a      	cmp	r3, #42	; 0x2a
 80078b4:	d015      	beq.n	80078e2 <_svfiprintf_r+0xf6>
 80078b6:	9a07      	ldr	r2, [sp, #28]
 80078b8:	4654      	mov	r4, sl
 80078ba:	2000      	movs	r0, #0
 80078bc:	f04f 0c0a 	mov.w	ip, #10
 80078c0:	4621      	mov	r1, r4
 80078c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078c6:	3b30      	subs	r3, #48	; 0x30
 80078c8:	2b09      	cmp	r3, #9
 80078ca:	d94e      	bls.n	800796a <_svfiprintf_r+0x17e>
 80078cc:	b1b0      	cbz	r0, 80078fc <_svfiprintf_r+0x110>
 80078ce:	9207      	str	r2, [sp, #28]
 80078d0:	e014      	b.n	80078fc <_svfiprintf_r+0x110>
 80078d2:	eba0 0308 	sub.w	r3, r0, r8
 80078d6:	fa09 f303 	lsl.w	r3, r9, r3
 80078da:	4313      	orrs	r3, r2
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	46a2      	mov	sl, r4
 80078e0:	e7d2      	b.n	8007888 <_svfiprintf_r+0x9c>
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	1d19      	adds	r1, r3, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	9103      	str	r1, [sp, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfbb      	ittet	lt
 80078ee:	425b      	neglt	r3, r3
 80078f0:	f042 0202 	orrlt.w	r2, r2, #2
 80078f4:	9307      	strge	r3, [sp, #28]
 80078f6:	9307      	strlt	r3, [sp, #28]
 80078f8:	bfb8      	it	lt
 80078fa:	9204      	strlt	r2, [sp, #16]
 80078fc:	7823      	ldrb	r3, [r4, #0]
 80078fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007900:	d10c      	bne.n	800791c <_svfiprintf_r+0x130>
 8007902:	7863      	ldrb	r3, [r4, #1]
 8007904:	2b2a      	cmp	r3, #42	; 0x2a
 8007906:	d135      	bne.n	8007974 <_svfiprintf_r+0x188>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	1d1a      	adds	r2, r3, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	9203      	str	r2, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfb8      	it	lt
 8007914:	f04f 33ff 	movlt.w	r3, #4294967295
 8007918:	3402      	adds	r4, #2
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079e8 <_svfiprintf_r+0x1fc>
 8007920:	7821      	ldrb	r1, [r4, #0]
 8007922:	2203      	movs	r2, #3
 8007924:	4650      	mov	r0, sl
 8007926:	f7f8 fcdb 	bl	80002e0 <memchr>
 800792a:	b140      	cbz	r0, 800793e <_svfiprintf_r+0x152>
 800792c:	2340      	movs	r3, #64	; 0x40
 800792e:	eba0 000a 	sub.w	r0, r0, sl
 8007932:	fa03 f000 	lsl.w	r0, r3, r0
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	4303      	orrs	r3, r0
 800793a:	3401      	adds	r4, #1
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007942:	4826      	ldr	r0, [pc, #152]	; (80079dc <_svfiprintf_r+0x1f0>)
 8007944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007948:	2206      	movs	r2, #6
 800794a:	f7f8 fcc9 	bl	80002e0 <memchr>
 800794e:	2800      	cmp	r0, #0
 8007950:	d038      	beq.n	80079c4 <_svfiprintf_r+0x1d8>
 8007952:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <_svfiprintf_r+0x1f4>)
 8007954:	bb1b      	cbnz	r3, 800799e <_svfiprintf_r+0x1b2>
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	3307      	adds	r3, #7
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	3308      	adds	r3, #8
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	4433      	add	r3, r6
 8007966:	9309      	str	r3, [sp, #36]	; 0x24
 8007968:	e767      	b.n	800783a <_svfiprintf_r+0x4e>
 800796a:	fb0c 3202 	mla	r2, ip, r2, r3
 800796e:	460c      	mov	r4, r1
 8007970:	2001      	movs	r0, #1
 8007972:	e7a5      	b.n	80078c0 <_svfiprintf_r+0xd4>
 8007974:	2300      	movs	r3, #0
 8007976:	3401      	adds	r4, #1
 8007978:	9305      	str	r3, [sp, #20]
 800797a:	4619      	mov	r1, r3
 800797c:	f04f 0c0a 	mov.w	ip, #10
 8007980:	4620      	mov	r0, r4
 8007982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007986:	3a30      	subs	r2, #48	; 0x30
 8007988:	2a09      	cmp	r2, #9
 800798a:	d903      	bls.n	8007994 <_svfiprintf_r+0x1a8>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0c5      	beq.n	800791c <_svfiprintf_r+0x130>
 8007990:	9105      	str	r1, [sp, #20]
 8007992:	e7c3      	b.n	800791c <_svfiprintf_r+0x130>
 8007994:	fb0c 2101 	mla	r1, ip, r1, r2
 8007998:	4604      	mov	r4, r0
 800799a:	2301      	movs	r3, #1
 800799c:	e7f0      	b.n	8007980 <_svfiprintf_r+0x194>
 800799e:	ab03      	add	r3, sp, #12
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	462a      	mov	r2, r5
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <_svfiprintf_r+0x1f8>)
 80079a6:	a904      	add	r1, sp, #16
 80079a8:	4638      	mov	r0, r7
 80079aa:	f3af 8000 	nop.w
 80079ae:	1c42      	adds	r2, r0, #1
 80079b0:	4606      	mov	r6, r0
 80079b2:	d1d6      	bne.n	8007962 <_svfiprintf_r+0x176>
 80079b4:	89ab      	ldrh	r3, [r5, #12]
 80079b6:	065b      	lsls	r3, r3, #25
 80079b8:	f53f af2c 	bmi.w	8007814 <_svfiprintf_r+0x28>
 80079bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079be:	b01d      	add	sp, #116	; 0x74
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	ab03      	add	r3, sp, #12
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	462a      	mov	r2, r5
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <_svfiprintf_r+0x1f8>)
 80079cc:	a904      	add	r1, sp, #16
 80079ce:	4638      	mov	r0, r7
 80079d0:	f000 f87a 	bl	8007ac8 <_printf_i>
 80079d4:	e7eb      	b.n	80079ae <_svfiprintf_r+0x1c2>
 80079d6:	bf00      	nop
 80079d8:	0800eed9 	.word	0x0800eed9
 80079dc:	0800eee3 	.word	0x0800eee3
 80079e0:	00000000 	.word	0x00000000
 80079e4:	08007735 	.word	0x08007735
 80079e8:	0800eedf 	.word	0x0800eedf

080079ec <_printf_common>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	4616      	mov	r6, r2
 80079f2:	4699      	mov	r9, r3
 80079f4:	688a      	ldr	r2, [r1, #8]
 80079f6:	690b      	ldr	r3, [r1, #16]
 80079f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	bfb8      	it	lt
 8007a00:	4613      	movlt	r3, r2
 8007a02:	6033      	str	r3, [r6, #0]
 8007a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a08:	4607      	mov	r7, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	b10a      	cbz	r2, 8007a12 <_printf_common+0x26>
 8007a0e:	3301      	adds	r3, #1
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	0699      	lsls	r1, r3, #26
 8007a16:	bf42      	ittt	mi
 8007a18:	6833      	ldrmi	r3, [r6, #0]
 8007a1a:	3302      	addmi	r3, #2
 8007a1c:	6033      	strmi	r3, [r6, #0]
 8007a1e:	6825      	ldr	r5, [r4, #0]
 8007a20:	f015 0506 	ands.w	r5, r5, #6
 8007a24:	d106      	bne.n	8007a34 <_printf_common+0x48>
 8007a26:	f104 0a19 	add.w	sl, r4, #25
 8007a2a:	68e3      	ldr	r3, [r4, #12]
 8007a2c:	6832      	ldr	r2, [r6, #0]
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	42ab      	cmp	r3, r5
 8007a32:	dc26      	bgt.n	8007a82 <_printf_common+0x96>
 8007a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a38:	1e13      	subs	r3, r2, #0
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	bf18      	it	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	0692      	lsls	r2, r2, #26
 8007a42:	d42b      	bmi.n	8007a9c <_printf_common+0xb0>
 8007a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	47c0      	blx	r8
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d01e      	beq.n	8007a90 <_printf_common+0xa4>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	68e5      	ldr	r5, [r4, #12]
 8007a56:	6832      	ldr	r2, [r6, #0]
 8007a58:	f003 0306 	and.w	r3, r3, #6
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	bf08      	it	eq
 8007a60:	1aad      	subeq	r5, r5, r2
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	6922      	ldr	r2, [r4, #16]
 8007a66:	bf0c      	ite	eq
 8007a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a6c:	2500      	movne	r5, #0
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	bfc4      	itt	gt
 8007a72:	1a9b      	subgt	r3, r3, r2
 8007a74:	18ed      	addgt	r5, r5, r3
 8007a76:	2600      	movs	r6, #0
 8007a78:	341a      	adds	r4, #26
 8007a7a:	42b5      	cmp	r5, r6
 8007a7c:	d11a      	bne.n	8007ab4 <_printf_common+0xc8>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	e008      	b.n	8007a94 <_printf_common+0xa8>
 8007a82:	2301      	movs	r3, #1
 8007a84:	4652      	mov	r2, sl
 8007a86:	4649      	mov	r1, r9
 8007a88:	4638      	mov	r0, r7
 8007a8a:	47c0      	blx	r8
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d103      	bne.n	8007a98 <_printf_common+0xac>
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a98:	3501      	adds	r5, #1
 8007a9a:	e7c6      	b.n	8007a2a <_printf_common+0x3e>
 8007a9c:	18e1      	adds	r1, r4, r3
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	2030      	movs	r0, #48	; 0x30
 8007aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aa6:	4422      	add	r2, r4
 8007aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	e7c7      	b.n	8007a44 <_printf_common+0x58>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c0      	blx	r8
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d0e6      	beq.n	8007a90 <_printf_common+0xa4>
 8007ac2:	3601      	adds	r6, #1
 8007ac4:	e7d9      	b.n	8007a7a <_printf_common+0x8e>
	...

08007ac8 <_printf_i>:
 8007ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	7e0f      	ldrb	r7, [r1, #24]
 8007ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ad0:	2f78      	cmp	r7, #120	; 0x78
 8007ad2:	4691      	mov	r9, r2
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	469a      	mov	sl, r3
 8007ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ade:	d807      	bhi.n	8007af0 <_printf_i+0x28>
 8007ae0:	2f62      	cmp	r7, #98	; 0x62
 8007ae2:	d80a      	bhi.n	8007afa <_printf_i+0x32>
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	f000 80d8 	beq.w	8007c9a <_printf_i+0x1d2>
 8007aea:	2f58      	cmp	r7, #88	; 0x58
 8007aec:	f000 80a3 	beq.w	8007c36 <_printf_i+0x16e>
 8007af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007af8:	e03a      	b.n	8007b70 <_printf_i+0xa8>
 8007afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007afe:	2b15      	cmp	r3, #21
 8007b00:	d8f6      	bhi.n	8007af0 <_printf_i+0x28>
 8007b02:	a101      	add	r1, pc, #4	; (adr r1, 8007b08 <_printf_i+0x40>)
 8007b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b08:	08007b61 	.word	0x08007b61
 8007b0c:	08007b75 	.word	0x08007b75
 8007b10:	08007af1 	.word	0x08007af1
 8007b14:	08007af1 	.word	0x08007af1
 8007b18:	08007af1 	.word	0x08007af1
 8007b1c:	08007af1 	.word	0x08007af1
 8007b20:	08007b75 	.word	0x08007b75
 8007b24:	08007af1 	.word	0x08007af1
 8007b28:	08007af1 	.word	0x08007af1
 8007b2c:	08007af1 	.word	0x08007af1
 8007b30:	08007af1 	.word	0x08007af1
 8007b34:	08007c81 	.word	0x08007c81
 8007b38:	08007ba5 	.word	0x08007ba5
 8007b3c:	08007c63 	.word	0x08007c63
 8007b40:	08007af1 	.word	0x08007af1
 8007b44:	08007af1 	.word	0x08007af1
 8007b48:	08007ca3 	.word	0x08007ca3
 8007b4c:	08007af1 	.word	0x08007af1
 8007b50:	08007ba5 	.word	0x08007ba5
 8007b54:	08007af1 	.word	0x08007af1
 8007b58:	08007af1 	.word	0x08007af1
 8007b5c:	08007c6b 	.word	0x08007c6b
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	1d1a      	adds	r2, r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	602a      	str	r2, [r5, #0]
 8007b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0a3      	b.n	8007cbc <_printf_i+0x1f4>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	6829      	ldr	r1, [r5, #0]
 8007b78:	0606      	lsls	r6, r0, #24
 8007b7a:	f101 0304 	add.w	r3, r1, #4
 8007b7e:	d50a      	bpl.n	8007b96 <_printf_i+0xce>
 8007b80:	680e      	ldr	r6, [r1, #0]
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	da03      	bge.n	8007b90 <_printf_i+0xc8>
 8007b88:	232d      	movs	r3, #45	; 0x2d
 8007b8a:	4276      	negs	r6, r6
 8007b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b90:	485e      	ldr	r0, [pc, #376]	; (8007d0c <_printf_i+0x244>)
 8007b92:	230a      	movs	r3, #10
 8007b94:	e019      	b.n	8007bca <_printf_i+0x102>
 8007b96:	680e      	ldr	r6, [r1, #0]
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b9e:	bf18      	it	ne
 8007ba0:	b236      	sxthne	r6, r6
 8007ba2:	e7ef      	b.n	8007b84 <_printf_i+0xbc>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	1d19      	adds	r1, r3, #4
 8007baa:	6029      	str	r1, [r5, #0]
 8007bac:	0601      	lsls	r1, r0, #24
 8007bae:	d501      	bpl.n	8007bb4 <_printf_i+0xec>
 8007bb0:	681e      	ldr	r6, [r3, #0]
 8007bb2:	e002      	b.n	8007bba <_printf_i+0xf2>
 8007bb4:	0646      	lsls	r6, r0, #25
 8007bb6:	d5fb      	bpl.n	8007bb0 <_printf_i+0xe8>
 8007bb8:	881e      	ldrh	r6, [r3, #0]
 8007bba:	4854      	ldr	r0, [pc, #336]	; (8007d0c <_printf_i+0x244>)
 8007bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8007bbe:	bf0c      	ite	eq
 8007bc0:	2308      	moveq	r3, #8
 8007bc2:	230a      	movne	r3, #10
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bca:	6865      	ldr	r5, [r4, #4]
 8007bcc:	60a5      	str	r5, [r4, #8]
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	bfa2      	ittt	ge
 8007bd2:	6821      	ldrge	r1, [r4, #0]
 8007bd4:	f021 0104 	bicge.w	r1, r1, #4
 8007bd8:	6021      	strge	r1, [r4, #0]
 8007bda:	b90e      	cbnz	r6, 8007be0 <_printf_i+0x118>
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	d04d      	beq.n	8007c7c <_printf_i+0x1b4>
 8007be0:	4615      	mov	r5, r2
 8007be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007be6:	fb03 6711 	mls	r7, r3, r1, r6
 8007bea:	5dc7      	ldrb	r7, [r0, r7]
 8007bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bf0:	4637      	mov	r7, r6
 8007bf2:	42bb      	cmp	r3, r7
 8007bf4:	460e      	mov	r6, r1
 8007bf6:	d9f4      	bls.n	8007be2 <_printf_i+0x11a>
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d10b      	bne.n	8007c14 <_printf_i+0x14c>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	07de      	lsls	r6, r3, #31
 8007c00:	d508      	bpl.n	8007c14 <_printf_i+0x14c>
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	6861      	ldr	r1, [r4, #4]
 8007c06:	4299      	cmp	r1, r3
 8007c08:	bfde      	ittt	le
 8007c0a:	2330      	movle	r3, #48	; 0x30
 8007c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c14:	1b52      	subs	r2, r2, r5
 8007c16:	6122      	str	r2, [r4, #16]
 8007c18:	f8cd a000 	str.w	sl, [sp]
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	aa03      	add	r2, sp, #12
 8007c20:	4621      	mov	r1, r4
 8007c22:	4640      	mov	r0, r8
 8007c24:	f7ff fee2 	bl	80079ec <_printf_common>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d14c      	bne.n	8007cc6 <_printf_i+0x1fe>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b004      	add	sp, #16
 8007c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c36:	4835      	ldr	r0, [pc, #212]	; (8007d0c <_printf_i+0x244>)
 8007c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c3c:	6829      	ldr	r1, [r5, #0]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c44:	6029      	str	r1, [r5, #0]
 8007c46:	061d      	lsls	r5, r3, #24
 8007c48:	d514      	bpl.n	8007c74 <_printf_i+0x1ac>
 8007c4a:	07df      	lsls	r7, r3, #31
 8007c4c:	bf44      	itt	mi
 8007c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c52:	6023      	strmi	r3, [r4, #0]
 8007c54:	b91e      	cbnz	r6, 8007c5e <_printf_i+0x196>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	f023 0320 	bic.w	r3, r3, #32
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	2310      	movs	r3, #16
 8007c60:	e7b0      	b.n	8007bc4 <_printf_i+0xfc>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	f043 0320 	orr.w	r3, r3, #32
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	2378      	movs	r3, #120	; 0x78
 8007c6c:	4828      	ldr	r0, [pc, #160]	; (8007d10 <_printf_i+0x248>)
 8007c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c72:	e7e3      	b.n	8007c3c <_printf_i+0x174>
 8007c74:	0659      	lsls	r1, r3, #25
 8007c76:	bf48      	it	mi
 8007c78:	b2b6      	uxthmi	r6, r6
 8007c7a:	e7e6      	b.n	8007c4a <_printf_i+0x182>
 8007c7c:	4615      	mov	r5, r2
 8007c7e:	e7bb      	b.n	8007bf8 <_printf_i+0x130>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	6826      	ldr	r6, [r4, #0]
 8007c84:	6961      	ldr	r1, [r4, #20]
 8007c86:	1d18      	adds	r0, r3, #4
 8007c88:	6028      	str	r0, [r5, #0]
 8007c8a:	0635      	lsls	r5, r6, #24
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	d501      	bpl.n	8007c94 <_printf_i+0x1cc>
 8007c90:	6019      	str	r1, [r3, #0]
 8007c92:	e002      	b.n	8007c9a <_printf_i+0x1d2>
 8007c94:	0670      	lsls	r0, r6, #25
 8007c96:	d5fb      	bpl.n	8007c90 <_printf_i+0x1c8>
 8007c98:	8019      	strh	r1, [r3, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6123      	str	r3, [r4, #16]
 8007c9e:	4615      	mov	r5, r2
 8007ca0:	e7ba      	b.n	8007c18 <_printf_i+0x150>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	1d1a      	adds	r2, r3, #4
 8007ca6:	602a      	str	r2, [r5, #0]
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	6862      	ldr	r2, [r4, #4]
 8007cac:	2100      	movs	r1, #0
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f7f8 fb16 	bl	80002e0 <memchr>
 8007cb4:	b108      	cbz	r0, 8007cba <_printf_i+0x1f2>
 8007cb6:	1b40      	subs	r0, r0, r5
 8007cb8:	6060      	str	r0, [r4, #4]
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	6123      	str	r3, [r4, #16]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc4:	e7a8      	b.n	8007c18 <_printf_i+0x150>
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4649      	mov	r1, r9
 8007ccc:	4640      	mov	r0, r8
 8007cce:	47d0      	blx	sl
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d0ab      	beq.n	8007c2c <_printf_i+0x164>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	079b      	lsls	r3, r3, #30
 8007cd8:	d413      	bmi.n	8007d02 <_printf_i+0x23a>
 8007cda:	68e0      	ldr	r0, [r4, #12]
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	4298      	cmp	r0, r3
 8007ce0:	bfb8      	it	lt
 8007ce2:	4618      	movlt	r0, r3
 8007ce4:	e7a4      	b.n	8007c30 <_printf_i+0x168>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4632      	mov	r2, r6
 8007cea:	4649      	mov	r1, r9
 8007cec:	4640      	mov	r0, r8
 8007cee:	47d0      	blx	sl
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d09b      	beq.n	8007c2c <_printf_i+0x164>
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	9903      	ldr	r1, [sp, #12]
 8007cfa:	1a5b      	subs	r3, r3, r1
 8007cfc:	42ab      	cmp	r3, r5
 8007cfe:	dcf2      	bgt.n	8007ce6 <_printf_i+0x21e>
 8007d00:	e7eb      	b.n	8007cda <_printf_i+0x212>
 8007d02:	2500      	movs	r5, #0
 8007d04:	f104 0619 	add.w	r6, r4, #25
 8007d08:	e7f5      	b.n	8007cf6 <_printf_i+0x22e>
 8007d0a:	bf00      	nop
 8007d0c:	0800eeea 	.word	0x0800eeea
 8007d10:	0800eefb 	.word	0x0800eefb

08007d14 <memcpy>:
 8007d14:	440a      	add	r2, r1
 8007d16:	4291      	cmp	r1, r2
 8007d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d1c:	d100      	bne.n	8007d20 <memcpy+0xc>
 8007d1e:	4770      	bx	lr
 8007d20:	b510      	push	{r4, lr}
 8007d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	d1f9      	bne.n	8007d22 <memcpy+0xe>
 8007d2e:	bd10      	pop	{r4, pc}

08007d30 <memmove>:
 8007d30:	4288      	cmp	r0, r1
 8007d32:	b510      	push	{r4, lr}
 8007d34:	eb01 0402 	add.w	r4, r1, r2
 8007d38:	d902      	bls.n	8007d40 <memmove+0x10>
 8007d3a:	4284      	cmp	r4, r0
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	d807      	bhi.n	8007d50 <memmove+0x20>
 8007d40:	1e43      	subs	r3, r0, #1
 8007d42:	42a1      	cmp	r1, r4
 8007d44:	d008      	beq.n	8007d58 <memmove+0x28>
 8007d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d4e:	e7f8      	b.n	8007d42 <memmove+0x12>
 8007d50:	4402      	add	r2, r0
 8007d52:	4601      	mov	r1, r0
 8007d54:	428a      	cmp	r2, r1
 8007d56:	d100      	bne.n	8007d5a <memmove+0x2a>
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d62:	e7f7      	b.n	8007d54 <memmove+0x24>

08007d64 <_free_r>:
 8007d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d044      	beq.n	8007df4 <_free_r+0x90>
 8007d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d6e:	9001      	str	r0, [sp, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f1a1 0404 	sub.w	r4, r1, #4
 8007d76:	bfb8      	it	lt
 8007d78:	18e4      	addlt	r4, r4, r3
 8007d7a:	f000 f913 	bl	8007fa4 <__malloc_lock>
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <_free_r+0x94>)
 8007d80:	9801      	ldr	r0, [sp, #4]
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	b933      	cbnz	r3, 8007d94 <_free_r+0x30>
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	6014      	str	r4, [r2, #0]
 8007d8a:	b003      	add	sp, #12
 8007d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d90:	f000 b90e 	b.w	8007fb0 <__malloc_unlock>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d908      	bls.n	8007daa <_free_r+0x46>
 8007d98:	6825      	ldr	r5, [r4, #0]
 8007d9a:	1961      	adds	r1, r4, r5
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf01      	itttt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	1949      	addeq	r1, r1, r5
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	e7ed      	b.n	8007d86 <_free_r+0x22>
 8007daa:	461a      	mov	r2, r3
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b10b      	cbz	r3, 8007db4 <_free_r+0x50>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d9fa      	bls.n	8007daa <_free_r+0x46>
 8007db4:	6811      	ldr	r1, [r2, #0]
 8007db6:	1855      	adds	r5, r2, r1
 8007db8:	42a5      	cmp	r5, r4
 8007dba:	d10b      	bne.n	8007dd4 <_free_r+0x70>
 8007dbc:	6824      	ldr	r4, [r4, #0]
 8007dbe:	4421      	add	r1, r4
 8007dc0:	1854      	adds	r4, r2, r1
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	6011      	str	r1, [r2, #0]
 8007dc6:	d1e0      	bne.n	8007d8a <_free_r+0x26>
 8007dc8:	681c      	ldr	r4, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6053      	str	r3, [r2, #4]
 8007dce:	4421      	add	r1, r4
 8007dd0:	6011      	str	r1, [r2, #0]
 8007dd2:	e7da      	b.n	8007d8a <_free_r+0x26>
 8007dd4:	d902      	bls.n	8007ddc <_free_r+0x78>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	6003      	str	r3, [r0, #0]
 8007dda:	e7d6      	b.n	8007d8a <_free_r+0x26>
 8007ddc:	6825      	ldr	r5, [r4, #0]
 8007dde:	1961      	adds	r1, r4, r5
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf04      	itt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	bf04      	itt	eq
 8007dec:	1949      	addeq	r1, r1, r5
 8007dee:	6021      	streq	r1, [r4, #0]
 8007df0:	6054      	str	r4, [r2, #4]
 8007df2:	e7ca      	b.n	8007d8a <_free_r+0x26>
 8007df4:	b003      	add	sp, #12
 8007df6:	bd30      	pop	{r4, r5, pc}
 8007df8:	24000770 	.word	0x24000770

08007dfc <sbrk_aligned>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4e0e      	ldr	r6, [pc, #56]	; (8007e38 <sbrk_aligned+0x3c>)
 8007e00:	460c      	mov	r4, r1
 8007e02:	6831      	ldr	r1, [r6, #0]
 8007e04:	4605      	mov	r5, r0
 8007e06:	b911      	cbnz	r1, 8007e0e <sbrk_aligned+0x12>
 8007e08:	f000 f8bc 	bl	8007f84 <_sbrk_r>
 8007e0c:	6030      	str	r0, [r6, #0]
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 f8b7 	bl	8007f84 <_sbrk_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d00a      	beq.n	8007e30 <sbrk_aligned+0x34>
 8007e1a:	1cc4      	adds	r4, r0, #3
 8007e1c:	f024 0403 	bic.w	r4, r4, #3
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d007      	beq.n	8007e34 <sbrk_aligned+0x38>
 8007e24:	1a21      	subs	r1, r4, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f8ac 	bl	8007f84 <_sbrk_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d101      	bne.n	8007e34 <sbrk_aligned+0x38>
 8007e30:	f04f 34ff 	mov.w	r4, #4294967295
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	24000774 	.word	0x24000774

08007e3c <_malloc_r>:
 8007e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	1ccd      	adds	r5, r1, #3
 8007e42:	f025 0503 	bic.w	r5, r5, #3
 8007e46:	3508      	adds	r5, #8
 8007e48:	2d0c      	cmp	r5, #12
 8007e4a:	bf38      	it	cc
 8007e4c:	250c      	movcc	r5, #12
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	4607      	mov	r7, r0
 8007e52:	db01      	blt.n	8007e58 <_malloc_r+0x1c>
 8007e54:	42a9      	cmp	r1, r5
 8007e56:	d905      	bls.n	8007e64 <_malloc_r+0x28>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	4630      	mov	r0, r6
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	4e2e      	ldr	r6, [pc, #184]	; (8007f20 <_malloc_r+0xe4>)
 8007e66:	f000 f89d 	bl	8007fa4 <__malloc_lock>
 8007e6a:	6833      	ldr	r3, [r6, #0]
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	bb34      	cbnz	r4, 8007ebe <_malloc_r+0x82>
 8007e70:	4629      	mov	r1, r5
 8007e72:	4638      	mov	r0, r7
 8007e74:	f7ff ffc2 	bl	8007dfc <sbrk_aligned>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	d14d      	bne.n	8007f1a <_malloc_r+0xde>
 8007e7e:	6834      	ldr	r4, [r6, #0]
 8007e80:	4626      	mov	r6, r4
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d140      	bne.n	8007f08 <_malloc_r+0xcc>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	eb04 0803 	add.w	r8, r4, r3
 8007e90:	f000 f878 	bl	8007f84 <_sbrk_r>
 8007e94:	4580      	cmp	r8, r0
 8007e96:	d13a      	bne.n	8007f0e <_malloc_r+0xd2>
 8007e98:	6821      	ldr	r1, [r4, #0]
 8007e9a:	3503      	adds	r5, #3
 8007e9c:	1a6d      	subs	r5, r5, r1
 8007e9e:	f025 0503 	bic.w	r5, r5, #3
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	2d0c      	cmp	r5, #12
 8007ea6:	bf38      	it	cc
 8007ea8:	250c      	movcc	r5, #12
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff ffa5 	bl	8007dfc <sbrk_aligned>
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d02b      	beq.n	8007f0e <_malloc_r+0xd2>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	442b      	add	r3, r5
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	e00e      	b.n	8007edc <_malloc_r+0xa0>
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	1b52      	subs	r2, r2, r5
 8007ec2:	d41e      	bmi.n	8007f02 <_malloc_r+0xc6>
 8007ec4:	2a0b      	cmp	r2, #11
 8007ec6:	d916      	bls.n	8007ef6 <_malloc_r+0xba>
 8007ec8:	1961      	adds	r1, r4, r5
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	6025      	str	r5, [r4, #0]
 8007ece:	bf18      	it	ne
 8007ed0:	6059      	strne	r1, [r3, #4]
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	bf08      	it	eq
 8007ed6:	6031      	streq	r1, [r6, #0]
 8007ed8:	5162      	str	r2, [r4, r5]
 8007eda:	604b      	str	r3, [r1, #4]
 8007edc:	4638      	mov	r0, r7
 8007ede:	f104 060b 	add.w	r6, r4, #11
 8007ee2:	f000 f865 	bl	8007fb0 <__malloc_unlock>
 8007ee6:	f026 0607 	bic.w	r6, r6, #7
 8007eea:	1d23      	adds	r3, r4, #4
 8007eec:	1af2      	subs	r2, r6, r3
 8007eee:	d0b6      	beq.n	8007e5e <_malloc_r+0x22>
 8007ef0:	1b9b      	subs	r3, r3, r6
 8007ef2:	50a3      	str	r3, [r4, r2]
 8007ef4:	e7b3      	b.n	8007e5e <_malloc_r+0x22>
 8007ef6:	6862      	ldr	r2, [r4, #4]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	bf0c      	ite	eq
 8007efc:	6032      	streq	r2, [r6, #0]
 8007efe:	605a      	strne	r2, [r3, #4]
 8007f00:	e7ec      	b.n	8007edc <_malloc_r+0xa0>
 8007f02:	4623      	mov	r3, r4
 8007f04:	6864      	ldr	r4, [r4, #4]
 8007f06:	e7b2      	b.n	8007e6e <_malloc_r+0x32>
 8007f08:	4634      	mov	r4, r6
 8007f0a:	6876      	ldr	r6, [r6, #4]
 8007f0c:	e7b9      	b.n	8007e82 <_malloc_r+0x46>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	4638      	mov	r0, r7
 8007f14:	f000 f84c 	bl	8007fb0 <__malloc_unlock>
 8007f18:	e7a1      	b.n	8007e5e <_malloc_r+0x22>
 8007f1a:	6025      	str	r5, [r4, #0]
 8007f1c:	e7de      	b.n	8007edc <_malloc_r+0xa0>
 8007f1e:	bf00      	nop
 8007f20:	24000770 	.word	0x24000770

08007f24 <_realloc_r>:
 8007f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f28:	4680      	mov	r8, r0
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	b921      	cbnz	r1, 8007f3a <_realloc_r+0x16>
 8007f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4611      	mov	r1, r2
 8007f36:	f7ff bf81 	b.w	8007e3c <_malloc_r>
 8007f3a:	b92a      	cbnz	r2, 8007f48 <_realloc_r+0x24>
 8007f3c:	f7ff ff12 	bl	8007d64 <_free_r>
 8007f40:	4625      	mov	r5, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	f000 f838 	bl	8007fbc <_malloc_usable_size_r>
 8007f4c:	4284      	cmp	r4, r0
 8007f4e:	4607      	mov	r7, r0
 8007f50:	d802      	bhi.n	8007f58 <_realloc_r+0x34>
 8007f52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f56:	d812      	bhi.n	8007f7e <_realloc_r+0x5a>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	f7ff ff6e 	bl	8007e3c <_malloc_r>
 8007f60:	4605      	mov	r5, r0
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0ed      	beq.n	8007f42 <_realloc_r+0x1e>
 8007f66:	42bc      	cmp	r4, r7
 8007f68:	4622      	mov	r2, r4
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	bf28      	it	cs
 8007f6e:	463a      	movcs	r2, r7
 8007f70:	f7ff fed0 	bl	8007d14 <memcpy>
 8007f74:	4631      	mov	r1, r6
 8007f76:	4640      	mov	r0, r8
 8007f78:	f7ff fef4 	bl	8007d64 <_free_r>
 8007f7c:	e7e1      	b.n	8007f42 <_realloc_r+0x1e>
 8007f7e:	4635      	mov	r5, r6
 8007f80:	e7df      	b.n	8007f42 <_realloc_r+0x1e>
	...

08007f84 <_sbrk_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	; (8007fa0 <_sbrk_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f8 fcb0 	bl	80008f4 <_sbrk>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_sbrk_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_sbrk_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	24000778 	.word	0x24000778

08007fa4 <__malloc_lock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_lock+0x8>)
 8007fa6:	f000 b811 	b.w	8007fcc <__retarget_lock_acquire_recursive>
 8007faa:	bf00      	nop
 8007fac:	2400077c 	.word	0x2400077c

08007fb0 <__malloc_unlock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__malloc_unlock+0x8>)
 8007fb2:	f000 b80c 	b.w	8007fce <__retarget_lock_release_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	2400077c 	.word	0x2400077c

08007fbc <_malloc_usable_size_r>:
 8007fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc0:	1f18      	subs	r0, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bfbc      	itt	lt
 8007fc6:	580b      	ldrlt	r3, [r1, r0]
 8007fc8:	18c0      	addlt	r0, r0, r3
 8007fca:	4770      	bx	lr

08007fcc <__retarget_lock_acquire_recursive>:
 8007fcc:	4770      	bx	lr

08007fce <__retarget_lock_release_recursive>:
 8007fce:	4770      	bx	lr

08007fd0 <_init>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr

08007fdc <_fini>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr
