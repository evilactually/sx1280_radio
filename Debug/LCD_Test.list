
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  24000000  08008f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000704  24000104  0800906c  00020104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000808  0800906c  00020808  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017052  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e3a  00000000  00000000  00037184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001218  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010a0  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000397d1  00000000  00000000  0003c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001716e  00000000  00000000  00075a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001699f0  00000000  00000000  0008cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f65a7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e70  00000000  00000000  001f65f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000104 	.word	0x24000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008488 	.word	0x08008488

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000108 	.word	0x24000108
 80002dc:	08008488 	.word	0x08008488

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b49      	ldr	r3, [pc, #292]	; (80004bc <MX_GPIO_Init+0x13c>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a47      	ldr	r2, [pc, #284]	; (80004bc <MX_GPIO_Init+0x13c>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b45      	ldr	r3, [pc, #276]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b41      	ldr	r3, [pc, #260]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b3d      	ldr	r3, [pc, #244]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b3a      	ldr	r3, [pc, #232]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a38      	ldr	r2, [pc, #224]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b36      	ldr	r3, [pc, #216]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b32      	ldr	r3, [pc, #200]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a31      	ldr	r2, [pc, #196]	; (80004bc <MX_GPIO_Init+0x13c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <MX_GPIO_Init+0x13c>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E3_Pin|NSS_Pin|NRESET_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8000414:	482a      	ldr	r0, [pc, #168]	; (80004c0 <MX_GPIO_Init+0x140>)
 8000416:	f003 f841 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000420:	4827      	ldr	r0, [pc, #156]	; (80004c0 <MX_GPIO_Init+0x140>)
 8000422:	f003 f83b 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PE10 */
  GPIO_InitStruct.Pin = E3_Pin|GPIO_PIN_10;
 8000426:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4820      	ldr	r0, [pc, #128]	; (80004c0 <MX_GPIO_Init+0x140>)
 8000440:	f002 fe7c 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000444:	2310      	movs	r3, #16
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000448:	2311      	movs	r3, #17
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044c:	2301      	movs	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	4819      	ldr	r0, [pc, #100]	; (80004c0 <MX_GPIO_Init+0x140>)
 800045c:	f002 fe6e 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRESET_Pin;
 8000460:	2340      	movs	r3, #64	; 0x40
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000464:	2311      	movs	r3, #17
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRESET_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <MX_GPIO_Init+0x140>)
 8000478:	f002 fe60 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	4619      	mov	r1, r3
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_GPIO_Init+0x144>)
 8000492:	f002 fe53 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000496:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4619      	mov	r1, r3
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_GPIO_Init+0x140>)
 80004b0:	f002 fe44 	bl	800313c <HAL_GPIO_Init>

}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	; 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	58024400 	.word	0x58024400
 80004c0:	58021000 	.word	0x58021000
 80004c4:	58020800 	.word	0x58020800

080004c8 <radio_spi>:
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
}

uint8_t radio_spi(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80004c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004cc:	b089      	sub	sp, #36	; 0x24
 80004ce:	af02      	add	r7, sp, #8
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	4613      	mov	r3, r2
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	466b      	mov	r3, sp
 80004dc:	461e      	mov	r6, r3
	uint8_t rxData[Size];
 80004de:	88f9      	ldrh	r1, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	3b01      	subs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	b28b      	uxth	r3, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	4698      	mov	r8, r3
 80004ec:	4691      	mov	r9, r2
 80004ee:	f04f 0200 	mov.w	r2, #0
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80004fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80004fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000502:	b28b      	uxth	r3, r1
 8000504:	2200      	movs	r2, #0
 8000506:	461c      	mov	r4, r3
 8000508:	4615      	mov	r5, r2
 800050a:	f04f 0200 	mov.w	r2, #0
 800050e:	f04f 0300 	mov.w	r3, #0
 8000512:	00eb      	lsls	r3, r5, #3
 8000514:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000518:	00e2      	lsls	r2, r4, #3
 800051a:	460b      	mov	r3, r1
 800051c:	3307      	adds	r3, #7
 800051e:	08db      	lsrs	r3, r3, #3
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	ebad 0d03 	sub.w	sp, sp, r3
 8000526:	ab02      	add	r3, sp, #8
 8000528:	3300      	adds	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
	rxData[0] = 0;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(hspi, pData, (uint8_t*)&rxData, Size, Timeout);
 8000532:	88fa      	ldrh	r2, [r7, #6]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	68b9      	ldr	r1, [r7, #8]
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f006 fa16 	bl	8006970 <HAL_SPI_TransmitReceive>
	return rxData[0];
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	46b5      	mov	sp, r6
}
 800054a:	4618      	mov	r0, r3
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000554 <radio_powerup>:

void radio_powerup()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	// Pull down NREST for 100ms and got to HIGH IMPEDENCE state to reset the radio
	HAL_GPIO_WritePin(GPIOE, NRESET_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <radio_powerup+0x6c>)
 8000560:	f002 ff9c 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, NRESET_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <radio_powerup+0x6c>)
 800056a:	f002 ff97 	bl	800349c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f002 fcd0 	bl	8002f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, NRESET_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <radio_powerup+0x6c>)
 800057a:	f002 ff8f 	bl	800349c <HAL_GPIO_WritePin>

	HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	; 0x64
 8000580:	f002 fcc8 	bl	8002f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2110      	movs	r1, #16
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <radio_powerup+0x6c>)
 800058a:	f002 ff87 	bl	800349c <HAL_GPIO_WritePin>
	uint8_t data[2] = {0x8a, 0x00}; // SetPacketType(GFSK)
 800058e:	238a      	movs	r3, #138	; 0x8a
 8000590:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <radio_powerup+0x6c>)
 8000598:	f002 ff80 	bl	800349c <HAL_GPIO_WritePin>
	uint8_t status = radio_spi(&hspi1, (uint8_t*)&data, 2, 100);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2202      	movs	r2, #2
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <radio_powerup+0x70>)
 80005a4:	f7ff ff90 	bl	80004c8 <radio_spi>
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <radio_powerup+0x6c>)
 80005b2:	f002 ff73 	bl	800349c <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58021000 	.word	0x58021000
 80005c4:	24000144 	.word	0x24000144

080005c8 <radio_setup>:
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, cs ? GPIO_PIN_RESET : GPIO_PIN_SET );
}



void radio_setup() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b090      	sub	sp, #64	; 0x40
 80005cc:	af02      	add	r7, sp, #8
	uint8_t text[20];
	HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f002 fc9f 	bl	8002f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2110      	movs	r1, #16
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <radio_setup+0x7c>)
 80005dc:	f002 ff5e 	bl	800349c <HAL_GPIO_WritePin>
	// Set packet type to GFSK
	uint8_t data[2] = {0x8a, 00}; // SetPacketType(GFSK)
 80005e0:	238a      	movs	r3, #138	; 0x8a
 80005e2:	83bb      	strh	r3, [r7, #28]
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <radio_setup+0x7c>)
 80005ea:	f002 ff57 	bl	800349c <HAL_GPIO_WritePin>
	uint8_t status = radio_spi(&hspi1, (uint8_t*)&data, 2, 1000);
 80005ee:	f107 011c 	add.w	r1, r7, #28
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	2202      	movs	r2, #2
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <radio_setup+0x80>)
 80005fa:	f7ff ff65 	bl	80004c8 <radio_spi>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <radio_setup+0x7c>)
 800060a:	f002 ff47 	bl	800349c <HAL_GPIO_WritePin>

	//sprintf((char*)&text, "Hi!");
	LCD_Clear(BLACK);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd2a 	bl	8001068 <LCD_Clear>
	sprintf((char *)&text, "%x", status);
 8000614:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	490b      	ldr	r1, [pc, #44]	; (800064c <radio_setup+0x84>)
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fac4 	bl	8007bac <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <radio_setup+0x88>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	b29a      	uxth	r2, r3
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2310      	movs	r3, #16
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2310      	movs	r3, #16
 8000636:	2104      	movs	r1, #4
 8000638:	2004      	movs	r0, #4
 800063a:	f000 ff59 	bl	80014f0 <LCD_ShowString>
	uint8_t data5[8] = {0x8C, 0x5, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08};
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data5, 8, 100);
	HAL_GPIO_WritePin(GPIOE, NSS_Pin, GPIO_PIN_SET);

}
 800063e:	3738      	adds	r7, #56	; 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	58021000 	.word	0x58021000
 8000648:	24000144 	.word	0x24000144
 800064c:	080084a0 	.word	0x080084a0
 8000650:	240002e4 	.word	0x240002e4

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08e      	sub	sp, #56	; 0x38
 8000658:	af00      	add	r7, sp, #0
  uint8_t data[6] = {1, 2, 3, 5, 8, 13};
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <main+0x5c>)
 800065c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000664:	6018      	str	r0, [r3, #0]
 8000666:	3304      	adds	r3, #4
 8000668:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f002 fbc1 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f823 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f7ff fe85 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 8000676:	f000 f8af 	bl	80007d8 <MX_RTC_Init>
  MX_SPI4_Init();
 800067a:	f000 f991 	bl	80009a0 <MX_SPI4_Init>
  MX_TIM1_Init();
 800067e:	f000 fba1 	bl	8000dc4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000682:	f000 f937 	bl	80008f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(E3_GPIO_Port,GPIO_PIN_10,GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0x60>)
 800068e:	f002 ff05 	bl	800349c <HAL_GPIO_WritePin>
  //LCD_Test();
  LCD_Init();
 8000692:	f000 fcaf 	bl	8000ff4 <LCD_Init>
  	uint8_t text[20];
  	RTC_DateTypeDef sdatestructureget;
  	RTC_TimeTypeDef stimestructureget;

  	// Initialize radio
  	HAL_GPIO_WritePin(E3_GPIO_Port,GPIO_PIN_10,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <main+0x60>)
 800069e:	f002 fefd 	bl	800349c <HAL_GPIO_WritePin>
  	radio_powerup();
 80006a2:	f7ff ff57 	bl	8000554 <radio_powerup>
  	radio_setup();
 80006a6:	f7ff ff8f 	bl	80005c8 <radio_setup>
    //sprintf((char *)&text, "To seek is to find me...");
    //LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
  	while (1)
  	{

  		radio_setup();
 80006aa:	f7ff ff8d 	bl	80005c8 <radio_setup>
 80006ae:	e7fc      	b.n	80006aa <main+0x56>
 80006b0:	080084b0 	.word	0x080084b0
 80006b4:	58021000 	.word	0x58021000

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09c      	sub	sp, #112	; 0x70
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	224c      	movs	r2, #76	; 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f007 fa68 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2220      	movs	r2, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fa62 	bl	8007b9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d8:	2002      	movs	r0, #2
 80006da:	f002 ff09 	bl	80034f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <SystemClock_Config+0x108>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <SystemClock_Config+0x108>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <SystemClock_Config+0x108>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <SystemClock_Config+0x10c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	4a30      	ldr	r2, [pc, #192]	; (80007c4 <SystemClock_Config+0x10c>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <SystemClock_Config+0x10c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000714:	bf00      	nop
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <SystemClock_Config+0x10c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000722:	d1f8      	bne.n	8000716 <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000724:	f002 fed4 	bl	80034d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000728:	f002 fc18 	bl	8002f5c <HAL_GetREVID>
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SystemClock_Config+0x110>)
 800072e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000730:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <SystemClock_Config+0x110>)
 8000732:	f023 0318 	bic.w	r3, r3, #24
 8000736:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000738:	2305      	movs	r3, #5
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000752:	230c      	movs	r3, #12
 8000754:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000762:	230c      	movs	r3, #12
 8000764:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000766:	2302      	movs	r3, #2
 8000768:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fef6 	bl	8003564 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077e:	f000 f825 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	233f      	movs	r3, #63	; 0x3f
 8000784:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fb35 	bl	8003e18 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80007b4:	f000 f80a 	bl	80007cc <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3770      	adds	r7, #112	; 0x70
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800
 80007c8:	58024400 	.word	0x58024400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_RTC_Init+0xb0>)
 80007f2:	4a26      	ldr	r2, [pc, #152]	; (800088c <MX_RTC_Init+0xb4>)
 80007f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_RTC_Init+0xb0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_RTC_Init+0xb0>)
 80007fe:	227f      	movs	r2, #127	; 0x7f
 8000800:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_RTC_Init+0xb0>)
 8000804:	22ff      	movs	r2, #255	; 0xff
 8000806:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_RTC_Init+0xb0>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_RTC_Init+0xb0>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_RTC_Init+0xb0>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_RTC_Init+0xb0>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <MX_RTC_Init+0xb0>)
 8000822:	f005 f997 	bl	8005b54 <HAL_RTC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800082c:	f7ff ffce 	bl	80007cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000830:	2312      	movs	r3, #18
 8000832:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000834:	2300      	movs	r3, #0
 8000836:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000838:	2300      	movs	r3, #0
 800083a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <MX_RTC_Init+0xb0>)
 800084c:	f005 fa04 	bl	8005c58 <HAL_RTC_SetTime>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000856:	f7ff ffb9 	bl	80007cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800085a:	2301      	movs	r3, #1
 800085c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 800085e:	2306      	movs	r3, #6
 8000860:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000862:	2301      	movs	r3, #1
 8000864:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8000866:	2320      	movs	r3, #32
 8000868:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_RTC_Init+0xb0>)
 8000872:	f005 fa8f 	bl	8005d94 <HAL_RTC_SetDate>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800087c:	f7ff ffa6 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000120 	.word	0x24000120
 800088c:	58004000 	.word	0x58004000

08000890 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0b2      	sub	sp, #200	; 0xc8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	22c0      	movs	r2, #192	; 0xc0
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 f97b 	bl	8007b9c <memset>
  if(rtcHandle->Instance==RTC)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_RTC_MspInit+0x5c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d119      	bne.n	80008e4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008b4:	f04f 0300 	mov.w	r3, #0
 80008b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fdd5 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80008d4:	f7ff ff7a 	bl	80007cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_RTC_MspInit+0x60>)
 80008da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_RTC_MspInit+0x60>)
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	37c8      	adds	r7, #200	; 0xc8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58004000 	.word	0x58004000
 80008f0:	58024400 	.word	0x58024400

080008f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_SPI1_Init+0xa4>)
 80008fa:	4a28      	ldr	r2, [pc, #160]	; (800099c <MX_SPI1_Init+0xa8>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_SPI1_Init+0xa4>)
 800090e:	2207      	movs	r2, #7
 8000910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_SPI1_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000920:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000928:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI1_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_SPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_SPI1_Init+0xa4>)
 8000986:	f005 fb43 	bl	8006010 <HAL_SPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000990:	f7ff ff1c 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000144 	.word	0x24000144
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009a6:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <MX_SPI4_Init+0xac>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009b4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009b8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009bc:	2207      	movs	r2, #7
 80009be:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009d2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI4_Init+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_SPI4_Init+0xa8>)
 8000a34:	f005 faec 	bl	8006010 <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000a3e:	f7ff fec5 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	240001cc 	.word	0x240001cc
 8000a4c:	40013400 	.word	0x40013400

08000a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0bc      	sub	sp, #240	; 0xf0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	22c0      	movs	r2, #192	; 0xc0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 f893 	bl	8007b9c <memset>
  if(spiHandle->Instance==SPI1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a4c      	ldr	r2, [pc, #304]	; (8000bac <HAL_SPI_MspInit+0x15c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d145      	bne.n	8000b0c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fcef 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000aa0:	f7ff fe94 	bl	80007cc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa4:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aaa:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ab4:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a39      	ldr	r2, [pc, #228]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae0:	23e0      	movs	r3, #224	; 0xe0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af8:	2305      	movs	r3, #5
 8000afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b02:	4619      	mov	r1, r3
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <HAL_SPI_MspInit+0x164>)
 8000b06:	f002 fb19 	bl	800313c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000b0a:	e04a      	b.n	8000ba2 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI4)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d145      	bne.n	8000ba2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	f04f 0300 	mov.w	r3, #0
 8000b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fca4 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8000b36:	f7ff fe49 	bl	80007cc <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x160>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000b76:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b90:	2305      	movs	r3, #5
 8000b92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000b9e:	f002 facd 	bl	800313c <HAL_GPIO_Init>
}
 8000ba2:	bf00      	nop
 8000ba4:	37f0      	adds	r7, #240	; 0xf0
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58020000 	.word	0x58020000
 8000bb8:	40013400 	.word	0x40013400
 8000bbc:	58021000 	.word	0x58021000

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f002 f948 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f006 ff66 	bl	8007b48 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24080000 	.word	0x24080000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	24000254 	.word	0x24000254
 8000cb0:	24000808 	.word	0x24000808

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <SystemInit+0xe4>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <SystemInit+0xe4>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <SystemInit+0xe8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d807      	bhi.n	8000ce4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <SystemInit+0xe8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 030f 	bic.w	r3, r3, #15
 8000cdc:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <SystemInit+0xe8>)
 8000cde:	f043 0307 	orr.w	r3, r3, #7
 8000ce2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <SystemInit+0xec>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <SystemInit+0xec>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <SystemInit+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SystemInit+0xec>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4929      	ldr	r1, [pc, #164]	; (8000da0 <SystemInit+0xec>)
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemInit+0xf0>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <SystemInit+0xe8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <SystemInit+0xe8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 030f 	bic.w	r3, r3, #15
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SystemInit+0xe8>)
 8000d18:	f043 0307 	orr.w	r3, r3, #7
 8000d1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <SystemInit+0xec>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemInit+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <SystemInit+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <SystemInit+0xec>)
 8000d32:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <SystemInit+0xf4>)
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <SystemInit+0xec>)
 8000d38:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <SystemInit+0xf8>)
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <SystemInit+0xec>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <SystemInit+0xfc>)
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <SystemInit+0xec>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <SystemInit+0xec>)
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <SystemInit+0xfc>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <SystemInit+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <SystemInit+0xec>)
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <SystemInit+0xfc>)
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <SystemInit+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <SystemInit+0xec>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <SystemInit+0xec>)
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <SystemInit+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <SystemInit+0x100>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SystemInit+0x104>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d7e:	d202      	bcs.n	8000d86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <SystemInit+0x108>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SystemInit+0x10c>)
 8000d88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	52002000 	.word	0x52002000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da8:	02020200 	.word	0x02020200
 8000dac:	01ff0000 	.word	0x01ff0000
 8000db0:	01010280 	.word	0x01010280
 8000db4:	5c001000 	.word	0x5c001000
 8000db8:	ffff0000 	.word	0xffff0000
 8000dbc:	51008108 	.word	0x51008108
 8000dc0:	52004000 	.word	0x52004000

08000dc4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b096      	sub	sp, #88	; 0x58
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	222c      	movs	r2, #44	; 0x2c
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fed3 	bl	8007b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df6:	4b39      	ldr	r3, [pc, #228]	; (8000edc <MX_TIM1_Init+0x118>)
 8000df8:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <MX_TIM1_Init+0x11c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_TIM1_Init+0x118>)
 8000dfe:	220b      	movs	r2, #11
 8000e00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e22:	482e      	ldr	r0, [pc, #184]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e24:	f006 f8a9 	bl	8006f7a <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f7ff fccd 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e42:	4619      	mov	r1, r3
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e46:	f006 fd73 	bl	8007930 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e50:	f7ff fcbc 	bl	80007cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_TIM1_Init+0x118>)
 8000e7a:	f006 f8d5 	bl	8007028 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e84:	f7ff fca2 	bl	80007cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM1_Init+0x118>)
 8000ebe:	f006 fdc5 	bl	8007a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ec8:	f7ff fc80 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM1_Init+0x118>)
 8000ece:	f000 f82b 	bl	8000f28 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3758      	adds	r7, #88	; 0x58
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000258 	.word	0x24000258
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10e      	bne.n	8000f14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_TIM_PWM_MspInit+0x40>)
 8000ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <HAL_TIM_PWM_MspInit+0x40>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_TIM_PWM_MspInit+0x40>)
 8000f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40010000 	.word	0x40010000
 8000f24:	58024400 	.word	0x58024400

08000f28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_TIM_MspPostInit+0x6c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d11f      	bne.n	8000f8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_TIM_MspPostInit+0x70>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_TIM_MspPostInit+0x70>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_TIM_MspPostInit+0x70>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_TIM_MspPostInit+0x74>)
 8000f86:	f002 f8d9 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020000 	.word	0x58020000

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa4:	f7ff fe86 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f006 fdc1 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fb3f 	bl	8000654 <main>
  bx  lr
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000fe4:	08008f68 	.word	0x08008f68
  ldr r2, =_sbss
 8000fe8:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000fec:	24000808 	.word	0x24000808

08000ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC3_IRQHandler>
	...

08000ff4 <LCD_Init>:
};

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Init(void) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af02      	add	r7, sp, #8
	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <LCD_Init+0x60>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <LCD_Init+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <LCD_Init+0x60>)
 8001008:	2201      	movs	r2, #1
 800100a:	735a      	strb	r2, [r3, #13]
	#else
	//error "Unknown Screen"

	#endif

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800100c:	4912      	ldr	r1, [pc, #72]	; (8001058 <LCD_Init+0x64>)
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <LCD_Init+0x68>)
 8001010:	f000 fbb6 	bl	8001780 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <LCD_Init+0x6c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LCD_Init+0x60>)
 800101a:	2105      	movs	r1, #5
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <LCD_Init+0x68>)
 800101e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <LCD_Init+0x6c>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <LCD_Init+0x70>)
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <LCD_Init+0x68>)
 8001028:	4798      	blx	r3

	LCD_SetBrightness(0);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f838 	bl	80010a0 <LCD_SetBrightness>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <LCD_Init+0x6c>)
 8001032:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LCD_Init+0x60>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <LCD_Init+0x60>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2100      	movs	r1, #0
 800103e:	9101      	str	r1, [sp, #4]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <LCD_Init+0x68>)
 800104a:	47a0      	blx	r4
}
 800104c:	bf00      	nop
 800104e:	3704      	adds	r7, #4
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	240002e4 	.word	0x240002e4
 8001058:	24000008 	.word	0x24000008
 800105c:	240002a4 	.word	0x240002a4
 8001060:	2400002c 	.word	0x2400002c
 8001064:	240002dc 	.word	0x240002dc

08001068 <LCD_Clear>:

void LCD_Clear(uint32_t color) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
  	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, color);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LCD_Clear+0x2c>)
 8001072:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <LCD_Clear+0x30>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <LCD_Clear+0x30>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	460b      	mov	r3, r1
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <LCD_Clear+0x34>)
 800108a:	47a0      	blx	r4
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	2400002c 	.word	0x2400002c
 8001098:	240002e4 	.word	0x240002e4
 800109c:	240002a4 	.word	0x240002a4

080010a0 <LCD_SetBrightness>:

	LCD_Light(100, 200);
}

void LCD_SetBrightness(uint32_t Brightness)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_WR_RS_GPIO_Port,GPIO_PIN_10,GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <LCD_SetBrightness+0x24>)
 80010b0:	f002 f9f4 	bl	800349c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LCD_SetBrightness+0x28>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58021000 	.word	0x58021000
 80010c8:	24000258 	.word	0x24000258

080010cc <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	b097      	sub	sp, #92	; 0x5c
 80010d2:	af02      	add	r7, sp, #8
 80010d4:	461e      	mov	r6, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010da:	460b      	mov	r3, r1
 80010dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010de:	4613      	mov	r3, r2
 80010e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010e4:	4633      	mov	r3, r6
 80010e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010ea:	466b      	mov	r3, sp
 80010ec:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80010ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 80010f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 80010fa:	4baf      	ldr	r3, [pc, #700]	; (80013b8 <LCD_ShowChar+0x2ec>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001102:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d101      	bne.n	800110e <LCD_ShowChar+0x42>
 800110a:	2106      	movs	r1, #6
 800110c:	e000      	b.n	8001110 <LCD_ShowChar+0x44>
 800110e:	2108      	movs	r1, #8
 8001110:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001114:	1e4b      	subs	r3, r1, #1
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
 8001118:	460a      	mov	r2, r1
 800111a:	2300      	movs	r3, #0
 800111c:	4692      	mov	sl, r2
 800111e:	469b      	mov	fp, r3
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800112c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001130:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001134:	460b      	mov	r3, r1
 8001136:	005e      	lsls	r6, r3, #1
 8001138:	4603      	mov	r3, r0
 800113a:	3b01      	subs	r3, #1
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800113e:	460a      	mov	r2, r1
 8001140:	2300      	movs	r3, #0
 8001142:	61ba      	str	r2, [r7, #24]
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	b2c3      	uxtb	r3, r0
 8001148:	2200      	movs	r2, #0
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	627a      	str	r2, [r7, #36]	; 0x24
 800114e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001152:	465b      	mov	r3, fp
 8001154:	6a3a      	ldr	r2, [r7, #32]
 8001156:	fb02 fc03 	mul.w	ip, r2, r3
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	4652      	mov	r2, sl
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	449c      	add	ip, r3
 8001164:	4652      	mov	r2, sl
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	fba2 8903 	umull	r8, r9, r2, r3
 800116c:	eb0c 0309 	add.w	r3, ip, r9
 8001170:	4699      	mov	r9, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800117e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001182:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001186:	460a      	mov	r2, r1
 8001188:	2300      	movs	r3, #0
 800118a:	613a      	str	r2, [r7, #16]
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	b2c3      	uxtb	r3, r0
 8001190:	2200      	movs	r2, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	60fa      	str	r2, [r7, #12]
 8001196:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800119a:	464b      	mov	r3, r9
 800119c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80011a0:	4652      	mov	r2, sl
 80011a2:	fb02 fc03 	mul.w	ip, r2, r3
 80011a6:	465b      	mov	r3, fp
 80011a8:	4642      	mov	r2, r8
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	449c      	add	ip, r3
 80011b0:	4642      	mov	r2, r8
 80011b2:	4653      	mov	r3, sl
 80011b4:	fba2 4503 	umull	r4, r5, r2, r3
 80011b8:	eb0c 0305 	add.w	r3, ip, r5
 80011bc:	461d      	mov	r5, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	012b      	lsls	r3, r5, #4
 80011c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80011cc:	0122      	lsls	r2, r4, #4
 80011ce:	460b      	mov	r3, r1
 80011d0:	4602      	mov	r2, r0
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3307      	adds	r3, #7
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	ebad 0d03 	sub.w	sp, sp, r3
 80011e2:	ab02      	add	r3, sp, #8
 80011e4:	3301      	adds	r3, #1
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 80011ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f0:	4619      	mov	r1, r3
 80011f2:	4872      	ldr	r0, [pc, #456]	; (80013bc <LCD_ShowChar+0x2f0>)
 80011f4:	f001 fc20 	bl	8002a38 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 80011f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011fc:	4619      	mov	r1, r3
 80011fe:	486f      	ldr	r0, [pc, #444]	; (80013bc <LCD_ShowChar+0x2f0>)
 8001200:	f001 fc2c 	bl	8002a5c <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001208:	3b20      	subs	r3, #32
 800120a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8001214:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 80a7 	bne.w	800136c <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 800121e:	2300      	movs	r3, #0
 8001220:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001224:	e09a      	b.n	800135c <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001226:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d10e      	bne.n	800124c <LCD_ShowChar+0x180>
 800122e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001232:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001236:	4862      	ldr	r0, [pc, #392]	; (80013c0 <LCD_ShowChar+0x2f4>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4403      	add	r3, r0
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800124a:	e00a      	b.n	8001262 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 800124c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001250:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001254:	495b      	ldr	r1, [pc, #364]	; (80013c4 <LCD_ShowChar+0x2f8>)
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	440a      	add	r2, r1
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 8001262:	2300      	movs	r3, #0
 8001264:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001268:	e06d      	b.n	8001346 <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 800126a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800126e:	2b00      	cmp	r3, #0
 8001270:	da0e      	bge.n	8001290 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001272:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <LCD_ShowChar+0x2ec>)
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	e00d      	b.n	80012ac <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <LCD_ShowChar+0x2fc>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <LCD_ShowChar+0x2fc>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <LCD_ShowChar+0x2ec>)
 80012aa:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80012ac:	0872      	lsrs	r2, r6, #1
 80012ae:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80012b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461c      	mov	r4, r3
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <LCD_ShowChar+0x2ec>)
 80012be:	8818      	ldrh	r0, [r3, #0]
 80012c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	4422      	add	r2, r4
 80012c8:	4601      	mov	r1, r0
 80012ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80012ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012d2:	3301      	adds	r3, #1
 80012d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 80012d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <LCD_ShowChar+0x220>
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 80012ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 80012f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012f8:	3301      	adds	r3, #1
 80012fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80012fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001300:	429a      	cmp	r2, r3
 8001302:	d304      	bcc.n	800130e <LCD_ShowChar+0x242>
 8001304:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <LCD_ShowChar+0x2ec>)
 8001306:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800130a:	8013      	strh	r3, [r2, #0]
 800130c:	e0e6      	b.n	80014dc <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800130e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001310:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001314:	1ad2      	subs	r2, r2, r3
 8001316:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800131a:	429a      	cmp	r2, r3
 800131c:	d10e      	bne.n	800133c <LCD_ShowChar+0x270>
				{
					y=y0;
 800131e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001322:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001326:	3301      	adds	r3, #1
 8001328:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800132a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	429a      	cmp	r2, r3
 8001330:	d30e      	bcc.n	8001350 <LCD_ShowChar+0x284>
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <LCD_ShowChar+0x2ec>)
 8001334:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001338:	8013      	strh	r3, [r2, #0]
 800133a:	e0cf      	b.n	80014dc <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 800133c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001340:	3301      	adds	r3, #1
 8001342:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001346:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800134a:	2b07      	cmp	r3, #7
 800134c:	d98d      	bls.n	800126a <LCD_ShowChar+0x19e>
 800134e:	e000      	b.n	8001352 <LCD_ShowChar+0x286>
					break;
 8001350:	bf00      	nop
		for(t=0;t<size;t++)
 8001352:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001356:	3301      	adds	r3, #1
 8001358:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800135c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001360:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001364:	429a      	cmp	r2, r3
 8001366:	f4ff af5e 	bcc.w	8001226 <LCD_ShowChar+0x15a>
 800136a:	e09c      	b.n	80014a6 <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 800136c:	2300      	movs	r3, #0
 800136e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001372:	e091      	b.n	8001498 <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001374:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d10e      	bne.n	800139a <LCD_ShowChar+0x2ce>
 800137c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001380:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001384:	480e      	ldr	r0, [pc, #56]	; (80013c0 <LCD_ShowChar+0x2f4>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4403      	add	r3, r0
 8001390:	440b      	add	r3, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001398:	e00a      	b.n	80013b0 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 800139a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800139e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <LCD_ShowChar+0x2f8>)
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	440a      	add	r2, r1
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80013b6:	e064      	b.n	8001482 <LCD_ShowChar+0x3b6>
 80013b8:	24000028 	.word	0x24000028
 80013bc:	240002a4 	.word	0x240002a4
 80013c0:	080084c8 	.word	0x080084c8
 80013c4:	0800893c 	.word	0x0800893c
 80013c8:	240002e0 	.word	0x240002e0
			{			    
				if(temp&0x80)
 80013cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da1a      	bge.n	800140a <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <LCD_ShowChar+0x41c>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <LCD_ShowChar+0x41c>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b218      	sxth	r0, r3
 80013ea:	0872      	lsrs	r2, r6, #1
 80013ec:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80013f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013f4:	085b      	lsrs	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461c      	mov	r4, r3
 80013fa:	b280      	uxth	r0, r0
 80013fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	4422      	add	r2, r4
 8001404:	4601      	mov	r1, r0
 8001406:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800140a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800140e:	3301      	adds	r3, #1
 8001410:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001414:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800141e:	429a      	cmp	r2, r3
 8001420:	d302      	bcc.n	8001428 <LCD_ShowChar+0x35c>
 8001422:	2300      	movs	r3, #0
 8001424:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001428:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001434:	3301      	adds	r3, #1
 8001436:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001438:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	429a      	cmp	r2, r3
 800143e:	d304      	bcc.n	800144a <LCD_ShowChar+0x37e>
 8001440:	4a29      	ldr	r2, [pc, #164]	; (80014e8 <LCD_ShowChar+0x41c>)
 8001442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001446:	8013      	strh	r3, [r2, #0]
 8001448:	e048      	b.n	80014dc <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800144a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800144c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001450:	1ad2      	subs	r2, r2, r3
 8001452:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001456:	429a      	cmp	r2, r3
 8001458:	d10e      	bne.n	8001478 <LCD_ShowChar+0x3ac>
				{
					y=y0;
 800145a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800145e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001462:	3301      	adds	r3, #1
 8001464:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001466:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	429a      	cmp	r2, r3
 800146c:	d30e      	bcc.n	800148c <LCD_ShowChar+0x3c0>
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <LCD_ShowChar+0x41c>)
 8001470:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001474:	8013      	strh	r3, [r2, #0]
 8001476:	e031      	b.n	80014dc <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001478:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800147c:	3301      	adds	r3, #1
 800147e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001482:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9a0      	bls.n	80013cc <LCD_ShowChar+0x300>
 800148a:	e000      	b.n	800148e <LCD_ShowChar+0x3c2>
					break;
 800148c:	bf00      	nop
		for(t=0;t<size;t++)
 800148e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001492:	3301      	adds	r3, #1
 8001494:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001498:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800149c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f4ff af67 	bcc.w	8001374 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80014a6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80014aa:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80014ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d101      	bne.n	80014ba <LCD_ShowChar+0x3ee>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e000      	b.n	80014bc <LCD_ShowChar+0x3f0>
 80014ba:	2308      	movs	r3, #8
 80014bc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	4602      	mov	r2, r0
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <LCD_ShowChar+0x420>)
 80014ca:	f001 f907 	bl	80026dc <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <LCD_ShowChar+0x41c>)
 80014d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80014d4:	8013      	strh	r3, [r2, #0]
 80014d6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80014da:	e001      	b.n	80014e0 <LCD_ShowChar+0x414>
 80014dc:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 80014e0:	3754      	adds	r7, #84	; 0x54
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e8:	24000028 	.word	0x24000028
 80014ec:	240002a4 	.word	0x240002a4

080014f0 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	4603      	mov	r3, r0
 8001504:	80bb      	strh	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
 800150a:	4613      	mov	r3, r2
 800150c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	4413      	add	r3, r2
 8001518:	807b      	strh	r3, [r7, #2]
	height+=y;
 800151a:	883a      	ldrh	r2, [r7, #0]
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001522:	e024      	b.n	800156e <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	429a      	cmp	r2, r3
 800152a:	d307      	bcc.n	800153c <LCD_ShowString+0x4c>
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	b29a      	uxth	r2, r3
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d21d      	bcs.n	8001580 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800154c:	88b9      	ldrh	r1, [r7, #4]
 800154e:	88f8      	ldrh	r0, [r7, #6]
 8001550:	2400      	movs	r4, #0
 8001552:	9400      	str	r4, [sp, #0]
 8001554:	f7ff fdba 	bl	80010cc <LCD_ShowChar>
        x+=size/2;
 8001558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b29a      	uxth	r2, r3
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4413      	add	r3, r2
 8001566:	80fb      	strh	r3, [r7, #6]
        p++;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	3301      	adds	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b7e      	cmp	r3, #126	; 0x7e
 8001574:	d805      	bhi.n	8001582 <LCD_ShowString+0x92>
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b1f      	cmp	r3, #31
 800157c:	d8d2      	bhi.n	8001524 <LCD_ShowString+0x34>
    }  
}
 800157e:	e000      	b.n	8001582 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8001580:	bf00      	nop
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <lcd_init>:

static int32_t lcd_init(void)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
	//HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
	return result;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80015a6:	f001 fca9 	bl	8002efc <HAL_GetTick>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	481d      	ldr	r0, [pc, #116]	; (800163c <lcd_writereg+0x8c>)
 80015c6:	f001 ff69 	bl	800349c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	481a      	ldr	r0, [pc, #104]	; (800163c <lcd_writereg+0x8c>)
 80015d2:	f001 ff63 	bl	800349c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80015d6:	f107 010f 	add.w	r1, r7, #15
 80015da:	2364      	movs	r3, #100	; 0x64
 80015dc:	2201      	movs	r2, #1
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <lcd_writereg+0x90>)
 80015e0:	f004 fe3a 	bl	8006258 <HAL_SPI_Transmit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <lcd_writereg+0x8c>)
 80015f0:	f001 ff54 	bl	800349c <HAL_GPIO_WritePin>
	if(length > 0)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <lcd_writereg+0x90>)
 8001606:	f004 fe27 	bl	8006258 <HAL_SPI_Transmit>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	4413      	add	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <lcd_writereg+0x8c>)
 800161c:	f001 ff3e 	bl	800349c <HAL_GPIO_WritePin>
	if(result>0){
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	dd03      	ble.n	800162e <lcd_writereg+0x7e>
		result = -1;}
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e001      	b.n	8001632 <lcd_writereg+0x82>
	else{
		result = 0;}
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
	return result;
 8001632:	697b      	ldr	r3, [r7, #20]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	58021000 	.word	0x58021000
 8001640:	240001cc 	.word	0x240001cc

08001644 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001656:	481b      	ldr	r0, [pc, #108]	; (80016c4 <lcd_readreg+0x80>)
 8001658:	f001 ff20 	bl	800349c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <lcd_readreg+0x80>)
 8001664:	f001 ff1a 	bl	800349c <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001668:	1df9      	adds	r1, r7, #7
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2201      	movs	r2, #1
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <lcd_readreg+0x84>)
 8001670:	f004 fdf2 	bl	8006258 <HAL_SPI_Transmit>
 8001674:	4603      	mov	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167e:	4811      	ldr	r0, [pc, #68]	; (80016c4 <lcd_readreg+0x80>)
 8001680:	f001 ff0c 	bl	800349c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8001684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001688:	2201      	movs	r2, #1
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <lcd_readreg+0x84>)
 800168e:	f004 ffdf 	bl	8006650 <HAL_SPI_Receive>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <lcd_readreg+0x80>)
 80016a4:	f001 fefa 	bl	800349c <HAL_GPIO_WritePin>
	if(result>0){
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dd03      	ble.n	80016b6 <lcd_readreg+0x72>
		result = -1;}
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e001      	b.n	80016ba <lcd_readreg+0x76>
	else{
		result = 0;}
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
	return result;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58021000 	.word	0x58021000
 80016c8:	240001cc 	.word	0x240001cc

080016cc <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <lcd_senddata+0x50>)
 80016de:	f001 fedd 	bl	800349c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <lcd_senddata+0x54>)
 80016ec:	f004 fdb4 	bl	8006258 <HAL_SPI_Transmit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <lcd_senddata+0x50>)
 80016fc:	f001 fece 	bl	800349c <HAL_GPIO_WritePin>
	if(result>0){
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	dd03      	ble.n	800170e <lcd_senddata+0x42>
		result = -1;}
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e001      	b.n	8001712 <lcd_senddata+0x46>
	else{
		result = 0;}
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
	return result;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	58021000 	.word	0x58021000
 8001720:	240001cc 	.word	0x240001cc

08001724 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <lcd_recvdata+0x54>)
 8001736:	f001 feb1 	bl	800349c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <lcd_recvdata+0x58>)
 8001746:	f004 ff83 	bl	8006650 <HAL_SPI_Receive>
 800174a:	4603      	mov	r3, r0
 800174c:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <lcd_recvdata+0x54>)
 8001756:	f001 fea1 	bl	800349c <HAL_GPIO_WritePin>
	if(result>0){
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	dd03      	ble.n	8001768 <lcd_recvdata+0x44>
		result = -1;}
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e001      	b.n	800176c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
	return result;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	58021000 	.word	0x58021000
 800177c:	240001cc 	.word	0x240001cc

08001780 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e03a      	b.n	800180e <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	891a      	ldrh	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <ST7735_RegisterBusIO+0x98>)
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <ST7735_RegisterBusIO+0x9c>)
 80017e2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <ST7735_RegisterBusIO+0xa0>)
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <ST7735_RegisterBusIO+0xa4>)
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4798      	blx	r3
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	e002      	b.n	800180e <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800180c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	08002c89 	.word	0x08002c89
 800181c:	08002cb1 	.word	0x08002cb1
 8001820:	08002cdb 	.word	0x08002cdb
 8001824:	08002cff 	.word	0x08002cff

08001828 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e3a6      	b.n	8001f90 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f103 0020 	add.w	r0, r3, #32
 800184c:	f107 0213 	add.w	r2, r7, #19
 8001850:	2300      	movs	r3, #0
 8001852:	2101      	movs	r1, #1
 8001854:	f001 fa92 	bl	8002d7c <st7735_write_reg>
 8001858:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800185a:	2178      	movs	r1, #120	; 0x78
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f001 fa60 	bl	8002d22 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f103 0020 	add.w	r0, r3, #32
 800186c:	f107 0213 	add.w	r2, r7, #19
 8001870:	2300      	movs	r3, #0
 8001872:	2101      	movs	r1, #1
 8001874:	f001 fa82 	bl	8002d7c <st7735_write_reg>
 8001878:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800187a:	2178      	movs	r1, #120	; 0x78
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f001 fa50 	bl	8002d22 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f103 0020 	add.w	r0, r3, #32
 800188c:	f107 0213 	add.w	r2, r7, #19
 8001890:	2301      	movs	r3, #1
 8001892:	2111      	movs	r1, #17
 8001894:	f001 fa72 	bl	8002d7c <st7735_write_reg>
 8001898:	4602      	mov	r2, r0
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f103 0020 	add.w	r0, r3, #32
 80018a6:	f107 0213 	add.w	r2, r7, #19
 80018aa:	2300      	movs	r3, #0
 80018ac:	21b1      	movs	r1, #177	; 0xb1
 80018ae:	f001 fa65 	bl	8002d7c <st7735_write_reg>
 80018b2:	4602      	mov	r2, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80018ba:	2301      	movs	r3, #1
 80018bc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3320      	adds	r3, #32
 80018c2:	f107 0113 	add.w	r1, r7, #19
 80018c6:	2201      	movs	r2, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fa6c 	bl	8002da6 <st7735_send_data>
 80018ce:	4602      	mov	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80018d6:	232c      	movs	r3, #44	; 0x2c
 80018d8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3320      	adds	r3, #32
 80018de:	f107 0113 	add.w	r1, r7, #19
 80018e2:	2201      	movs	r2, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 fa5e 	bl	8002da6 <st7735_send_data>
 80018ea:	4602      	mov	r2, r0
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80018f2:	232d      	movs	r3, #45	; 0x2d
 80018f4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3320      	adds	r3, #32
 80018fa:	f107 0113 	add.w	r1, r7, #19
 80018fe:	2201      	movs	r2, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fa50 	bl	8002da6 <st7735_send_data>
 8001906:	4602      	mov	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4413      	add	r3, r2
 800190c:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 800190e:	2301      	movs	r3, #1
 8001910:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f103 0020 	add.w	r0, r3, #32
 8001918:	f107 0213 	add.w	r2, r7, #19
 800191c:	2301      	movs	r3, #1
 800191e:	21b2      	movs	r1, #178	; 0xb2
 8001920:	f001 fa2c 	bl	8002d7c <st7735_write_reg>
 8001924:	4602      	mov	r2, r0
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800192c:	232c      	movs	r3, #44	; 0x2c
 800192e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3320      	adds	r3, #32
 8001934:	f107 0113 	add.w	r1, r7, #19
 8001938:	2201      	movs	r2, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fa33 	bl	8002da6 <st7735_send_data>
 8001940:	4602      	mov	r2, r0
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001948:	232d      	movs	r3, #45	; 0x2d
 800194a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3320      	adds	r3, #32
 8001950:	f107 0113 	add.w	r1, r7, #19
 8001954:	2201      	movs	r2, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fa25 	bl	8002da6 <st7735_send_data>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001964:	2301      	movs	r3, #1
 8001966:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f103 0020 	add.w	r0, r3, #32
 800196e:	f107 0213 	add.w	r2, r7, #19
 8001972:	2301      	movs	r3, #1
 8001974:	21b3      	movs	r1, #179	; 0xb3
 8001976:	f001 fa01 	bl	8002d7c <st7735_write_reg>
 800197a:	4602      	mov	r2, r0
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001982:	232c      	movs	r3, #44	; 0x2c
 8001984:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3320      	adds	r3, #32
 800198a:	f107 0113 	add.w	r1, r7, #19
 800198e:	2201      	movs	r2, #1
 8001990:	4618      	mov	r0, r3
 8001992:	f001 fa08 	bl	8002da6 <st7735_send_data>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800199e:	232d      	movs	r3, #45	; 0x2d
 80019a0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3320      	adds	r3, #32
 80019a6:	f107 0113 	add.w	r1, r7, #19
 80019aa:	2201      	movs	r2, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 f9fa 	bl	8002da6 <st7735_send_data>
 80019b2:	4602      	mov	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80019ba:	2301      	movs	r3, #1
 80019bc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3320      	adds	r3, #32
 80019c2:	f107 0113 	add.w	r1, r7, #19
 80019c6:	2201      	movs	r2, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f9ec 	bl	8002da6 <st7735_send_data>
 80019ce:	4602      	mov	r2, r0
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80019d6:	232c      	movs	r3, #44	; 0x2c
 80019d8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3320      	adds	r3, #32
 80019de:	f107 0113 	add.w	r1, r7, #19
 80019e2:	2201      	movs	r2, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 f9de 	bl	8002da6 <st7735_send_data>
 80019ea:	4602      	mov	r2, r0
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80019f2:	232d      	movs	r3, #45	; 0x2d
 80019f4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3320      	adds	r3, #32
 80019fa:	f107 0113 	add.w	r1, r7, #19
 80019fe:	2201      	movs	r2, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 f9d0 	bl	8002da6 <st7735_send_data>
 8001a06:	4602      	mov	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f103 0020 	add.w	r0, r3, #32
 8001a18:	f107 0213 	add.w	r2, r7, #19
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	21b4      	movs	r1, #180	; 0xb4
 8001a20:	f001 f9ac 	bl	8002d7c <st7735_write_reg>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001a2c:	23a2      	movs	r3, #162	; 0xa2
 8001a2e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f103 0020 	add.w	r0, r3, #32
 8001a36:	f107 0213 	add.w	r2, r7, #19
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	21c0      	movs	r1, #192	; 0xc0
 8001a3e:	f001 f99d 	bl	8002d7c <st7735_write_reg>
 8001a42:	4602      	mov	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3320      	adds	r3, #32
 8001a52:	f107 0113 	add.w	r1, r7, #19
 8001a56:	2201      	movs	r2, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f9a4 	bl	8002da6 <st7735_send_data>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	4413      	add	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001a66:	2384      	movs	r3, #132	; 0x84
 8001a68:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3320      	adds	r3, #32
 8001a6e:	f107 0113 	add.w	r1, r7, #19
 8001a72:	2201      	movs	r2, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f996 	bl	8002da6 <st7735_send_data>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001a82:	23c5      	movs	r3, #197	; 0xc5
 8001a84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f103 0020 	add.w	r0, r3, #32
 8001a8c:	f107 0213 	add.w	r2, r7, #19
 8001a90:	2301      	movs	r3, #1
 8001a92:	21c1      	movs	r1, #193	; 0xc1
 8001a94:	f001 f972 	bl	8002d7c <st7735_write_reg>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f103 0020 	add.w	r0, r3, #32
 8001aaa:	f107 0213 	add.w	r2, r7, #19
 8001aae:	2301      	movs	r3, #1
 8001ab0:	21c2      	movs	r1, #194	; 0xc2
 8001ab2:	f001 f963 	bl	8002d7c <st7735_write_reg>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	f107 0113 	add.w	r1, r7, #19
 8001aca:	2201      	movs	r2, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 f96a 	bl	8002da6 <st7735_send_data>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001ada:	238a      	movs	r3, #138	; 0x8a
 8001adc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f103 0020 	add.w	r0, r3, #32
 8001ae4:	f107 0213 	add.w	r2, r7, #19
 8001ae8:	2301      	movs	r3, #1
 8001aea:	21c3      	movs	r1, #195	; 0xc3
 8001aec:	f001 f946 	bl	8002d7c <st7735_write_reg>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001af8:	232a      	movs	r3, #42	; 0x2a
 8001afa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3320      	adds	r3, #32
 8001b00:	f107 0113 	add.w	r1, r7, #19
 8001b04:	2201      	movs	r2, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 f94d 	bl	8002da6 <st7735_send_data>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001b14:	238a      	movs	r3, #138	; 0x8a
 8001b16:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f103 0020 	add.w	r0, r3, #32
 8001b1e:	f107 0213 	add.w	r2, r7, #19
 8001b22:	2301      	movs	r3, #1
 8001b24:	21c4      	movs	r1, #196	; 0xc4
 8001b26:	f001 f929 	bl	8002d7c <st7735_write_reg>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001b32:	23ee      	movs	r3, #238	; 0xee
 8001b34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3320      	adds	r3, #32
 8001b3a:	f107 0113 	add.w	r1, r7, #19
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 f930 	bl	8002da6 <st7735_send_data>
 8001b46:	4602      	mov	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001b4e:	230e      	movs	r3, #14
 8001b50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f103 0020 	add.w	r0, r3, #32
 8001b58:	f107 0213 	add.w	r2, r7, #19
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	21c5      	movs	r1, #197	; 0xc5
 8001b60:	f001 f90c 	bl	8002d7c <st7735_write_reg>
 8001b64:	4602      	mov	r2, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7b1b      	ldrb	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f103 0020 	add.w	r0, r3, #32
 8001b7a:	f107 0213 	add.w	r2, r7, #19
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2121      	movs	r1, #33	; 0x21
 8001b82:	f001 f8fb 	bl	8002d7c <st7735_write_reg>
 8001b86:	4602      	mov	r2, r0
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e00c      	b.n	8001baa <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f103 0020 	add.w	r0, r3, #32
 8001b96:	f107 0213 	add.w	r2, r7, #19
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	f001 f8ed 	bl	8002d7c <st7735_write_reg>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f103 0020 	add.w	r0, r3, #32
 8001bb0:	f107 0208 	add.w	r2, r7, #8
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	213a      	movs	r1, #58	; 0x3a
 8001bb8:	f001 f8e0 	bl	8002d7c <st7735_write_reg>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f103 0020 	add.w	r0, r3, #32
 8001bce:	f107 0213 	add.w	r2, r7, #19
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	21e0      	movs	r1, #224	; 0xe0
 8001bd6:	f001 f8d1 	bl	8002d7c <st7735_write_reg>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001be2:	231c      	movs	r3, #28
 8001be4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3320      	adds	r3, #32
 8001bea:	f107 0113 	add.w	r1, r7, #19
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 f8d8 	bl	8002da6 <st7735_send_data>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3320      	adds	r3, #32
 8001c06:	f107 0113 	add.w	r1, r7, #19
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 f8ca 	bl	8002da6 <st7735_send_data>
 8001c12:	4602      	mov	r2, r0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3320      	adds	r3, #32
 8001c22:	f107 0113 	add.w	r1, r7, #19
 8001c26:	2201      	movs	r2, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 f8bc 	bl	8002da6 <st7735_send_data>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001c36:	2337      	movs	r3, #55	; 0x37
 8001c38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3320      	adds	r3, #32
 8001c3e:	f107 0113 	add.w	r1, r7, #19
 8001c42:	2201      	movs	r2, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 f8ae 	bl	8002da6 <st7735_send_data>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4413      	add	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001c52:	2332      	movs	r3, #50	; 0x32
 8001c54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3320      	adds	r3, #32
 8001c5a:	f107 0113 	add.w	r1, r7, #19
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f8a0 	bl	8002da6 <st7735_send_data>
 8001c66:	4602      	mov	r2, r0
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001c6e:	2329      	movs	r3, #41	; 0x29
 8001c70:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3320      	adds	r3, #32
 8001c76:	f107 0113 	add.w	r1, r7, #19
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 f892 	bl	8002da6 <st7735_send_data>
 8001c82:	4602      	mov	r2, r0
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c8a:	232d      	movs	r3, #45	; 0x2d
 8001c8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3320      	adds	r3, #32
 8001c92:	f107 0113 	add.w	r1, r7, #19
 8001c96:	2201      	movs	r2, #1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 f884 	bl	8002da6 <st7735_send_data>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001ca6:	2329      	movs	r3, #41	; 0x29
 8001ca8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3320      	adds	r3, #32
 8001cae:	f107 0113 	add.w	r1, r7, #19
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f876 	bl	8002da6 <st7735_send_data>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8001cc2:	2325      	movs	r3, #37	; 0x25
 8001cc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3320      	adds	r3, #32
 8001cca:	f107 0113 	add.w	r1, r7, #19
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 f868 	bl	8002da6 <st7735_send_data>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8001cde:	232b      	movs	r3, #43	; 0x2b
 8001ce0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	f107 0113 	add.w	r1, r7, #19
 8001cea:	2201      	movs	r2, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 f85a 	bl	8002da6 <st7735_send_data>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8001cfa:	2339      	movs	r3, #57	; 0x39
 8001cfc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3320      	adds	r3, #32
 8001d02:	f107 0113 	add.w	r1, r7, #19
 8001d06:	2201      	movs	r2, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 f84c 	bl	8002da6 <st7735_send_data>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3320      	adds	r3, #32
 8001d1e:	f107 0113 	add.w	r1, r7, #19
 8001d22:	2201      	movs	r2, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 f83e 	bl	8002da6 <st7735_send_data>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4413      	add	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001d32:	2301      	movs	r3, #1
 8001d34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3320      	adds	r3, #32
 8001d3a:	f107 0113 	add.w	r1, r7, #19
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 f830 	bl	8002da6 <st7735_send_data>
 8001d46:	4602      	mov	r2, r0
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3320      	adds	r3, #32
 8001d56:	f107 0113 	add.w	r1, r7, #19
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f822 	bl	8002da6 <st7735_send_data>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3320      	adds	r3, #32
 8001d72:	f107 0113 	add.w	r1, r7, #19
 8001d76:	2201      	movs	r2, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 f814 	bl	8002da6 <st7735_send_data>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4413      	add	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8001d86:	2303      	movs	r3, #3
 8001d88:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f103 0020 	add.w	r0, r3, #32
 8001d90:	f107 0213 	add.w	r2, r7, #19
 8001d94:	2301      	movs	r3, #1
 8001d96:	21e1      	movs	r1, #225	; 0xe1
 8001d98:	f000 fff0 	bl	8002d7c <st7735_write_reg>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8001da4:	231d      	movs	r3, #29
 8001da6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3320      	adds	r3, #32
 8001dac:	f107 0113 	add.w	r1, r7, #19
 8001db0:	2201      	movs	r2, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fff7 	bl	8002da6 <st7735_send_data>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3320      	adds	r3, #32
 8001dc8:	f107 0113 	add.w	r1, r7, #19
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 ffe9 	bl	8002da6 <st7735_send_data>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3320      	adds	r3, #32
 8001de4:	f107 0113 	add.w	r1, r7, #19
 8001de8:	2201      	movs	r2, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 ffdb 	bl	8002da6 <st7735_send_data>
 8001df0:	4602      	mov	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001df8:	232e      	movs	r3, #46	; 0x2e
 8001dfa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3320      	adds	r3, #32
 8001e00:	f107 0113 	add.w	r1, r7, #19
 8001e04:	2201      	movs	r2, #1
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 ffcd 	bl	8002da6 <st7735_send_data>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001e14:	232c      	movs	r3, #44	; 0x2c
 8001e16:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3320      	adds	r3, #32
 8001e1c:	f107 0113 	add.w	r1, r7, #19
 8001e20:	2201      	movs	r2, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 ffbf 	bl	8002da6 <st7735_send_data>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001e30:	2329      	movs	r3, #41	; 0x29
 8001e32:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3320      	adds	r3, #32
 8001e38:	f107 0113 	add.w	r1, r7, #19
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ffb1 	bl	8002da6 <st7735_send_data>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001e4c:	232d      	movs	r3, #45	; 0x2d
 8001e4e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3320      	adds	r3, #32
 8001e54:	f107 0113 	add.w	r1, r7, #19
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 ffa3 	bl	8002da6 <st7735_send_data>
 8001e60:	4602      	mov	r2, r0
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001e68:	232e      	movs	r3, #46	; 0x2e
 8001e6a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3320      	adds	r3, #32
 8001e70:	f107 0113 	add.w	r1, r7, #19
 8001e74:	2201      	movs	r2, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 ff95 	bl	8002da6 <st7735_send_data>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001e84:	232e      	movs	r3, #46	; 0x2e
 8001e86:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	f107 0113 	add.w	r1, r7, #19
 8001e90:	2201      	movs	r2, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 ff87 	bl	8002da6 <st7735_send_data>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001ea0:	2337      	movs	r3, #55	; 0x37
 8001ea2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	f107 0113 	add.w	r1, r7, #19
 8001eac:	2201      	movs	r2, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ff79 	bl	8002da6 <st7735_send_data>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8001ebc:	233f      	movs	r3, #63	; 0x3f
 8001ebe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3320      	adds	r3, #32
 8001ec4:	f107 0113 	add.w	r1, r7, #19
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 ff6b 	bl	8002da6 <st7735_send_data>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3320      	adds	r3, #32
 8001ee0:	f107 0113 	add.w	r1, r7, #19
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 ff5d 	bl	8002da6 <st7735_send_data>
 8001eec:	4602      	mov	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3320      	adds	r3, #32
 8001efc:	f107 0113 	add.w	r1, r7, #19
 8001f00:	2201      	movs	r2, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 ff4f 	bl	8002da6 <st7735_send_data>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001f10:	2302      	movs	r3, #2
 8001f12:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3320      	adds	r3, #32
 8001f18:	f107 0113 	add.w	r1, r7, #19
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 ff41 	bl	8002da6 <st7735_send_data>
 8001f24:	4602      	mov	r2, r0
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3320      	adds	r3, #32
 8001f34:	f107 0113 	add.w	r1, r7, #19
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 ff33 	bl	8002da6 <st7735_send_data>
 8001f40:	4602      	mov	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	4413      	add	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f103 0020 	add.w	r0, r3, #32
 8001f52:	f107 0213 	add.w	r2, r7, #19
 8001f56:	2301      	movs	r3, #1
 8001f58:	2113      	movs	r1, #19
 8001f5a:	f000 ff0f 	bl	8002d7c <st7735_write_reg>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4413      	add	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f103 0020 	add.w	r0, r3, #32
 8001f6c:	f107 0213 	add.w	r2, r7, #19
 8001f70:	2301      	movs	r3, #1
 8001f72:	2129      	movs	r1, #41	; 0x29
 8001f74:	f000 ff02 	bl	8002d7c <st7735_write_reg>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f944 	bl	8002210 <ST7735_SetOrientation>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001f9c:	697b      	ldr	r3, [r7, #20]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3320      	adds	r3, #32
 8001fca:	f107 0208 	add.w	r2, r7, #8
 8001fce:	21da      	movs	r1, #218	; 0xda
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fec0 	bl	8002d56 <st7735_read_reg>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e02d      	b.n	8002040 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 0020 	add.w	r0, r3, #32
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	3301      	adds	r3, #1
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	21db      	movs	r1, #219	; 0xdb
 8001ff4:	f000 feaf 	bl	8002d56 <st7735_read_reg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e01c      	b.n	8002040 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 0020 	add.w	r0, r3, #32
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	3302      	adds	r3, #2
 8002012:	461a      	mov	r2, r3
 8002014:	21dc      	movs	r1, #220	; 0xdc
 8002016:	f000 fe9e 	bl	8002d56 <st7735_read_reg>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e00b      	b.n	8002040 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	461a      	mov	r2, r3
 800202c:	7a7b      	ldrb	r3, [r7, #9]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	431a      	orrs	r2, r3
 8002032:	7a3b      	ldrb	r3, [r7, #8]
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0020 	add.w	r0, r3, #32
 800205e:	f107 020b 	add.w	r2, r7, #11
 8002062:	2300      	movs	r3, #0
 8002064:	2113      	movs	r1, #19
 8002066:	f000 fe89 	bl	8002d7c <st7735_write_reg>
 800206a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800206c:	210a      	movs	r1, #10
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fe57 	bl	8002d22 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0020 	add.w	r0, r3, #32
 800207a:	f107 020b 	add.w	r2, r7, #11
 800207e:	2300      	movs	r3, #0
 8002080:	2129      	movs	r1, #41	; 0x29
 8002082:	f000 fe7b 	bl	8002d7c <st7735_write_reg>
 8002086:	4602      	mov	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800208e:	210a      	movs	r1, #10
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fe46 	bl	8002d22 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f103 0020 	add.w	r0, r3, #32
 800209c:	f107 020b 	add.w	r2, r7, #11
 80020a0:	2300      	movs	r3, #0
 80020a2:	2136      	movs	r1, #54	; 0x36
 80020a4:	f000 fe6a 	bl	8002d7c <st7735_write_reg>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <ST7735_DisplayOn+0xc0>)
 80020b2:	7b1b      	ldrb	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <ST7735_DisplayOn+0xc0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <ST7735_DisplayOn+0xc4>)
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e006      	b.n	80020dc <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <ST7735_DisplayOn+0xc0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <ST7735_DisplayOn+0xc4>)
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3320      	adds	r3, #32
 80020e2:	f107 010b 	add.w	r1, r7, #11
 80020e6:	2201      	movs	r2, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fe5c 	bl	8002da6 <st7735_send_data>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002100:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	240002e4 	.word	0x240002e4
 8002110:	24000078 	.word	0x24000078

08002114 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0020 	add.w	r0, r3, #32
 8002126:	f107 020b 	add.w	r2, r7, #11
 800212a:	2300      	movs	r3, #0
 800212c:	2113      	movs	r1, #19
 800212e:	f000 fe25 	bl	8002d7c <st7735_write_reg>
 8002132:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002134:	210a      	movs	r1, #10
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fdf3 	bl	8002d22 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0020 	add.w	r0, r3, #32
 8002142:	f107 020b 	add.w	r2, r7, #11
 8002146:	2300      	movs	r3, #0
 8002148:	2128      	movs	r1, #40	; 0x28
 800214a:	f000 fe17 	bl	8002d7c <st7735_write_reg>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002156:	210a      	movs	r1, #10
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fde2 	bl	8002d22 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0020 	add.w	r0, r3, #32
 8002164:	f107 020b 	add.w	r2, r7, #11
 8002168:	2300      	movs	r3, #0
 800216a:	2136      	movs	r1, #54	; 0x36
 800216c:	f000 fe06 	bl	8002d7c <st7735_write_reg>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <ST7735_DisplayOff+0xc0>)
 800217a:	7b1b      	ldrb	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <ST7735_DisplayOff+0xc0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <ST7735_DisplayOff+0xc4>)
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e006      	b.n	80021a4 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <ST7735_DisplayOff+0xc0>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <ST7735_DisplayOff+0xc4>)
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3320      	adds	r3, #32
 80021aa:	f107 010b 	add.w	r1, r7, #11
 80021ae:	2201      	movs	r2, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fdf8 	bl	8002da6 <st7735_send_data>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	240002e4 	.word	0x240002e4
 80021d8:	24000078 	.word	0x24000078

080021dc <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <ST7735_SetOrientation+0x1a>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d119      	bne.n	800225e <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7b5b      	ldrb	r3, [r3, #13]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <ST7735_SetOrientation+0x114>)
 8002234:	2250      	movs	r2, #80	; 0x50
 8002236:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <ST7735_SetOrientation+0x114>)
 800223a:	22a0      	movs	r2, #160	; 0xa0
 800223c:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800223e:	e028      	b.n	8002292 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	7b5b      	ldrb	r3, [r3, #13]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <ST7735_SetOrientation+0x40>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b5b      	ldrb	r3, [r3, #13]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d120      	bne.n	8002292 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <ST7735_SetOrientation+0x114>)
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <ST7735_SetOrientation+0x114>)
 8002258:	22a0      	movs	r2, #160	; 0xa0
 800225a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800225c:	e019      	b.n	8002292 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7b5b      	ldrb	r3, [r3, #13]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <ST7735_SetOrientation+0x114>)
 8002268:	22a0      	movs	r2, #160	; 0xa0
 800226a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <ST7735_SetOrientation+0x114>)
 800226e:	2250      	movs	r2, #80	; 0x50
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	e00f      	b.n	8002294 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	7b5b      	ldrb	r3, [r3, #13]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <ST7735_SetOrientation+0x74>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	7b5b      	ldrb	r3, [r3, #13]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d107      	bne.n	8002294 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <ST7735_SetOrientation+0x114>)
 8002286:	22a0      	movs	r2, #160	; 0xa0
 8002288:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <ST7735_SetOrientation+0x114>)
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e000      	b.n	8002294 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002292:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <ST7735_SetOrientation+0x114>)
 800229a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7b1a      	ldrb	r2, [r3, #12]
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022a2:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	7b5a      	ldrb	r2, [r3, #13]
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022aa:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fbdf 	bl	8002a80 <ST7735_SetDisplayWindow>
 80022c2:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <ST7735_SetOrientation+0x118>)
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e006      	b.n	80022f0 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <ST7735_SetOrientation+0x114>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <ST7735_SetOrientation+0x118>)
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 0020 	add.w	r0, r3, #32
 80022f8:	f107 020b 	add.w	r2, r7, #11
 80022fc:	2301      	movs	r3, #1
 80022fe:	2136      	movs	r1, #54	; 0x36
 8002300:	f000 fd3c 	bl	8002d7c <st7735_write_reg>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002316:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002318:	68fb      	ldr	r3, [r7, #12]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	240002e4 	.word	0x240002e4
 8002328:	24000078 	.word	0x24000078

0800232c <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <ST7735_GetOrientation+0x20>)
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	240002e4 	.word	0x240002e4

08002350 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <ST7735_SetCursor+0x174>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d821      	bhi.n	80023a8 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <ST7735_SetCursor+0x174>)
 8002366:	7b5b      	ldrb	r3, [r3, #13]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10e      	bne.n	800238a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <ST7735_SetCursor+0x174>)
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	331a      	adds	r3, #26
 8002378:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3301      	adds	r3, #1
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e033      	b.n	80023ea <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3318      	adds	r3, #24
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	e02f      	b.n	80023ea <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <ST7735_SetCursor+0x174>)
 800238c:	7b5b      	ldrb	r3, [r3, #13]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d12b      	bne.n	80023ea <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <ST7735_SetCursor+0x174>)
 8002394:	7b1b      	ldrb	r3, [r3, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d127      	bne.n	80023ea <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3302      	adds	r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3301      	adds	r3, #1
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	e020      	b.n	80023ea <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <ST7735_SetCursor+0x174>)
 80023aa:	7b5b      	ldrb	r3, [r3, #13]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10e      	bne.n	80023ce <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80023b0:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <ST7735_SetCursor+0x174>)
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <ST7735_SetCursor+0x76>
				Xpos += 1;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	331a      	adds	r3, #26
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	e011      	b.n	80023ea <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3318      	adds	r3, #24
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	e00d      	b.n	80023ea <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <ST7735_SetCursor+0x174>)
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d109      	bne.n	80023ea <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <ST7735_SetCursor+0x174>)
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3302      	adds	r3, #2
 80023e8:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f103 0020 	add.w	r0, r3, #32
 80023f0:	f107 0213 	add.w	r2, r7, #19
 80023f4:	2300      	movs	r3, #0
 80023f6:	212a      	movs	r1, #42	; 0x2a
 80023f8:	f000 fcc0 	bl	8002d7c <st7735_write_reg>
 80023fc:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b2db      	uxtb	r3, r3
 8002404:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3320      	adds	r3, #32
 800240a:	f107 0113 	add.w	r1, r7, #19
 800240e:	2201      	movs	r2, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fcc8 	bl	8002da6 <st7735_send_data>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	4413      	add	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3320      	adds	r3, #32
 8002428:	f107 0113 	add.w	r1, r7, #19
 800242c:	2201      	movs	r2, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fcb9 	bl	8002da6 <st7735_send_data>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4413      	add	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f103 0020 	add.w	r0, r3, #32
 8002442:	f107 0213 	add.w	r2, r7, #19
 8002446:	2300      	movs	r3, #0
 8002448:	212b      	movs	r1, #43	; 0x2b
 800244a:	f000 fc97 	bl	8002d7c <st7735_write_reg>
 800244e:	4602      	mov	r2, r0
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	4413      	add	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b2db      	uxtb	r3, r3
 800245c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3320      	adds	r3, #32
 8002462:	f107 0113 	add.w	r1, r7, #19
 8002466:	2201      	movs	r2, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fc9c 	bl	8002da6 <st7735_send_data>
 800246e:	4602      	mov	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3320      	adds	r3, #32
 8002480:	f107 0113 	add.w	r1, r7, #19
 8002484:	2201      	movs	r2, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fc8d 	bl	8002da6 <st7735_send_data>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4413      	add	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f103 0020 	add.w	r0, r3, #32
 800249a:	f107 0213 	add.w	r2, r7, #19
 800249e:	2300      	movs	r3, #0
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	f000 fc6b 	bl	8002d7c <st7735_write_reg>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4413      	add	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80024ba:	697b      	ldr	r3, [r7, #20]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	240002e4 	.word	0x240002e4

080024c8 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	; 0x40
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	330a      	adds	r3, #10
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	330b      	adds	r3, #11
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	441a      	add	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	441a      	add	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	330d      	adds	r3, #13
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4413      	add	r3, r2
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3312      	adds	r3, #18
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	3313      	adds	r3, #19
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	441a      	add	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	441a      	add	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3315      	adds	r3, #21
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	4413      	add	r3, r2
 800252c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	3316      	adds	r3, #22
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3317      	adds	r3, #23
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	441a      	add	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	3318      	adds	r3, #24
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	441a      	add	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3319      	adds	r3, #25
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4413      	add	r3, r2
 8002554:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3302      	adds	r3, #2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	3303      	adds	r3, #3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	441a      	add	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3304      	adds	r3, #4
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	441a      	add	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3305      	adds	r3, #5
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4413      	add	r3, r2
 800257c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	4413      	add	r3, r2
 800258c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa6a 	bl	8002a80 <ST7735_SetDisplayWindow>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
 80025b8:	e087      	b.n	80026ca <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 80025bc:	7b1b      	ldrb	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <ST7735_DrawBitmap+0x210>)
 80025c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025cc:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	e005      	b.n	80025e2 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a3f      	ldr	r2, [pc, #252]	; (80026d8 <ST7735_DrawBitmap+0x210>)
 80025dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f103 0020 	add.w	r0, r3, #32
 80025ea:	f107 0213 	add.w	r2, r7, #19
 80025ee:	2301      	movs	r3, #1
 80025f0:	2136      	movs	r1, #54	; 0x36
 80025f2:	f000 fbc3 	bl	8002d7c <st7735_write_reg>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
 8002602:	e062      	b.n	80026ca <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7ff fea1 	bl	8002350 <ST7735_SetCursor>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
 800261a:	e056      	b.n	80026ca <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3320      	adds	r3, #32
 800262c:	f107 0114 	add.w	r1, r7, #20
 8002630:	2202      	movs	r2, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fbb7 	bl	8002da6 <st7735_send_data>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002644:	e009      	b.n	800265a <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	3302      	adds	r3, #2
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	3302      	adds	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3e0      	bcc.n	800261c <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 800265c:	7b1b      	ldrb	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <ST7735_DrawBitmap+0x210>)
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e006      	b.n	8002686 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <ST7735_DrawBitmap+0x210>)
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002684:	b2db      	uxtb	r3, r3
 8002686:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f103 0020 	add.w	r0, r3, #32
 800268e:	f107 0213 	add.w	r2, r7, #19
 8002692:	2301      	movs	r3, #1
 8002694:	2136      	movs	r1, #54	; 0x36
 8002696:	f000 fb71 	bl	8002d7c <st7735_write_reg>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
 80026a6:	e010      	b.n	80026ca <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <ST7735_DrawBitmap+0x20c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f9e1 	bl	8002a80 <ST7735_SetDisplayWindow>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	; 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	240002e4 	.word	0x240002e4
 80026d8:	24000078 	.word	0x24000078

080026dc <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	441a      	add	r2, r3
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <ST7735_FillRGBRect+0xcc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d806      	bhi.n	800270e <ST7735_FillRGBRect+0x32>
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	441a      	add	r2, r3
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <ST7735_FillRGBRect+0xcc>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d903      	bls.n	8002716 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e042      	b.n	800279c <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e03b      	b.n	8002794 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	461a      	mov	r2, r3
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fe12 	bl	8002350 <ST7735_SetCursor>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	e029      	b.n	800278e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e013      	b.n	8002768 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	7811      	ldrb	r1, [r2, #0]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <ST7735_FillRGBRect+0xd0>)
 800274a:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	3301      	adds	r3, #1
 8002756:	7811      	ldrb	r1, [r2, #0]
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <ST7735_FillRGBRect+0xd0>)
 800275a:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3302      	adds	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	429a      	cmp	r2, r3
 800276e:	d3e7      	bcc.n	8002740 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f103 0020 	add.w	r0, r3, #32
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	461a      	mov	r2, r3
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <ST7735_FillRGBRect+0xd0>)
 800277e:	f000 fb12 	bl	8002da6 <st7735_send_data>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	429a      	cmp	r2, r3
 800279a:	d3bf      	bcc.n	800271c <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 800279c:	69fb      	ldr	r3, [r7, #28]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	240002e4 	.word	0x240002e4
 80027ac:	240002f4 	.word	0x240002f4

080027b0 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	441a      	add	r2, r3
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <ST7735_DrawHLine+0x98>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d903      	bls.n	80027d8 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e032      	b.n	800283e <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fdb7 	bl	8002350 <ST7735_SetCursor>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e026      	b.n	800283e <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e010      	b.n	8002818 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	0a1a      	lsrs	r2, r3, #8
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	b2d1      	uxtb	r1, r2
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <ST7735_DrawHLine+0x9c>)
 8002802:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	3301      	adds	r3, #1
 800280a:	6a3a      	ldr	r2, [r7, #32]
 800280c:	b2d1      	uxtb	r1, r2
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <ST7735_DrawHLine+0x9c>)
 8002810:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3301      	adds	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3ea      	bcc.n	80027f6 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f103 0020 	add.w	r0, r3, #32
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	461a      	mov	r2, r3
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <ST7735_DrawHLine+0x9c>)
 800282e:	f000 faba 	bl	8002da6 <st7735_send_data>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800283e:	697b      	ldr	r3, [r7, #20]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	240002e4 	.word	0x240002e4
 800284c:	24000574 	.word	0x24000574

08002850 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	441a      	add	r2, r3
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <ST7735_DrawVLine+0x64>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d903      	bls.n	8002878 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e018      	b.n	80028aa <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e011      	b.n	80028a2 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	441a      	add	r2, r3
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f841 	bl	8002910 <ST7735_SetPixel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002898:	617b      	str	r3, [r7, #20]
        break;
 800289a:	e006      	b.n	80028aa <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	3301      	adds	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d3e9      	bcc.n	800287e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	240002e4 	.word	0x240002e4

080028b8 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e014      	b.n	80028fe <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff ff66 	bl	80027b0 <ST7735_DrawHLine>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ee:	61fb      	str	r3, [r7, #28]
      break;
 80028f0:	e009      	b.n	8002906 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	429a      	cmp	r2, r3
 8002904:	d3e6      	bcc.n	80028d4 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002906:	69fb      	ldr	r3, [r7, #28]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	b29b      	uxth	r3, r3
 800292a:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	b29a      	uxth	r2, r3
 8002932:	8a7b      	ldrh	r3, [r7, #18]
 8002934:	4313      	orrs	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <ST7735_SetPixel+0x84>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d204      	bcs.n	800294e <ST7735_SetPixel+0x3e>
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <ST7735_SetPixel+0x84>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d303      	bcc.n	8002956 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e019      	b.n	800298a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff fcf8 	bl	8002350 <ST7735_SetCursor>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e00d      	b.n	800298a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3320      	adds	r3, #32
 8002972:	f107 0112 	add.w	r1, r7, #18
 8002976:	2202      	movs	r2, #2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa14 	bl	8002da6 <st7735_send_data>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002988:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800298a:	697b      	ldr	r3, [r7, #20]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	240002e4 	.word	0x240002e4

08002998 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fcd0 	bl	8002350 <ST7735_SetCursor>
 80029b0:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3320      	adds	r3, #32
 80029b6:	f107 0211 	add.w	r2, r7, #17
 80029ba:	212e      	movs	r1, #46	; 0x2e
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f9ca 	bl	8002d56 <st7735_read_reg>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4413      	add	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3320      	adds	r3, #32
 80029ce:	f107 0111 	add.w	r1, r7, #17
 80029d2:	2201      	movs	r2, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f9f8 	bl	8002dca <st7735_recv_data>
 80029da:	4602      	mov	r2, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4413      	add	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3320      	adds	r3, #32
 80029e6:	f107 0113 	add.w	r1, r7, #19
 80029ea:	2201      	movs	r2, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f9ec 	bl	8002dca <st7735_recv_data>
 80029f2:	4602      	mov	r2, r0
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3320      	adds	r3, #32
 80029fe:	f107 0112 	add.w	r1, r7, #18
 8002a02:	2201      	movs	r2, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f9e0 	bl	8002dca <st7735_recv_data>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4413      	add	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	461a      	mov	r2, r3
 8002a16:	7cbb      	ldrb	r3, [r7, #18]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	441a      	add	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002a2c:	697b      	ldr	r3, [r7, #20]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <ST7735_GetXSize+0x20>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	240002e4 	.word	0x240002e4

08002a5c <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <ST7735_GetYSize+0x20>)
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	240002e4 	.word	0x240002e4

08002a80 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d821      	bhi.n	8002ada <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002a96:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002a98:	7b5b      	ldrb	r3, [r3, #13]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10e      	bne.n	8002abc <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002a9e:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002aa0:	7b1b      	ldrb	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	331a      	adds	r3, #26
 8002aaa:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e036      	b.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	e032      	b.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002abe:	7b5b      	ldrb	r3, [r3, #13]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d12e      	bne.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002ac6:	7b1b      	ldrb	r3, [r3, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d12a      	bne.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	e023      	b.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002ada:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d111      	bne.n	8002b06 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002ae2:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002ae4:	7b1b      	ldrb	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	331a      	adds	r3, #26
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e014      	b.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3318      	adds	r3, #24
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	e00d      	b.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002b08:	7b5b      	ldrb	r3, [r3, #13]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d109      	bne.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <ST7735_SetDisplayWindow+0x204>)
 8002b10:	7b1b      	ldrb	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f103 0020 	add.w	r0, r3, #32
 8002b28:	f107 0213 	add.w	r2, r7, #19
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	212a      	movs	r1, #42	; 0x2a
 8002b30:	f000 f924 	bl	8002d7c <st7735_write_reg>
 8002b34:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3320      	adds	r3, #32
 8002b42:	f107 0113 	add.w	r1, r7, #19
 8002b46:	2201      	movs	r2, #1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f92c 	bl	8002da6 <st7735_send_data>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3320      	adds	r3, #32
 8002b60:	f107 0113 	add.w	r1, r7, #19
 8002b64:	2201      	movs	r2, #1
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f91d 	bl	8002da6 <st7735_send_data>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4413      	add	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3320      	adds	r3, #32
 8002b86:	f107 0113 	add.w	r1, r7, #19
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f90a 	bl	8002da6 <st7735_send_data>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3320      	adds	r3, #32
 8002bb0:	f107 0113 	add.w	r1, r7, #19
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f8f5 	bl	8002da6 <st7735_send_data>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f103 0020 	add.w	r0, r3, #32
 8002bca:	f107 0213 	add.w	r2, r7, #19
 8002bce:	2300      	movs	r3, #0
 8002bd0:	212b      	movs	r1, #43	; 0x2b
 8002bd2:	f000 f8d3 	bl	8002d7c <st7735_write_reg>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3320      	adds	r3, #32
 8002bea:	f107 0113 	add.w	r1, r7, #19
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f8d8 	bl	8002da6 <st7735_send_data>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3320      	adds	r3, #32
 8002c08:	f107 0113 	add.w	r1, r7, #19
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f8c9 	bl	8002da6 <st7735_send_data>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4413      	add	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	4413      	add	r3, r2
 8002c22:	3b01      	subs	r3, #1
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3320      	adds	r3, #32
 8002c2e:	f107 0113 	add.w	r1, r7, #19
 8002c32:	2201      	movs	r2, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f8b6 	bl	8002da6 <st7735_send_data>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3320      	adds	r3, #32
 8002c58:	f107 0113 	add.w	r1, r7, #19
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f8a1 	bl	8002da6 <st7735_send_data>
 8002c64:	4602      	mov	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c76:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002c78:	697b      	ldr	r3, [r7, #20]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	240002e4 	.word	0x240002e4

08002c88 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	460b      	mov	r3, r1
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	7afa      	ldrb	r2, [r7, #11]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4798      	blx	r3
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	7af8      	ldrb	r0, [r7, #11]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4798      	blx	r3
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	68b8      	ldr	r0, [r7, #8]
 8002cf2:	4798      	blx	r3
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68b8      	ldr	r0, [r7, #8]
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4798      	blx	r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002d36:	bf00      	nop
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4798      	blx	r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f5      	bhi.n	8002d38 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	6910      	ldr	r0, [r2, #16]
 8002d6c:	7af9      	ldrb	r1, [r7, #11]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	4603      	mov	r3, r0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681c      	ldr	r4, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6918      	ldr	r0, [r3, #16]
 8002d94:	7af9      	ldrb	r1, [r7, #11]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	47a0      	blx	r4
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6910      	ldr	r0, [r2, #16]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4798      	blx	r3
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	6910      	ldr	r0, [r2, #16]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	4798      	blx	r3
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df6:	2003      	movs	r0, #3
 8002df8:	f000 f96e 	bl	80030d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dfc:	f001 f9c2 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_Init+0x68>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	4913      	ldr	r1, [pc, #76]	; (8002e5c <HAL_Init+0x6c>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_Init+0x68>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_Init+0x6c>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_Init+0x70>)
 8002e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_Init+0x74>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f000 f814 	bl	8002e68 <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e002      	b.n	8002e50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e4a:	f7fd feb9 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	080084b8 	.word	0x080084b8
 8002e60:	24000004 	.word	0x24000004
 8002e64:	24000000 	.word	0x24000000

08002e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_InitTick+0x60>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e021      	b.n	8002ec0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_InitTick+0x64>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_InitTick+0x60>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f945 	bl	8003122 <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb0:	f000 f91d 	bl	80030ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x68>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2400009c 	.word	0x2400009c
 8002ecc:	24000000 	.word	0x24000000
 8002ed0:	24000098 	.word	0x24000098

08002ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x20>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	2400009c 	.word	0x2400009c
 8002ef8:	240007f4 	.word	0x240007f4

08002efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return uwTick;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_GetTick+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	240007f4 	.word	0x240007f4

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff ffee 	bl	8002efc <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2c:	d005      	beq.n	8002f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_Delay+0x44>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f3a:	bf00      	nop
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d8f7      	bhi.n	8002f3c <HAL_Delay+0x28>
  {
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2400009c 	.word	0x2400009c

08002f5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetREVID+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0c1b      	lsrs	r3, r3, #16
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	5c001000 	.word	0x5c001000

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	05fa0000 	.word	0x05fa0000

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
         );
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a4:	d301      	bcc.n	80030aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00f      	b.n	80030ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <SysTick_Config+0x40>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b2:	210f      	movs	r1, #15
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b8:	f7ff ff8e 	bl	8002fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <SysTick_Config+0x40>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <SysTick_Config+0x40>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff47 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030fc:	f7ff ff5e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	f7ff ff90 	bl	800302c <NVIC_EncodePriority>
 800310c:	4602      	mov	r2, r0
 800310e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff5f 	bl	8002fd8 <__NVIC_SetPriority>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffb2 	bl	8003094 <SysTick_Config>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800314a:	4b89      	ldr	r3, [pc, #548]	; (8003370 <HAL_GPIO_Init+0x234>)
 800314c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800314e:	e194      	b.n	800347a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8186 	beq.w	8003474 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d005      	beq.n	8003180 <HAL_GPIO_Init+0x44>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b6:	2201      	movs	r2, #1
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d017      	beq.n	800321e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d123      	bne.n	8003272 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80e0 	beq.w	8003474 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_GPIO_Init+0x238>)
 80032b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032ba:	4a2e      	ldr	r2, [pc, #184]	; (8003374 <HAL_GPIO_Init+0x238>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_GPIO_Init+0x238>)
 80032c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d2:	4a29      	ldr	r2, [pc, #164]	; (8003378 <HAL_GPIO_Init+0x23c>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_GPIO_Init+0x240>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d052      	beq.n	80033a4 <HAL_GPIO_Init+0x268>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_GPIO_Init+0x244>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_GPIO_Init+0x22e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <HAL_GPIO_Init+0x248>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <HAL_GPIO_Init+0x22a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_GPIO_Init+0x24c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d025      	beq.n	8003362 <HAL_GPIO_Init+0x226>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_GPIO_Init+0x250>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <HAL_GPIO_Init+0x222>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_GPIO_Init+0x254>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x21e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_GPIO_Init+0x258>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x21a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_GPIO_Init+0x25c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x216>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_GPIO_Init+0x260>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_GPIO_Init+0x264>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x20e>
 8003346:	2309      	movs	r3, #9
 8003348:	e02d      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800334a:	230a      	movs	r3, #10
 800334c:	e02b      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800334e:	2308      	movs	r3, #8
 8003350:	e029      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 8003352:	2307      	movs	r3, #7
 8003354:	e027      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 8003356:	2306      	movs	r3, #6
 8003358:	e025      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800335a:	2305      	movs	r3, #5
 800335c:	e023      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800335e:	2304      	movs	r3, #4
 8003360:	e021      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 8003362:	2303      	movs	r3, #3
 8003364:	e01f      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 8003366:	2302      	movs	r3, #2
 8003368:	e01d      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800336a:	2301      	movs	r3, #1
 800336c:	e01b      	b.n	80033a6 <HAL_GPIO_Init+0x26a>
 800336e:	bf00      	nop
 8003370:	58000080 	.word	0x58000080
 8003374:	58024400 	.word	0x58024400
 8003378:	58000400 	.word	0x58000400
 800337c:	58020000 	.word	0x58020000
 8003380:	58020400 	.word	0x58020400
 8003384:	58020800 	.word	0x58020800
 8003388:	58020c00 	.word	0x58020c00
 800338c:	58021000 	.word	0x58021000
 8003390:	58021400 	.word	0x58021400
 8003394:	58021800 	.word	0x58021800
 8003398:	58021c00 	.word	0x58021c00
 800339c:	58022000 	.word	0x58022000
 80033a0:	58022400 	.word	0x58022400
 80033a4:	2300      	movs	r3, #0
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f002 0203 	and.w	r2, r2, #3
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	4093      	lsls	r3, r2
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b6:	4938      	ldr	r1, [pc, #224]	; (8003498 <HAL_GPIO_Init+0x35c>)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	3302      	adds	r3, #2
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f ae63 	bne.w	8003150 <HAL_GPIO_Init+0x14>
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	3724      	adds	r7, #36	; 0x24
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	58000400 	.word	0x58000400

0800349c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034b8:	e003      	b.n	80034c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	041a      	lsls	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	58024800 	.word	0x58024800

080034f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_PWREx_ConfigSupply+0x70>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d00a      	beq.n	800351a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_PWREx_ConfigSupply+0x70>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e01f      	b.n	8003556 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e01d      	b.n	8003556 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_PWREx_ConfigSupply+0x70>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	490f      	ldr	r1, [pc, #60]	; (8003560 <HAL_PWREx_ConfigSupply+0x70>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4313      	orrs	r3, r2
 8003528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800352a:	f7ff fce7 	bl	8002efc <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003530:	e009      	b.n	8003546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003532:	f7ff fce3 	bl	8002efc <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d901      	bls.n	8003546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_PWREx_ConfigSupply+0x70>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d1ee      	bne.n	8003532 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	58024800 	.word	0x58024800

08003564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f000 bc48 	b.w	8003e08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8088 	beq.w	8003696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003586:	4b99      	ldr	r3, [pc, #612]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003590:	4b96      	ldr	r3, [pc, #600]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b10      	cmp	r3, #16
 800359a:	d007      	beq.n	80035ac <HAL_RCC_OscConfig+0x48>
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b18      	cmp	r3, #24
 80035a0:	d111      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62>
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d06d      	beq.n	8003694 <HAL_RCC_OscConfig+0x130>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d169      	bne.n	8003694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f000 bc21 	b.w	8003e08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x7a>
 80035d0:	4b86      	ldr	r3, [pc, #536]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a85      	ldr	r2, [pc, #532]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	e02e      	b.n	800363c <HAL_RCC_OscConfig+0xd8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x9c>
 80035e6:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a80      	ldr	r2, [pc, #512]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b7e      	ldr	r3, [pc, #504]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a7d      	ldr	r2, [pc, #500]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80035f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xd8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0xc0>
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a77      	ldr	r2, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b75      	ldr	r3, [pc, #468]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a74      	ldr	r2, [pc, #464]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xd8>
 8003624:	4b71      	ldr	r3, [pc, #452]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a70      	ldr	r2, [pc, #448]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6d      	ldr	r2, [pc, #436]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff fc5a 	bl	8002efc <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7ff fc56 	bl	8002efc <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e3d4      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xe8>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7ff fc46 	bl	8002efc <HAL_GetTick>
 8003670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7ff fc42 	bl	8002efc <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e3c0      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003686:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x110>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80ca 	beq.w	8003838 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a4:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ae:	4b4f      	ldr	r3, [pc, #316]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_RCC_OscConfig+0x166>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b18      	cmp	r3, #24
 80036be:	d156      	bne.n	800376e <HAL_RCC_OscConfig+0x20a>
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d151      	bne.n	800376e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ca:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_RCC_OscConfig+0x17e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e392      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036e2:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0219 	bic.w	r2, r3, #25
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	493f      	ldr	r1, [pc, #252]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7ff fc02 	bl	8002efc <HAL_GetTick>
 80036f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7ff fbfe 	bl	8002efc <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e37c      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	f7ff fc1f 	bl	8002f5c <HAL_GetREVID>
 800371e:	4603      	mov	r3, r0
 8003720:	f241 0203 	movw	r2, #4099	; 0x1003
 8003724:	4293      	cmp	r3, r2
 8003726:	d817      	bhi.n	8003758 <HAL_RCC_OscConfig+0x1f4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d108      	bne.n	8003742 <HAL_RCC_OscConfig+0x1de>
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003740:	e07a      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	031b      	lsls	r3, r3, #12
 8003750:	4926      	ldr	r1, [pc, #152]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003756:	e06f      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	4921      	ldr	r1, [pc, #132]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800376c:	e064      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d047      	beq.n	8003806 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0219 	bic.w	r2, r3, #25
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	491a      	ldr	r1, [pc, #104]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7ff fbb8 	bl	8002efc <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7ff fbb4 	bl	8002efc <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e332      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	f7ff fbd5 	bl	8002f5c <HAL_GetREVID>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d819      	bhi.n	80037f0 <HAL_RCC_OscConfig+0x28c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d108      	bne.n	80037d6 <HAL_RCC_OscConfig+0x272>
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037cc:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	e030      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	031b      	lsls	r3, r3, #12
 80037e4:	4901      	ldr	r1, [pc, #4]	; (80037ec <HAL_RCC_OscConfig+0x288>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 80037ea:	e025      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
 80037ec:	58024400 	.word	0x58024400
 80037f0:	4b9a      	ldr	r3, [pc, #616]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	4997      	ldr	r1, [pc, #604]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e018      	b.n	8003838 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b95      	ldr	r3, [pc, #596]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a94      	ldr	r2, [pc, #592]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7ff fb73 	bl	8002efc <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7ff fb6f 	bl	8002efc <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e2ed      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800382c:	4b8b      	ldr	r3, [pc, #556]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a9 	beq.w	8003998 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003846:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003850:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d007      	beq.n	800386c <HAL_RCC_OscConfig+0x308>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b18      	cmp	r3, #24
 8003860:	d13a      	bne.n	80038d8 <HAL_RCC_OscConfig+0x374>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d135      	bne.n	80038d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x320>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e2c1      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003884:	f7ff fb6a 	bl	8002f5c <HAL_GetREVID>
 8003888:	4603      	mov	r3, r0
 800388a:	f241 0203 	movw	r2, #4099	; 0x1003
 800388e:	4293      	cmp	r3, r2
 8003890:	d817      	bhi.n	80038c2 <HAL_RCC_OscConfig+0x35e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	2b20      	cmp	r3, #32
 8003898:	d108      	bne.n	80038ac <HAL_RCC_OscConfig+0x348>
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038a2:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038aa:	e075      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ac:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	4968      	ldr	r1, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c0:	e06a      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038c2:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	4962      	ldr	r1, [pc, #392]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038d6:	e05f      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d042      	beq.n	8003966 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038e0:	4b5e      	ldr	r3, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5d      	ldr	r2, [pc, #372]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7ff fb06 	bl	8002efc <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038f4:	f7ff fb02 	bl	8002efc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e280      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003906:	4b55      	ldr	r3, [pc, #340]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003912:	f7ff fb23 	bl	8002f5c <HAL_GetREVID>
 8003916:	4603      	mov	r3, r0
 8003918:	f241 0203 	movw	r2, #4099	; 0x1003
 800391c:	4293      	cmp	r3, r2
 800391e:	d817      	bhi.n	8003950 <HAL_RCC_OscConfig+0x3ec>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2b20      	cmp	r3, #32
 8003926:	d108      	bne.n	800393a <HAL_RCC_OscConfig+0x3d6>
 8003928:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003930:	4a4a      	ldr	r2, [pc, #296]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003936:	6053      	str	r3, [r2, #4]
 8003938:	e02e      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
 800393a:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	069b      	lsls	r3, r3, #26
 8003948:	4944      	ldr	r1, [pc, #272]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 800394e:	e023      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
 8003950:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	493f      	ldr	r1, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	60cb      	str	r3, [r1, #12]
 8003964:	e018      	b.n	8003998 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800396c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7ff fac3 	bl	8002efc <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800397a:	f7ff fabf 	bl	8002efc <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e23d      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800398c:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d036      	beq.n	8003a12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d019      	beq.n	80039e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7ff faa0 	bl	8002efc <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7ff fa9c 	bl	8002efc <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e21a      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x45c>
 80039de:	e018      	b.n	8003a12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7ff fa86 	bl	8002efc <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f4:	f7ff fa82 	bl	8002efc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e200      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d039      	beq.n	8003a92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a32:	f7ff fa63 	bl	8002efc <HAL_GetTick>
 8003a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3a:	f7ff fa5f 	bl	8002efc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1dd      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_OscConfig+0x4f8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x4d6>
 8003a58:	e01b      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 8003a5a:	bf00      	nop
 8003a5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a60:	4b9b      	ldr	r3, [pc, #620]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a9a      	ldr	r2, [pc, #616]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a6c:	f7ff fa46 	bl	8002efc <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a74:	f7ff fa42 	bl	8002efc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1c0      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a86:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8081 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aa0:	4b8c      	ldr	r3, [pc, #560]	; (8003cd4 <HAL_RCC_OscConfig+0x770>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a8b      	ldr	r2, [pc, #556]	; (8003cd4 <HAL_RCC_OscConfig+0x770>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aac:	f7ff fa26 	bl	8002efc <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7ff fa22 	bl	8002efc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1a0      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac6:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCC_OscConfig+0x770>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x584>
 8003ada:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	e02d      	b.n	8003b44 <HAL_RCC_OscConfig+0x5e0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCC_OscConfig+0x5a6>
 8003af0:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a76      	ldr	r2, [pc, #472]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	4b74      	ldr	r3, [pc, #464]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a73      	ldr	r2, [pc, #460]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x5e0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c8>
 8003b12:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x5e0>
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a64      	ldr	r2, [pc, #400]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7ff f9d6 	bl	8002efc <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7ff f9d2 	bl	8002efc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e14e      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x5f0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7ff f9c0 	bl	8002efc <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7ff f9bc 	bl	8002efc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e138      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b96:	4b4e      	ldr	r3, [pc, #312]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 812d 	beq.w	8003e06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bac:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb4:	2b18      	cmp	r3, #24
 8003bb6:	f000 80bd 	beq.w	8003d34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	f040 809e 	bne.w	8003d00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a41      	ldr	r2, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7ff f994 	bl	8002efc <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7ff f990 	bl	8002efc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e10e      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bea:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf6:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <HAL_RCC_OscConfig+0x774>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4931      	ldr	r1, [pc, #196]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	3b01      	subs	r3, #1
 8003c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	025b      	lsls	r3, r3, #9
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c40:	4923      	ldr	r1, [pc, #140]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCC_OscConfig+0x778>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c5e:	00d2      	lsls	r2, r2, #3
 8003c60:	491b      	ldr	r1, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f023 020c 	bic.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	f023 0202 	bic.w	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7ff f919 	bl	8002efc <HAL_GetTick>
 8003cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ccc:	e011      	b.n	8003cf2 <HAL_RCC_OscConfig+0x78e>
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	58024800 	.word	0x58024800
 8003cd8:	fffffc0c 	.word	0xfffffc0c
 8003cdc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7ff f90c 	bl	8002efc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e08a      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x77c>
 8003cfe:	e082      	b.n	8003e06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a42      	ldr	r2, [pc, #264]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f8f6 	bl	8002efc <HAL_GetTick>
 8003d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7ff f8f2 	bl	8002efc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e070      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d26:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x7b0>
 8003d32:	e068      	b.n	8003e06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d3a:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d031      	beq.n	8003dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0203 	and.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d12a      	bne.n	8003dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d122      	bne.n	8003dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d11a      	bne.n	8003dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	0a5b      	lsrs	r3, r3, #9
 8003d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d111      	bne.n	8003dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	0c1b      	lsrs	r3, r3, #16
 8003d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d108      	bne.n	8003dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e02b      	b.n	8003e08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d01f      	beq.n	8003e06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	4a11      	ldr	r2, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dd2:	f7ff f893 	bl	8002efc <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dd8:	bf00      	nop
 8003dda:	f7ff f88f 	bl	8002efc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d0f9      	beq.n	8003dda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_OscConfig+0x8b0>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003df2:	00d2      	lsls	r2, r2, #3
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCC_OscConfig+0x8ac>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	; 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	ffff0007 	.word	0xffff0007

08003e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e19c      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b8a      	ldr	r3, [pc, #552]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b87      	ldr	r3, [pc, #540]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 020f 	bic.w	r2, r3, #15
 8003e42:	4985      	ldr	r1, [pc, #532]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b83      	ldr	r3, [pc, #524]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e184      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	4b7b      	ldr	r3, [pc, #492]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d908      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e78:	4b78      	ldr	r3, [pc, #480]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	4975      	ldr	r1, [pc, #468]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	4b70      	ldr	r3, [pc, #448]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	496a      	ldr	r1, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d908      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed4:	4b61      	ldr	r3, [pc, #388]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	495e      	ldr	r1, [pc, #376]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d908      	bls.n	8003f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4953      	ldr	r1, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d908      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f023 020f 	bic.w	r2, r3, #15
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4947      	ldr	r1, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d055      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4940      	ldr	r1, [pc, #256]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d121      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0f6      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f80:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0ea      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0de      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d6      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fb8:	4b28      	ldr	r3, [pc, #160]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f023 0207 	bic.w	r2, r3, #7
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4925      	ldr	r1, [pc, #148]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fe ff97 	bl	8002efc <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd2:	f7fe ff93 	bl	8002efc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0be      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d1eb      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	429a      	cmp	r2, r3
 8004014:	d208      	bcs.n	8004028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f023 020f 	bic.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x244>)
 8004024:	4313      	orrs	r3, r2
 8004026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d214      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 020f 	bic.w	r2, r3, #15
 800403e:	4906      	ldr	r1, [pc, #24]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_RCC_ClockConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e086      	b.n	8004166 <HAL_RCC_ClockConfig+0x34e>
 8004058:	52002000 	.word	0x52002000
 800405c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004078:	429a      	cmp	r2, r3
 800407a:	d208      	bcs.n	800408e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800407c:	4b3c      	ldr	r3, [pc, #240]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	4939      	ldr	r1, [pc, #228]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 800408a:	4313      	orrs	r3, r2
 800408c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	4b34      	ldr	r3, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d208      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	492e      	ldr	r1, [pc, #184]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d208      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	4922      	ldr	r1, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d010      	beq.n	8004118 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004102:	429a      	cmp	r2, r3
 8004104:	d208      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4917      	ldr	r1, [pc, #92]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 8004114:	4313      	orrs	r3, r2
 8004116:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004118:	f000 f834 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	4912      	ldr	r1, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x35c>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x358>)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <HAL_RCC_ClockConfig+0x35c>)
 8004140:	5cd3      	ldrb	r3, [r2, r3]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
 800414c:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x360>)
 800414e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x364>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x368>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fe84 	bl	8002e68 <HAL_InitTick>
 8004160:	4603      	mov	r3, r0
 8004162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
 8004174:	080084b8 	.word	0x080084b8
 8004178:	24000004 	.word	0x24000004
 800417c:	24000000 	.word	0x24000000
 8004180:	24000098 	.word	0x24000098

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418a:	4bb3      	ldr	r3, [pc, #716]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004192:	2b18      	cmp	r3, #24
 8004194:	f200 8155 	bhi.w	8004442 <HAL_RCC_GetSysClockFreq+0x2be>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	08004205 	.word	0x08004205
 80041a4:	08004443 	.word	0x08004443
 80041a8:	08004443 	.word	0x08004443
 80041ac:	08004443 	.word	0x08004443
 80041b0:	08004443 	.word	0x08004443
 80041b4:	08004443 	.word	0x08004443
 80041b8:	08004443 	.word	0x08004443
 80041bc:	08004443 	.word	0x08004443
 80041c0:	0800422b 	.word	0x0800422b
 80041c4:	08004443 	.word	0x08004443
 80041c8:	08004443 	.word	0x08004443
 80041cc:	08004443 	.word	0x08004443
 80041d0:	08004443 	.word	0x08004443
 80041d4:	08004443 	.word	0x08004443
 80041d8:	08004443 	.word	0x08004443
 80041dc:	08004443 	.word	0x08004443
 80041e0:	08004231 	.word	0x08004231
 80041e4:	08004443 	.word	0x08004443
 80041e8:	08004443 	.word	0x08004443
 80041ec:	08004443 	.word	0x08004443
 80041f0:	08004443 	.word	0x08004443
 80041f4:	08004443 	.word	0x08004443
 80041f8:	08004443 	.word	0x08004443
 80041fc:	08004443 	.word	0x08004443
 8004200:	08004237 	.word	0x08004237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004204:	4b94      	ldr	r3, [pc, #592]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004210:	4b91      	ldr	r3, [pc, #580]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	4a90      	ldr	r2, [pc, #576]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004222:	e111      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004224:	4b8d      	ldr	r3, [pc, #564]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004226:	61bb      	str	r3, [r7, #24]
      break;
 8004228:	e10e      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800422a:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800422c:	61bb      	str	r3, [r7, #24]
      break;
 800422e:	e10b      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004230:	4b8c      	ldr	r3, [pc, #560]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004232:	61bb      	str	r3, [r7, #24]
      break;
 8004234:	e108      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004240:	4b85      	ldr	r3, [pc, #532]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800424c:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004256:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	08db      	lsrs	r3, r3, #3
 800425c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80e1 	beq.w	800443c <HAL_RCC_GetSysClockFreq+0x2b8>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b02      	cmp	r3, #2
 800427e:	f000 8083 	beq.w	8004388 <HAL_RCC_GetSysClockFreq+0x204>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f200 80a1 	bhi.w	80043cc <HAL_RCC_GetSysClockFreq+0x248>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x114>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d056      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004296:	e099      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004298:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02d      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a4:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	4a6b      	ldr	r2, [pc, #428]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
 80042b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ce:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042fe:	e087      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e8>
 800430e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004322:	ed97 6a02 	vldr	s12, [r7, #8]
 8004326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800432a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004342:	e065      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004356:	4b40      	ldr	r3, [pc, #256]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004366:	ed97 6a02 	vldr	s12, [r7, #8]
 800436a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800436e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004386:	e043      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ca:	e021      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800440e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	0a5b      	lsrs	r3, r3, #9
 8004416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441a:	3301      	adds	r3, #1
 800441c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004428:	edd7 6a07 	vldr	s13, [r7, #28]
 800442c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 3a90 	vmov	r3, s15
 8004438:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800443a:	e005      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
      break;
 8004440:	e002      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004444:	61bb      	str	r3, [r7, #24]
      break;
 8004446:	bf00      	nop
  }

  return sysclockfreq;
 8004448:	69bb      	ldr	r3, [r7, #24]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	03d09000 	.word	0x03d09000
 8004460:	003d0900 	.word	0x003d0900
 8004464:	017d7840 	.word	0x017d7840
 8004468:	46000000 	.word	0x46000000
 800446c:	4c742400 	.word	0x4c742400
 8004470:	4a742400 	.word	0x4a742400
 8004474:	4bbebc20 	.word	0x4bbebc20

08004478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800447c:	b0ca      	sub	sp, #296	; 0x128
 800447e:	af00      	add	r7, sp, #0
 8004480:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800449c:	2500      	movs	r5, #0
 800449e:	ea54 0305 	orrs.w	r3, r4, r5
 80044a2:	d049      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ae:	d02f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80044b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044b4:	d828      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80044b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ba:	d01a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c0:	d822      	bhi.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d007      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044cc:	e01c      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ce:	4bb8      	ldr	r3, [pc, #736]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	4ab7      	ldr	r2, [pc, #732]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044da:	e01a      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	3308      	adds	r3, #8
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f9d1 	bl	800588c <RCCEx_PLL2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044f0:	e00f      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	3328      	adds	r3, #40	; 0x28
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fa78 	bl	80059f0 <RCCEx_PLL3_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004506:	e004      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800451a:	4ba5      	ldr	r3, [pc, #660]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004528:	4aa1      	ldr	r2, [pc, #644]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800452a:	430b      	orrs	r3, r1
 800452c:	6513      	str	r3, [r2, #80]	; 0x50
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004544:	f04f 0900 	mov.w	r9, #0
 8004548:	ea58 0309 	orrs.w	r3, r8, r9
 800454c:	d047      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	2b04      	cmp	r3, #4
 8004556:	d82a      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004575 	.word	0x08004575
 8004564:	08004583 	.word	0x08004583
 8004568:	08004599 	.word	0x08004599
 800456c:	080045b7 	.word	0x080045b7
 8004570:	080045b7 	.word	0x080045b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4b8e      	ldr	r3, [pc, #568]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4a8d      	ldr	r2, [pc, #564]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004580:	e01a      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	3308      	adds	r3, #8
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f001 f97e 	bl	800588c <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004596:	e00f      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	3328      	adds	r3, #40	; 0x28
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 fa25 	bl	80059f0 <RCCEx_PLL3_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ac:	e004      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b4:	e000      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80045b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c0:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	f023 0107 	bic.w	r1, r3, #7
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	4a78      	ldr	r2, [pc, #480]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6513      	str	r3, [r2, #80]	; 0x50
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80045ea:	f04f 0b00 	mov.w	fp, #0
 80045ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80045f2:	d04c      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d030      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004604:	d829      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004606:	2bc0      	cmp	r3, #192	; 0xc0
 8004608:	d02d      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800460a:	2bc0      	cmp	r3, #192	; 0xc0
 800460c:	d825      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d018      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d821      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d007      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800461e:	e01c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a62      	ldr	r2, [pc, #392]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800462c:	e01c      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	3308      	adds	r3, #8
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f928 	bl	800588c <RCCEx_PLL2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004642:	e011      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004648:	3328      	adds	r3, #40	; 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f001 f9cf 	bl	80059f0 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004670:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6513      	str	r3, [r2, #80]	; 0x50
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800469a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d053      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ba:	d035      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80046bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c0:	d82e      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046c6:	d031      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80046c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046cc:	d828      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d01a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80046d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d8:	d822      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80046de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e2:	d007      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80046e4:	e01c      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e6:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046f2:	e01c      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f8:	3308      	adds	r3, #8
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f8c5 	bl	800588c <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004708:	e011      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470e:	3328      	adds	r3, #40	; 0x28
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f96c 	bl	80059f0 <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800471e:	e006      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004726:	e002      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004728:	bf00      	nop
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800472c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6593      	str	r3, [r2, #88]	; 0x58
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004762:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800476c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d056      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800477e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004782:	d038      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004788:	d831      	bhi.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800478a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800478e:	d034      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004794:	d82b      	bhi.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800479a:	d01d      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800479c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a0:	d825      	bhi.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d006      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80047a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80047ac:	e01f      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b4:	4ba2      	ldr	r3, [pc, #648]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4aa1      	ldr	r2, [pc, #644]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c0:	e01c      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c6:	3308      	adds	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f85e 	bl	800588c <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047dc:	3328      	adds	r3, #40	; 0x28
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f905 	bl	80059f0 <RCCEx_PLL3_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004804:	4b8e      	ldr	r3, [pc, #568]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004814:	4a8a      	ldr	r2, [pc, #552]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004834:	2300      	movs	r3, #0
 8004836:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800483a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d03a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	d01f      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d819      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004852:	2b20      	cmp	r3, #32
 8004854:	d00c      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004856:	2b20      	cmp	r3, #32
 8004858:	d815      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d019      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800485e:	2b10      	cmp	r3, #16
 8004860:	d111      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004862:	4b77      	ldr	r3, [pc, #476]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4a76      	ldr	r2, [pc, #472]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800486e:	e011      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	3308      	adds	r3, #8
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f001 f807 	bl	800588c <RCCEx_PLL2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	4a65      	ldr	r2, [pc, #404]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80048c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80048d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d051      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d035      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80048e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ea:	d82e      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048f0:	d031      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80048f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048f6:	d828      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d01a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80048fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004902:	d822      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d007      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800490e:	e01c      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a4a      	ldr	r2, [pc, #296]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800491c:	e01c      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004922:	3308      	adds	r3, #8
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f000 ffb0 	bl	800588c <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004932:	e011      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	3328      	adds	r3, #40	; 0x28
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f857 	bl	80059f0 <RCCEx_PLL3_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004950:	e002      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496e:	4a34      	ldr	r2, [pc, #208]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004970:	430b      	orrs	r3, r1
 8004972:	6513      	str	r3, [r2, #80]	; 0x50
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800498a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d056      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d033      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80049aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ae:	d82c      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049b4:	d02f      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80049b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ba:	d826      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c0:	d02b      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80049c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c6:	d820      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049cc:	d012      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80049ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d2:	d81a      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d022      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d115      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e2:	3308      	adds	r3, #8
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff50 	bl	800588c <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049f2:	e015      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	3328      	adds	r3, #40	; 0x28
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fff7 	bl	80059f0 <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a08:	e00a      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a12:	bf00      	nop
 8004a14:	e004      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10d      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a36:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	d055      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a78:	d033      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d82c      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a84:	d02f      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d826      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a90:	d02b      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d820      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9c:	d012      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d81a      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d022      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aac:	d115      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fee8 	bl	800588c <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ac2:	e015      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	3328      	adds	r3, #40	; 0x28
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 ff8f 	bl	80059f0 <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e004      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004af8:	4ba3      	ldr	r3, [pc, #652]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b08:	4a9f      	ldr	r2, [pc, #636]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b0e:	e003      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d037      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b42:	d00e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b48:	d816      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d018      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b52:	d111      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b54:	4b8c      	ldr	r3, [pc, #560]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4a8b      	ldr	r2, [pc, #556]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b60:	e00f      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	3308      	adds	r3, #8
 8004b68:	2101      	movs	r1, #1
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fe8e 	bl	800588c <RCCEx_PLL2_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b76:	e004      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7e:	e000      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a7b      	ldr	r2, [pc, #492]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6513      	str	r3, [r2, #80]	; 0x50
 8004b9e:	e003      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	d039      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d81c      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004be9 	.word	0x08004be9
 8004be0:	08004bf7 	.word	0x08004bf7
 8004be4:	08004c15 	.word	0x08004c15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be8:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a66      	ldr	r2, [pc, #408]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fe44 	bl	800588c <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	f023 0103 	bic.w	r1, r3, #3
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2c:	4a56      	ldr	r2, [pc, #344]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f000 809f 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c5e:	4b4b      	ldr	r3, [pc, #300]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4a      	ldr	r2, [pc, #296]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6a:	f7fe f947 	bl	8002efc <HAL_GetTick>
 8004c6e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c72:	e00b      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c74:	f7fe f942 	bl	8002efc <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	d903      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ed      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d179      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cac:	4053      	eors	r3, r2
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d015      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc2:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a30      	ldr	r2, [pc, #192]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cda:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d118      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fe f904 	bl	8002efc <HAL_GetTick>
 8004cf4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf8:	e00d      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fe f8ff 	bl	8002efc <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d04:	1ad2      	subs	r2, r2, r3
 8004d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d903      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004d14:	e005      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d16:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0eb      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d129      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3a:	d10e      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d4c:	091a      	lsrs	r2, r3, #4
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6113      	str	r3, [r2, #16]
 8004d58:	e005      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d64:	6113      	str	r3, [r2, #16]
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	e00e      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004d86:	e009      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	58024800 	.word	0x58024800
 8004d90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0301 	and.w	r3, r2, #1
 8004da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f000 8089 	beq.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc4:	2b28      	cmp	r3, #40	; 0x28
 8004dc6:	d86b      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004ea9 	.word	0x08004ea9
 8004dd4:	08004ea1 	.word	0x08004ea1
 8004dd8:	08004ea1 	.word	0x08004ea1
 8004ddc:	08004ea1 	.word	0x08004ea1
 8004de0:	08004ea1 	.word	0x08004ea1
 8004de4:	08004ea1 	.word	0x08004ea1
 8004de8:	08004ea1 	.word	0x08004ea1
 8004dec:	08004ea1 	.word	0x08004ea1
 8004df0:	08004e75 	.word	0x08004e75
 8004df4:	08004ea1 	.word	0x08004ea1
 8004df8:	08004ea1 	.word	0x08004ea1
 8004dfc:	08004ea1 	.word	0x08004ea1
 8004e00:	08004ea1 	.word	0x08004ea1
 8004e04:	08004ea1 	.word	0x08004ea1
 8004e08:	08004ea1 	.word	0x08004ea1
 8004e0c:	08004ea1 	.word	0x08004ea1
 8004e10:	08004e8b 	.word	0x08004e8b
 8004e14:	08004ea1 	.word	0x08004ea1
 8004e18:	08004ea1 	.word	0x08004ea1
 8004e1c:	08004ea1 	.word	0x08004ea1
 8004e20:	08004ea1 	.word	0x08004ea1
 8004e24:	08004ea1 	.word	0x08004ea1
 8004e28:	08004ea1 	.word	0x08004ea1
 8004e2c:	08004ea1 	.word	0x08004ea1
 8004e30:	08004ea9 	.word	0x08004ea9
 8004e34:	08004ea1 	.word	0x08004ea1
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004ea1 	.word	0x08004ea1
 8004e40:	08004ea1 	.word	0x08004ea1
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004ea1 	.word	0x08004ea1
 8004e5c:	08004ea1 	.word	0x08004ea1
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004ea1 	.word	0x08004ea1
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004ea9 	.word	0x08004ea9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e78:	3308      	adds	r3, #8
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fd05 	bl	800588c <RCCEx_PLL2_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8e:	3328      	adds	r3, #40	; 0x28
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fdac 	bl	80059f0 <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004eb2:	4bbf      	ldr	r3, [pc, #764]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec0:	4abb      	ldr	r2, [pc, #748]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f002 0302 	and.w	r3, r2, #2
 8004edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ee6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d041      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d824      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f4d 	.word	0x08004f4d
 8004f04:	08004f19 	.word	0x08004f19
 8004f08:	08004f2f 	.word	0x08004f2f
 8004f0c:	08004f4d 	.word	0x08004f4d
 8004f10:	08004f4d 	.word	0x08004f4d
 8004f14:	08004f4d 	.word	0x08004f4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fcb3 	bl	800588c <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e00f      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f32:	3328      	adds	r3, #40	; 0x28
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fd5a 	bl	80059f0 <RCCEx_PLL3_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f56:	4b96      	ldr	r3, [pc, #600]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f023 0107 	bic.w	r1, r3, #7
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	4a92      	ldr	r2, [pc, #584]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6553      	str	r3, [r2, #84]	; 0x54
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f002 0304 	and.w	r3, r2, #4
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d044      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d825      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004ff5 	.word	0x08004ff5
 8004fac:	08004fc1 	.word	0x08004fc1
 8004fb0:	08004fd7 	.word	0x08004fd7
 8004fb4:	08004ff5 	.word	0x08004ff5
 8004fb8:	08004ff5 	.word	0x08004ff5
 8004fbc:	08004ff5 	.word	0x08004ff5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fc5f 	bl	800588c <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fd4:	e00f      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fda:	3328      	adds	r3, #40	; 0x28
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fd06 	bl	80059f0 <RCCEx_PLL3_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fea:	e004      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ffe:	4b6c      	ldr	r3, [pc, #432]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	f023 0107 	bic.w	r1, r3, #7
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500e:	4a68      	ldr	r2, [pc, #416]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005010:	430b      	orrs	r3, r1
 8005012:	6593      	str	r3, [r2, #88]	; 0x58
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f002 0320 	and.w	r3, r2, #32
 800502a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005038:	460b      	mov	r3, r1
 800503a:	4313      	orrs	r3, r2
 800503c:	d055      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800504a:	d033      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800504c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005050:	d82c      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d02f      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d826      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800505e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005062:	d02b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005068:	d820      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800506a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506e:	d012      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005074:	d81a      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d022      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800507a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800507e:	d115      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005084:	3308      	adds	r3, #8
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fbff 	bl	800588c <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005094:	e015      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	3328      	adds	r3, #40	; 0x28
 800509c:	2102      	movs	r1, #2
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fca6 	bl	80059f0 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050aa:	e00a      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050b2:	e006      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80050b4:	bf00      	nop
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80050b8:	bf00      	nop
 80050ba:	e002      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80050bc:	bf00      	nop
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	4a35      	ldr	r2, [pc, #212]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	6553      	str	r3, [r2, #84]	; 0x54
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fa:	2300      	movs	r3, #0
 80050fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005100:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d058      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005112:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005116:	d033      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005118:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800511c:	d82c      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d02f      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d826      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800512a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512e:	d02b      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005134:	d820      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513a:	d012      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800513c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005140:	d81a      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d022      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514a:	d115      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005150:	3308      	adds	r3, #8
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fb99 	bl	800588c <RCCEx_PLL2_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005160:	e015      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	3328      	adds	r3, #40	; 0x28
 8005168:	2102      	movs	r1, #2
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fc40 	bl	80059f0 <RCCEx_PLL3_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005176:	e00a      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800517e:	e006      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005180:	bf00      	nop
 8005182:	e004      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005184:	bf00      	nop
 8005186:	e002      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005188:	bf00      	nop
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800518c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a6:	4a02      	ldr	r2, [pc, #8]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6593      	str	r3, [r2, #88]	; 0x58
 80051ac:	e006      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051cc:	2300      	movs	r3, #0
 80051ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d055      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051e8:	d033      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80051ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051ee:	d82c      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f4:	d02f      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80051f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fa:	d826      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005200:	d02b      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005202:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005206:	d820      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800520c:	d012      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005212:	d81a      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d022      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d115      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	3308      	adds	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fb30 	bl	800588c <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005232:	e015      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	3328      	adds	r3, #40	; 0x28
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fbd7 	bl	80059f0 <RCCEx_PLL3_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005248:	e00a      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800525e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005268:	4ba1      	ldr	r3, [pc, #644]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005278:	4a9d      	ldr	r2, [pc, #628]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800527a:	430b      	orrs	r3, r1
 800527c:	6593      	str	r3, [r2, #88]	; 0x58
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 0308 	and.w	r3, r2, #8
 8005294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800529e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d01e      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ba:	3328      	adds	r3, #40	; 0x28
 80052bc:	2102      	movs	r1, #2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb96 	bl	80059f0 <RCCEx_PLL3_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052d0:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e0:	4a83      	ldr	r2, [pc, #524]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f002 0310 	and.w	r3, r2, #16
 80052f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052f6:	2300      	movs	r3, #0
 80052f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005300:	460b      	mov	r3, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	d01e      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d10c      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	3328      	adds	r3, #40	; 0x28
 800531a:	2102      	movs	r1, #2
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fb67 	bl	80059f0 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800532e:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800533e:	4a6c      	ldr	r2, [pc, #432]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800535a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d03e      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800536c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005370:	d022      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005376:	d81b      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d00b      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005382:	e015      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005388:	3308      	adds	r3, #8
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fa7d 	bl	800588c <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005398:	e00f      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	3328      	adds	r3, #40	; 0x28
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fb24 	bl	80059f0 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053ae:	e004      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053b6:	e000      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80053b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053c2:	4b4b      	ldr	r3, [pc, #300]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053d2:	4a47      	ldr	r2, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6593      	str	r3, [r2, #88]	; 0x58
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80053ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80053f0:	2300      	movs	r3, #0
 80053f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800540a:	d01f      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800540c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005410:	d818      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d003      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541c:	d007      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800541e:	e011      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005420:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4a32      	ldr	r2, [pc, #200]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800542c:	e00f      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005432:	3328      	adds	r3, #40	; 0x28
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fada 	bl	80059f0 <RCCEx_PLL3_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005442:	e004      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800544c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005468:	430b      	orrs	r3, r1
 800546a:	6553      	str	r3, [r2, #84]	; 0x54
 800546c:	e003      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005482:	673b      	str	r3, [r7, #112]	; 0x70
 8005484:	2300      	movs	r3, #0
 8005486:	677b      	str	r3, [r7, #116]	; 0x74
 8005488:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d034      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d007      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80054a2:	e011      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054b0:	e00e      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b6:	3308      	adds	r3, #8
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f9e6 	bl	800588c <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	4a02      	ldr	r2, [pc, #8]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e8:	430b      	orrs	r3, r1
 80054ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005508:	66bb      	str	r3, [r7, #104]	; 0x68
 800550a:	2300      	movs	r3, #0
 800550c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800550e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d00c      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551c:	3328      	adds	r3, #40	; 0x28
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fa65 	bl	80059f0 <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800553e:	663b      	str	r3, [r7, #96]	; 0x60
 8005540:	2300      	movs	r3, #0
 8005542:	667b      	str	r3, [r7, #100]	; 0x64
 8005544:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d038      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555a:	d018      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800555c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005560:	d811      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005566:	d014      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556c:	d80b      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d011      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d106      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005578:	4bc3      	ldr	r3, [pc, #780]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4ac2      	ldr	r2, [pc, #776]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800557e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005584:	e008      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800558c:	e004      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a0:	4bb9      	ldr	r3, [pc, #740]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b0:	4ab5      	ldr	r2, [pc, #724]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	6553      	str	r3, [r2, #84]	; 0x54
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80055cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ce:	2300      	movs	r3, #0
 80055d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055dc:	4baa      	ldr	r3, [pc, #680]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ea:	4aa7      	ldr	r2, [pc, #668]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80055fc:	653b      	str	r3, [r7, #80]	; 0x50
 80055fe:	2300      	movs	r3, #0
 8005600:	657b      	str	r3, [r7, #84]	; 0x54
 8005602:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005606:	460b      	mov	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800560c:	4b9e      	ldr	r3, [pc, #632]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800561c:	4a9a      	ldr	r2, [pc, #616]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561e:	430b      	orrs	r3, r1
 8005620:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005630:	2300      	movs	r3, #0
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005638:	460b      	mov	r3, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800563e:	4b92      	ldr	r3, [pc, #584]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564c:	4a8e      	ldr	r2, [pc, #568]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800564e:	430b      	orrs	r3, r1
 8005650:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
 8005660:	2300      	movs	r3, #0
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
 8005664:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005668:	460b      	mov	r3, r1
 800566a:	4313      	orrs	r3, r2
 800566c:	d00e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800566e:	4b86      	ldr	r3, [pc, #536]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4a85      	ldr	r2, [pc, #532]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005678:	6113      	str	r3, [r2, #16]
 800567a:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800567c:	6919      	ldr	r1, [r3, #16]
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005686:	4a80      	ldr	r2, [pc, #512]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056a8:	4b77      	ldr	r3, [pc, #476]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	2300      	movs	r3, #0
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056d8:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e8:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ea:	430b      	orrs	r3, r1
 80056ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	2100      	movs	r1, #0
 80056f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005700:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005704:	460b      	mov	r3, r1
 8005706:	4313      	orrs	r3, r2
 8005708:	d011      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	3308      	adds	r3, #8
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f8ba 	bl	800588c <RCCEx_PLL2_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800571e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	2100      	movs	r1, #0
 8005738:	6239      	str	r1, [r7, #32]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d011      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574e:	3308      	adds	r3, #8
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f89a 	bl	800588c <RCCEx_PLL2_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800576a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	2100      	movs	r1, #0
 8005778:	61b9      	str	r1, [r7, #24]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d011      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	3308      	adds	r3, #8
 8005790:	2102      	movs	r1, #2
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f87a 	bl	800588c <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	2100      	movs	r1, #0
 80057b8:	6139      	str	r1, [r7, #16]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d011      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ce:	3328      	adds	r3, #40	; 0x28
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f90c 	bl	80059f0 <RCCEx_PLL3_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80057de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	2100      	movs	r1, #0
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d011      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580e:	3328      	adds	r3, #40	; 0x28
 8005810:	2101      	movs	r1, #1
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f8ec 	bl	80059f0 <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800581e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800582a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	2100      	movs	r1, #0
 8005838:	6039      	str	r1, [r7, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	607b      	str	r3, [r7, #4]
 8005840:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d011      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584e:	3328      	adds	r3, #40	; 0x28
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f8cc 	bl	80059f0 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800585e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800586e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
}
 800587c:	4618      	mov	r0, r3
 800587e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005882:	46bd      	mov	sp, r7
 8005884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005888:	58024400 	.word	0x58024400

0800588c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800589a:	4b53      	ldr	r3, [pc, #332]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d101      	bne.n	80058aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e099      	b.n	80059de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058aa:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4e      	ldr	r2, [pc, #312]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b6:	f7fd fb21 	bl	8002efc <HAL_GetTick>
 80058ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058be:	f7fd fb1d 	bl	8002efc <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e086      	b.n	80059de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	493f      	ldr	r1, [pc, #252]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	628b      	str	r3, [r1, #40]	; 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	3b01      	subs	r3, #1
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	b29b      	uxth	r3, r3
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	3b01      	subs	r3, #1
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005920:	4931      	ldr	r1, [pc, #196]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	492d      	ldr	r1, [pc, #180]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f023 0220 	bic.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	4928      	ldr	r1, [pc, #160]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005950:	f023 0310 	bic.w	r3, r3, #16
 8005954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <RCCEx_PLL2_Config+0x160>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	69d2      	ldr	r2, [r2, #28]
 8005962:	00d2      	lsls	r2, r2, #3
 8005964:	4920      	ldr	r1, [pc, #128]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005970:	f043 0310 	orr.w	r3, r3, #16
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005988:	e00f      	b.n	80059aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005990:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800599c:	e005      	b.n	80059aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	4a11      	ldr	r2, [pc, #68]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a0e      	ldr	r2, [pc, #56]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fd faa1 	bl	8002efc <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059be:	f7fd fa9d 	bl	8002efc <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	ffff0007 	.word	0xffff0007

080059f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fe:	4b53      	ldr	r3, [pc, #332]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d101      	bne.n	8005a0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e099      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4e      	ldr	r2, [pc, #312]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fd fa6f 	bl	8002efc <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a22:	f7fd fa6b 	bl	8002efc <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e086      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a34:	4b45      	ldr	r3, [pc, #276]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a40:	4b42      	ldr	r3, [pc, #264]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	051b      	lsls	r3, r3, #20
 8005a4e:	493f      	ldr	r1, [pc, #252]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	628b      	str	r3, [r1, #40]	; 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a84:	4931      	ldr	r1, [pc, #196]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a8a:	4b30      	ldr	r3, [pc, #192]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	492d      	ldr	r1, [pc, #180]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4928      	ldr	r1, [pc, #160]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005aae:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005aba:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abe:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <RCCEx_PLL3_Config+0x160>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4920      	ldr	r1, [pc, #128]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	4a19      	ldr	r2, [pc, #100]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aec:	e00f      	b.n	8005b0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fd f9ef 	bl	8002efc <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b22:	f7fd f9eb 	bl	8002efc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	ffff0007 	.word	0xffff0007

08005b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d071      	beq.n	8005c4a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fa fe88 	bl	8000890 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d050      	beq.n	8005c38 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ca      	movs	r2, #202	; 0xca
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2253      	movs	r2, #83	; 0x53
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9a0 	bl	8005eec <RTC_EnterInitMode>
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d124      	bne.n	8005c00 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6899      	ldr	r1, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RTC_Init+0x100>)
 8005bc2:	400b      	ands	r3, r1
 8005bc4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6899      	ldr	r1, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	0419      	lsls	r1, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9ac 	bl	8005f54 <RTC_ExitInitMode>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d113      	bne.n	8005c2e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0203 	bic.w	r2, r2, #3
 8005c14:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	22ff      	movs	r2, #255	; 0xff
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24
 8005c36:	e001      	b.n	8005c3c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	ff8fffbf 	.word	0xff8fffbf

08005c58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_RTC_SetTime+0x1a>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e089      	b.n	8005d86 <HAL_RTC_SetTime+0x12e>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ca      	movs	r2, #202	; 0xca
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2253      	movs	r2, #83	; 0x53
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f92a 	bl	8005eec <RTC_EnterInitMode>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d161      	bne.n	8005d66 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d126      	bne.n	8005cf6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f985 	bl	8005fd0 <RTC_ByteToBcd2>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f97e 	bl	8005fd0 <RTC_ByteToBcd2>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cd8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	789b      	ldrb	r3, [r3, #2]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f976 	bl	8005fd0 <RTC_ByteToBcd2>
 8005ce4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ce6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	78db      	ldrb	r3, [r3, #3]
 8005cee:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e018      	b.n	8005d28 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d16:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d1c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <HAL_RTC_SetTime+0x138>)
 8005d30:	400b      	ands	r3, r1
 8005d32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6899      	ldr	r1, [r3, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f8f9 	bl	8005f54 <RTC_ExitInitMode>
 8005d62:	4603      	mov	r3, r0
 8005d64:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd90      	pop	{r4, r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	007f7f7f 	.word	0x007f7f7f

08005d94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_RTC_SetDate+0x1a>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e073      	b.n	8005e96 <HAL_RTC_SetDate+0x102>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10e      	bne.n	8005de2 <HAL_RTC_SetDate+0x4e>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	f023 0310 	bic.w	r3, r3, #16
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	330a      	adds	r3, #10
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11c      	bne.n	8005e22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	78db      	ldrb	r3, [r3, #3]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f8ef 	bl	8005fd0 <RTC_ByteToBcd2>
 8005df2:	4603      	mov	r3, r0
 8005df4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f8e8 	bl	8005fd0 <RTC_ByteToBcd2>
 8005e00:	4603      	mov	r3, r0
 8005e02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	789b      	ldrb	r3, [r3, #2]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 f8e0 	bl	8005fd0 <RTC_ByteToBcd2>
 8005e10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e00e      	b.n	8005e40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	22ca      	movs	r2, #202	; 0xca
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2253      	movs	r2, #83	; 0x53
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f84b 	bl	8005eec <RTC_EnterInitMode>
 8005e56:	4603      	mov	r3, r0
 8005e58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e5a:	7cfb      	ldrb	r3, [r7, #19]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_RTC_SetDate+0x10c>)
 8005e68:	400b      	ands	r3, r1
 8005e6a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f871 	bl	8005f54 <RTC_ExitInitMode>
 8005e72:	4603      	mov	r3, r0
 8005e74:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e94:	7cfb      	ldrb	r3, [r7, #19]


}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	00ffff3f 	.word	0x00ffff3f

08005ea4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <HAL_RTC_WaitForSynchro+0x44>)
 8005eb2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005eb4:	f7fd f822 	bl	8002efc <HAL_GetTick>
 8005eb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005eba:	e009      	b.n	8005ed0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebc:	f7fd f81e 	bl	8002efc <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eca:	d901      	bls.n	8005ed0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e007      	b.n	8005ee0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ee      	beq.n	8005ebc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	0003ff5f 	.word	0x0003ff5f

08005eec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d120      	bne.n	8005f48 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f10:	f7fc fff4 	bl	8002efc <HAL_GetTick>
 8005f14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f16:	e00d      	b.n	8005f34 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005f18:	f7fc fff0 	bl	8002efc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f26:	d905      	bls.n	8005f34 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2203      	movs	r2, #3
 8005f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <RTC_EnterInitMode+0x5c>
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d1e7      	bne.n	8005f18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005f60:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a19      	ldr	r2, [pc, #100]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff93 	bl	8005ea4 <HAL_RTC_WaitForSynchro>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01e      	beq.n	8005fc2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2203      	movs	r2, #3
 8005f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e017      	b.n	8005fc2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005f98:	f023 0320 	bic.w	r3, r3, #32
 8005f9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ff80 	bl	8005ea4 <HAL_RTC_WaitForSynchro>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2203      	movs	r2, #3
 8005fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <RTC_ExitInitMode+0x78>)
 8005fbc:	f043 0320 	orr.w	r3, r3, #32
 8005fc0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58004000 	.word	0x58004000

08005fd0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005fe2:	e005      	b.n	8005ff0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	3b0a      	subs	r3, #10
 8005fee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	2b09      	cmp	r3, #9
 8005ff4:	d8f6      	bhi.n	8005fe4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	4313      	orrs	r3, r2
 8006002:	b2db      	uxtb	r3, r3
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e10f      	b.n	8006242 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a87      	ldr	r2, [pc, #540]	; (800624c <HAL_SPI_Init+0x23c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <HAL_SPI_Init+0x42>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a86      	ldr	r2, [pc, #536]	; (8006250 <HAL_SPI_Init+0x240>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00a      	beq.n	8006052 <HAL_SPI_Init+0x42>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a84      	ldr	r2, [pc, #528]	; (8006254 <HAL_SPI_Init+0x244>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d005      	beq.n	8006052 <HAL_SPI_Init+0x42>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b0f      	cmp	r3, #15
 800604c:	d901      	bls.n	8006052 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0f7      	b.n	8006242 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 ff76 	bl	8006f44 <SPI_GetPacketSize>
 8006058:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a7b      	ldr	r2, [pc, #492]	; (800624c <HAL_SPI_Init+0x23c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00c      	beq.n	800607e <HAL_SPI_Init+0x6e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a79      	ldr	r2, [pc, #484]	; (8006250 <HAL_SPI_Init+0x240>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <HAL_SPI_Init+0x6e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a78      	ldr	r2, [pc, #480]	; (8006254 <HAL_SPI_Init+0x244>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d002      	beq.n	800607e <HAL_SPI_Init+0x6e>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b08      	cmp	r3, #8
 800607c:	d811      	bhi.n	80060a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006082:	4a72      	ldr	r2, [pc, #456]	; (800624c <HAL_SPI_Init+0x23c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a70      	ldr	r2, [pc, #448]	; (8006250 <HAL_SPI_Init+0x240>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_SPI_Init+0x8c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a6f      	ldr	r2, [pc, #444]	; (8006254 <HAL_SPI_Init+0x244>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d104      	bne.n	80060a6 <HAL_SPI_Init+0x96>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d901      	bls.n	80060a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e0cd      	b.n	8006242 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fa fcc8 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80060e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ec:	d119      	bne.n	8006122 <HAL_SPI_Init+0x112>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f6:	d103      	bne.n	8006100 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10c      	bne.n	8006122 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800610c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006110:	d107      	bne.n	8006122 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00f      	beq.n	800614e <HAL_SPI_Init+0x13e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b06      	cmp	r3, #6
 8006134:	d90b      	bls.n	800614e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e007      	b.n	800615e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	431a      	orrs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	ea42 0103 	orr.w	r1, r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	ea42 0103 	orr.w	r1, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d113      	bne.n	80061fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40013000 	.word	0x40013000
 8006250:	40003800 	.word	0x40003800
 8006254:	40003c00 	.word	0x40003c00

08006258 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3320      	adds	r3, #32
 800626e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_SPI_Transmit+0x2a>
 800627e:	2302      	movs	r3, #2
 8006280:	e1e1      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628a:	f7fc fe37 	bl	8002efc <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d007      	beq.n	80062ac <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800629c:	2302      	movs	r3, #2
 800629e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062a8:	7efb      	ldrb	r3, [r7, #27]
 80062aa:	e1cc      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_Transmit+0x60>
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062c4:	7efb      	ldrb	r3, [r7, #27]
 80062c6:	e1be      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2203      	movs	r2, #3
 80062cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006318:	d108      	bne.n	800632c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e009      	b.n	8006340 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800633e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4b96      	ldr	r3, [pc, #600]	; (80065a0 <HAL_SPI_Transmit+0x348>)
 8006348:	4013      	ands	r3, r2
 800634a:	88f9      	ldrh	r1, [r7, #6]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	430b      	orrs	r3, r1
 8006352:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800636c:	d107      	bne.n	800637e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d947      	bls.n	8006416 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006386:	e03f      	b.n	8006408 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d114      	bne.n	80063c0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063be:	e023      	b.n	8006408 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c0:	f7fc fd9c 	bl	8002efc <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d803      	bhi.n	80063d8 <HAL_SPI_Transmit+0x180>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d6:	d102      	bne.n	80063de <HAL_SPI_Transmit+0x186>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d114      	bne.n	8006408 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fce2 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e11e      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1b9      	bne.n	8006388 <HAL_SPI_Transmit+0x130>
 8006414:	e0f1      	b.n	80065fa <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b07      	cmp	r3, #7
 800641c:	f240 80e6 	bls.w	80065ec <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006420:	e05d      	b.n	80064de <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d132      	bne.n	8006496 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d918      	bls.n	800646e <HAL_SPI_Transmit+0x216>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b02      	subs	r3, #2
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800646c:	e037      	b.n	80064de <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006472:	881a      	ldrh	r2, [r3, #0]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647c:	1c9a      	adds	r2, r3, #2
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006494:	e023      	b.n	80064de <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006496:	f7fc fd31 	bl	8002efc <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d803      	bhi.n	80064ae <HAL_SPI_Transmit+0x256>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ac:	d102      	bne.n	80064b4 <HAL_SPI_Transmit+0x25c>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d114      	bne.n	80064de <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fc77 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e0b3      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d19b      	bne.n	8006422 <HAL_SPI_Transmit+0x1ca>
 80064ea:	e086      	b.n	80065fa <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d154      	bne.n	80065a4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d918      	bls.n	8006538 <HAL_SPI_Transmit+0x2e0>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d914      	bls.n	8006538 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b04      	subs	r3, #4
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006536:	e059      	b.n	80065ec <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d917      	bls.n	8006574 <HAL_SPI_Transmit+0x31c>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d013      	beq.n	8006574 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b02      	subs	r3, #2
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006572:	e03b      	b.n	80065ec <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3320      	adds	r3, #32
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800659e:	e025      	b.n	80065ec <HAL_SPI_Transmit+0x394>
 80065a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a4:	f7fc fcaa 	bl	8002efc <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d803      	bhi.n	80065bc <HAL_SPI_Transmit+0x364>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_Transmit+0x36a>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d114      	bne.n	80065ec <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fbf0 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e02c      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f af79 	bne.w	80064ec <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	2108      	movs	r1, #8
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fc6f 	bl	8006ee8 <SPI_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fbc1 	bl	8006da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8006644:	7efb      	ldrb	r3, [r7, #27]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop

08006650 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3330      	adds	r3, #48	; 0x30
 800666a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_SPI_Receive+0x2a>
 8006676:	2302      	movs	r3, #2
 8006678:	e173      	b.n	8006962 <HAL_SPI_Receive+0x312>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006682:	f7fc fc3b 	bl	8002efc <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d007      	beq.n	80066a4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006694:	2302      	movs	r3, #2
 8006696:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066a0:	7ffb      	ldrb	r3, [r7, #31]
 80066a2:	e15e      	b.n	8006962 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Receive+0x60>
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d107      	bne.n	80066c0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066bc:	7ffb      	ldrb	r3, [r7, #31]
 80066be:	e150      	b.n	8006962 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2204      	movs	r2, #4
 80066c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	88fa      	ldrh	r2, [r7, #6]
 80066e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006710:	d108      	bne.n	8006724 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e009      	b.n	8006738 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006736:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4b8b      	ldr	r3, [pc, #556]	; (800696c <HAL_SPI_Receive+0x31c>)
 8006740:	4013      	ands	r3, r2
 8006742:	88f9      	ldrh	r1, [r7, #6]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	430b      	orrs	r3, r1
 800674a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d107      	bne.n	8006776 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	d948      	bls.n	8006810 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800677e:	e040      	b.n	8006802 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	f248 0308 	movw	r3, #32776	; 0x8008
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006798:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800679a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067b8:	e023      	b.n	8006802 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ba:	f7fc fb9f 	bl	8002efc <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d803      	bhi.n	80067d2 <HAL_SPI_Receive+0x182>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d102      	bne.n	80067d8 <HAL_SPI_Receive+0x188>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d114      	bne.n	8006802 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fae5 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e0af      	b.n	8006962 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1b8      	bne.n	8006780 <HAL_SPI_Receive+0x130>
 800680e:	e095      	b.n	800693c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b07      	cmp	r3, #7
 8006816:	f240 808b 	bls.w	8006930 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800681a:	e03f      	b.n	800689c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d114      	bne.n	8006854 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	8812      	ldrh	r2, [r2, #0]
 8006832:	b292      	uxth	r2, r2
 8006834:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006852:	e023      	b.n	800689c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006854:	f7fc fb52 	bl	8002efc <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d803      	bhi.n	800686c <HAL_SPI_Receive+0x21c>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686a:	d102      	bne.n	8006872 <HAL_SPI_Receive+0x222>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d114      	bne.n	800689c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fa98 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e062      	b.n	8006962 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1b9      	bne.n	800681c <HAL_SPI_Receive+0x1cc>
 80068a8:	e048      	b.n	800693c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d117      	bne.n	80068e8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80068e6:	e023      	b.n	8006930 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e8:	f7fc fb08 	bl	8002efc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d803      	bhi.n	8006900 <HAL_SPI_Receive+0x2b0>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068fe:	d102      	bne.n	8006906 <HAL_SPI_Receive+0x2b6>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d114      	bne.n	8006930 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fa4e 	bl	8006da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800691a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e018      	b.n	8006962 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1b6      	bne.n	80068aa <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fa33 	bl	8006da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8006960:	7ffb      	ldrb	r3, [r7, #31]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	ffff0000 	.word	0xffff0000

08006970 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3320      	adds	r3, #32
 800698a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3330      	adds	r3, #48	; 0x30
 8006992:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x32>
 800699e:	2302      	movs	r3, #2
 80069a0:	e1fd      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069aa:	f7fc faa7 	bl	8002efc <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80069b0:	887b      	ldrh	r3, [r7, #2]
 80069b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80069b4:	887b      	ldrh	r3, [r7, #2]
 80069b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d009      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80069d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069d6:	e1e2      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x7a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x7a>
 80069e4:	887b      	ldrh	r3, [r7, #2]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80069f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069fc:	e1cf      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2205      	movs	r2, #5
 8006a02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	887a      	ldrh	r2, [r7, #2]
 8006a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	887a      	ldrh	r2, [r7, #2]
 8006a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	887a      	ldrh	r2, [r7, #2]
 8006a2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8006a54:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <HAL_SPI_TransmitReceive+0x2f8>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	8879      	ldrh	r1, [r7, #2]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	430b      	orrs	r3, r1
 8006a68:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a82:	d107      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b0f      	cmp	r3, #15
 8006a9a:	d970      	bls.n	8006b7e <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a9c:	e068      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d11a      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x172>
 8006aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d017      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	f248 0308 	movw	r3, #32776	; 0x8008
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01a      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x1b8>
 8006af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d017      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b26:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b28:	f7fc f9e8 	bl	8002efc <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d803      	bhi.n	8006b40 <HAL_SPI_TransmitReceive+0x1d0>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x1d6>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d114      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f92e 	bl	8006da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e116      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d193      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x12e>
 8006b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d190      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x12e>
 8006b7c:	e0e8      	b.n	8006d50 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b07      	cmp	r3, #7
 8006b84:	f240 80de 	bls.w	8006d44 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b88:	e066      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d119      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0x25c>
 8006b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	881a      	ldrh	r2, [r3, #0]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bca:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d11a      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x2a0>
 8006bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	8812      	ldrh	r2, [r2, #0]
 8006be8:	b292      	uxth	r2, r2
 8006bea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c10:	f7fc f974 	bl	8002efc <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d803      	bhi.n	8006c28 <HAL_SPI_TransmitReceive+0x2b8>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c26:	d102      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x2be>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d114      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f8ba 	bl	8006da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0a2      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d195      	bne.n	8006b8a <HAL_SPI_TransmitReceive+0x21a>
 8006c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d192      	bne.n	8006b8a <HAL_SPI_TransmitReceive+0x21a>
 8006c64:	e074      	b.n	8006d50 <HAL_SPI_TransmitReceive+0x3e0>
 8006c66:	bf00      	nop
 8006c68:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d11b      	bne.n	8006cb2 <HAL_SPI_TransmitReceive+0x342>
 8006c7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d018      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3320      	adds	r3, #32
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cb0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d11d      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x38c>
 8006cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01a      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cfc:	f7fc f8fe 	bl	8002efc <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d803      	bhi.n	8006d14 <HAL_SPI_TransmitReceive+0x3a4>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d12:	d102      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x3aa>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d114      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f844 	bl	8006da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e02c      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d190      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x2fc>
 8006d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d18d      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	2108      	movs	r1, #8
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f8c4 	bl	8006ee8 <SPI_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f816 	bl	8006da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e001      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8006d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop

08006da8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0210 	orr.w	r2, r2, #16
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6919      	ldr	r1, [r3, #16]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <SPI_CloseTransfer+0x13c>)
 8006df4:	400b      	ands	r3, r1
 8006df6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d014      	beq.n	8006e3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0220 	orr.w	r2, r2, #32
 8006e3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d014      	beq.n	8006e74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00f      	beq.n	8006e74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5a:	f043 0204 	orr.w	r2, r3, #4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00f      	beq.n	8006ec8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eae:	f043 0208 	orr.w	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	fffffc90 	.word	0xfffffc90

08006ee8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ef8:	e010      	b.n	8006f1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efa:	f7fb ffff 	bl	8002efc <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d803      	bhi.n	8006f12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f10:	d102      	bne.n	8006f18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e00f      	b.n	8006f3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4013      	ands	r3, r2
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d0df      	beq.n	8006efa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3307      	adds	r3, #7
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e049      	b.n	8007020 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7f9 ff9f 	bl	8000ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 f949 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007042:	2302      	movs	r3, #2
 8007044:	e0ff      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b14      	cmp	r3, #20
 8007052:	f200 80f0 	bhi.w	8007236 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	080070b1 	.word	0x080070b1
 8007060:	08007237 	.word	0x08007237
 8007064:	08007237 	.word	0x08007237
 8007068:	08007237 	.word	0x08007237
 800706c:	080070f1 	.word	0x080070f1
 8007070:	08007237 	.word	0x08007237
 8007074:	08007237 	.word	0x08007237
 8007078:	08007237 	.word	0x08007237
 800707c:	08007133 	.word	0x08007133
 8007080:	08007237 	.word	0x08007237
 8007084:	08007237 	.word	0x08007237
 8007088:	08007237 	.word	0x08007237
 800708c:	08007173 	.word	0x08007173
 8007090:	08007237 	.word	0x08007237
 8007094:	08007237 	.word	0x08007237
 8007098:	08007237 	.word	0x08007237
 800709c:	080071b5 	.word	0x080071b5
 80070a0:	08007237 	.word	0x08007237
 80070a4:	08007237 	.word	0x08007237
 80070a8:	08007237 	.word	0x08007237
 80070ac:	080071f5 	.word	0x080071f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 f964 	bl	8007384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0208 	orr.w	r2, r2, #8
 80070ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0204 	bic.w	r2, r2, #4
 80070da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6999      	ldr	r1, [r3, #24]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	619a      	str	r2, [r3, #24]
      break;
 80070ee:	e0a5      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 f9d4 	bl	80074a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6999      	ldr	r1, [r3, #24]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	021a      	lsls	r2, r3, #8
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	619a      	str	r2, [r3, #24]
      break;
 8007130:	e084      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fa3d 	bl	80075b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0208 	orr.w	r2, r2, #8
 800714c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0204 	bic.w	r2, r2, #4
 800715c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69d9      	ldr	r1, [r3, #28]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	61da      	str	r2, [r3, #28]
      break;
 8007170:	e064      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 faa5 	bl	80076c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800718c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69d9      	ldr	r1, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	021a      	lsls	r2, r3, #8
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	61da      	str	r2, [r3, #28]
      break;
 80071b2:	e043      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 faee 	bl	800779c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0208 	orr.w	r2, r2, #8
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0204 	bic.w	r2, r2, #4
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071f2:	e023      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fb32 	bl	8007864 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800720e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	021a      	lsls	r2, r3, #8
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007234:	e002      	b.n	800723c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
      break;
 800723a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a40      	ldr	r2, [pc, #256]	; (8007364 <TIM_Base_SetConfig+0x114>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3d      	ldr	r2, [pc, #244]	; (8007368 <TIM_Base_SetConfig+0x118>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3c      	ldr	r2, [pc, #240]	; (800736c <TIM_Base_SetConfig+0x11c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3b      	ldr	r2, [pc, #236]	; (8007370 <TIM_Base_SetConfig+0x120>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3a      	ldr	r2, [pc, #232]	; (8007374 <TIM_Base_SetConfig+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2f      	ldr	r2, [pc, #188]	; (8007364 <TIM_Base_SetConfig+0x114>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d01b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <TIM_Base_SetConfig+0x118>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2b      	ldr	r2, [pc, #172]	; (800736c <TIM_Base_SetConfig+0x11c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2a      	ldr	r2, [pc, #168]	; (8007370 <TIM_Base_SetConfig+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a29      	ldr	r2, [pc, #164]	; (8007374 <TIM_Base_SetConfig+0x124>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a28      	ldr	r2, [pc, #160]	; (8007378 <TIM_Base_SetConfig+0x128>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a27      	ldr	r2, [pc, #156]	; (800737c <TIM_Base_SetConfig+0x12c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a26      	ldr	r2, [pc, #152]	; (8007380 <TIM_Base_SetConfig+0x130>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <TIM_Base_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <TIM_Base_SetConfig+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a11      	ldr	r2, [pc, #68]	; (8007378 <TIM_Base_SetConfig+0x128>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a10      	ldr	r2, [pc, #64]	; (800737c <TIM_Base_SetConfig+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <TIM_Base_SetConfig+0x130>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	615a      	str	r2, [r3, #20]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800

08007384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4b37      	ldr	r3, [pc, #220]	; (800748c <TIM_OC1_SetConfig+0x108>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f023 0302 	bic.w	r3, r3, #2
 80073cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2d      	ldr	r2, [pc, #180]	; (8007490 <TIM_OC1_SetConfig+0x10c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00f      	beq.n	8007400 <TIM_OC1_SetConfig+0x7c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <TIM_OC1_SetConfig+0x110>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00b      	beq.n	8007400 <TIM_OC1_SetConfig+0x7c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a2b      	ldr	r2, [pc, #172]	; (8007498 <TIM_OC1_SetConfig+0x114>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <TIM_OC1_SetConfig+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a2a      	ldr	r2, [pc, #168]	; (800749c <TIM_OC1_SetConfig+0x118>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC1_SetConfig+0x7c>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <TIM_OC1_SetConfig+0x11c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10c      	bne.n	800741a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f023 0308 	bic.w	r3, r3, #8
 8007406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f023 0304 	bic.w	r3, r3, #4
 8007418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <TIM_OC1_SetConfig+0x10c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_OC1_SetConfig+0xbe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <TIM_OC1_SetConfig+0x110>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_OC1_SetConfig+0xbe>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <TIM_OC1_SetConfig+0x114>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_OC1_SetConfig+0xbe>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a19      	ldr	r2, [pc, #100]	; (800749c <TIM_OC1_SetConfig+0x118>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_OC1_SetConfig+0xbe>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <TIM_OC1_SetConfig+0x11c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d111      	bne.n	8007466 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	621a      	str	r2, [r3, #32]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	fffeff8f 	.word	0xfffeff8f
 8007490:	40010000 	.word	0x40010000
 8007494:	40010400 	.word	0x40010400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f023 0210 	bic.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4b34      	ldr	r3, [pc, #208]	; (80075a0 <TIM_OC2_SetConfig+0xfc>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0320 	bic.w	r3, r3, #32
 80074ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a29      	ldr	r2, [pc, #164]	; (80075a4 <TIM_OC2_SetConfig+0x100>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC2_SetConfig+0x68>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a28      	ldr	r2, [pc, #160]	; (80075a8 <TIM_OC2_SetConfig+0x104>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d10d      	bne.n	8007528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <TIM_OC2_SetConfig+0x100>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_OC2_SetConfig+0xac>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <TIM_OC2_SetConfig+0x104>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_OC2_SetConfig+0xac>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <TIM_OC2_SetConfig+0x108>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_OC2_SetConfig+0xac>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <TIM_OC2_SetConfig+0x10c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_OC2_SetConfig+0xac>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <TIM_OC2_SetConfig+0x110>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d113      	bne.n	8007578 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4313      	orrs	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	feff8fff 	.word	0xfeff8fff
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4b33      	ldr	r3, [pc, #204]	; (80076b0 <TIM_OC3_SetConfig+0xf8>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a28      	ldr	r2, [pc, #160]	; (80076b4 <TIM_OC3_SetConfig+0xfc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d003      	beq.n	800761e <TIM_OC3_SetConfig+0x66>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <TIM_OC3_SetConfig+0x100>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d10d      	bne.n	800763a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <TIM_OC3_SetConfig+0xfc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00f      	beq.n	8007662 <TIM_OC3_SetConfig+0xaa>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <TIM_OC3_SetConfig+0x100>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_OC3_SetConfig+0xaa>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <TIM_OC3_SetConfig+0x104>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_OC3_SetConfig+0xaa>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <TIM_OC3_SetConfig+0x108>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC3_SetConfig+0xaa>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <TIM_OC3_SetConfig+0x10c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d113      	bne.n	800768a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	fffeff8f 	.word	0xfffeff8f
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4b24      	ldr	r3, [pc, #144]	; (8007784 <TIM_OC4_SetConfig+0xbc>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a19      	ldr	r2, [pc, #100]	; (8007788 <TIM_OC4_SetConfig+0xc0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00f      	beq.n	8007748 <TIM_OC4_SetConfig+0x80>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <TIM_OC4_SetConfig+0xc4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_OC4_SetConfig+0x80>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <TIM_OC4_SetConfig+0xc8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_OC4_SetConfig+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC4_SetConfig+0xcc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC4_SetConfig+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <TIM_OC4_SetConfig+0xd0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d109      	bne.n	800775c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800774e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	019b      	lsls	r3, r3, #6
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	feff8fff 	.word	0xfeff8fff
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800

0800779c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4b21      	ldr	r3, [pc, #132]	; (800784c <TIM_OC5_SetConfig+0xb0>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	041b      	lsls	r3, r3, #16
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a18      	ldr	r2, [pc, #96]	; (8007850 <TIM_OC5_SetConfig+0xb4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00f      	beq.n	8007812 <TIM_OC5_SetConfig+0x76>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <TIM_OC5_SetConfig+0xb8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_OC5_SetConfig+0x76>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a16      	ldr	r2, [pc, #88]	; (8007858 <TIM_OC5_SetConfig+0xbc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_OC5_SetConfig+0x76>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a15      	ldr	r2, [pc, #84]	; (800785c <TIM_OC5_SetConfig+0xc0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_OC5_SetConfig+0x76>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <TIM_OC5_SetConfig+0xc4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d109      	bne.n	8007826 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	fffeff8f 	.word	0xfffeff8f
 8007850:	40010000 	.word	0x40010000
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800

08007864 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4b22      	ldr	r3, [pc, #136]	; (8007918 <TIM_OC6_SetConfig+0xb4>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	051b      	lsls	r3, r3, #20
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a19      	ldr	r2, [pc, #100]	; (800791c <TIM_OC6_SetConfig+0xb8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <TIM_OC6_SetConfig+0x78>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <TIM_OC6_SetConfig+0xbc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_OC6_SetConfig+0x78>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a17      	ldr	r2, [pc, #92]	; (8007924 <TIM_OC6_SetConfig+0xc0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_OC6_SetConfig+0x78>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a16      	ldr	r2, [pc, #88]	; (8007928 <TIM_OC6_SetConfig+0xc4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC6_SetConfig+0x78>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC6_SetConfig+0xc8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d109      	bne.n	80078f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	feff8fff 	.word	0xfeff8fff
 800791c:	40010000 	.word	0x40010000
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800

08007930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007944:	2302      	movs	r3, #2
 8007946:	e06d      	b.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a30      	ldr	r2, [pc, #192]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a2f      	ldr	r2, [pc, #188]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d108      	bne.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007994:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a20      	ldr	r2, [pc, #128]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d022      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d01d      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1d      	ldr	r2, [pc, #116]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d018      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1c      	ldr	r2, [pc, #112]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d013      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00e      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d009      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d10c      	bne.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40001800 	.word	0x40001800
 8007a48:	40014000 	.word	0x40014000

08007a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e065      	b.n	8007b34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d115      	bne.n	8007b22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	051b      	lsls	r3, r3, #20
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	240000a0 	.word	0x240000a0

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4d0d      	ldr	r5, [pc, #52]	; (8007b8c <__libc_init_array+0x38>)
 8007b58:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5a:	1b64      	subs	r4, r4, r5
 8007b5c:	10a4      	asrs	r4, r4, #2
 8007b5e:	2600      	movs	r6, #0
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	4d0b      	ldr	r5, [pc, #44]	; (8007b94 <__libc_init_array+0x40>)
 8007b66:	4c0c      	ldr	r4, [pc, #48]	; (8007b98 <__libc_init_array+0x44>)
 8007b68:	f000 fc8e 	bl	8008488 <_init>
 8007b6c:	1b64      	subs	r4, r4, r5
 8007b6e:	10a4      	asrs	r4, r4, #2
 8007b70:	2600      	movs	r6, #0
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7c:	4798      	blx	r3
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b86:	4798      	blx	r3
 8007b88:	3601      	adds	r6, #1
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	08008f60 	.word	0x08008f60
 8007b90:	08008f60 	.word	0x08008f60
 8007b94:	08008f60 	.word	0x08008f60
 8007b98:	08008f64 	.word	0x08008f64

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <siprintf>:
 8007bac:	b40e      	push	{r1, r2, r3}
 8007bae:	b500      	push	{lr}
 8007bb0:	b09c      	sub	sp, #112	; 0x70
 8007bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bbc:	4809      	ldr	r0, [pc, #36]	; (8007be4 <siprintf+0x38>)
 8007bbe:	9107      	str	r1, [sp, #28]
 8007bc0:	9104      	str	r1, [sp, #16]
 8007bc2:	4909      	ldr	r1, [pc, #36]	; (8007be8 <siprintf+0x3c>)
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	a902      	add	r1, sp, #8
 8007bd0:	f000 f868 	bl	8007ca4 <_svfiprintf_r>
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	b01c      	add	sp, #112	; 0x70
 8007bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be0:	b003      	add	sp, #12
 8007be2:	4770      	bx	lr
 8007be4:	240000a0 	.word	0x240000a0
 8007be8:	ffff0208 	.word	0xffff0208

08007bec <__ssputs_r>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	688e      	ldr	r6, [r1, #8]
 8007bf2:	429e      	cmp	r6, r3
 8007bf4:	4682      	mov	sl, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	4690      	mov	r8, r2
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	d838      	bhi.n	8007c70 <__ssputs_r+0x84>
 8007bfe:	898a      	ldrh	r2, [r1, #12]
 8007c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c04:	d032      	beq.n	8007c6c <__ssputs_r+0x80>
 8007c06:	6825      	ldr	r5, [r4, #0]
 8007c08:	6909      	ldr	r1, [r1, #16]
 8007c0a:	eba5 0901 	sub.w	r9, r5, r1
 8007c0e:	6965      	ldr	r5, [r4, #20]
 8007c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c18:	3301      	adds	r3, #1
 8007c1a:	444b      	add	r3, r9
 8007c1c:	106d      	asrs	r5, r5, #1
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	bf38      	it	cc
 8007c22:	461d      	movcc	r5, r3
 8007c24:	0553      	lsls	r3, r2, #21
 8007c26:	d531      	bpl.n	8007c8c <__ssputs_r+0xa0>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f000 fb63 	bl	80082f4 <_malloc_r>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	b950      	cbnz	r0, 8007c48 <__ssputs_r+0x5c>
 8007c32:	230c      	movs	r3, #12
 8007c34:	f8ca 3000 	str.w	r3, [sl]
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c48:	6921      	ldr	r1, [r4, #16]
 8007c4a:	464a      	mov	r2, r9
 8007c4c:	f000 fabe 	bl	80081cc <memcpy>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	6126      	str	r6, [r4, #16]
 8007c5e:	6165      	str	r5, [r4, #20]
 8007c60:	444e      	add	r6, r9
 8007c62:	eba5 0509 	sub.w	r5, r5, r9
 8007c66:	6026      	str	r6, [r4, #0]
 8007c68:	60a5      	str	r5, [r4, #8]
 8007c6a:	463e      	mov	r6, r7
 8007c6c:	42be      	cmp	r6, r7
 8007c6e:	d900      	bls.n	8007c72 <__ssputs_r+0x86>
 8007c70:	463e      	mov	r6, r7
 8007c72:	6820      	ldr	r0, [r4, #0]
 8007c74:	4632      	mov	r2, r6
 8007c76:	4641      	mov	r1, r8
 8007c78:	f000 fab6 	bl	80081e8 <memmove>
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	1b9b      	subs	r3, r3, r6
 8007c80:	60a3      	str	r3, [r4, #8]
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	4433      	add	r3, r6
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e7db      	b.n	8007c44 <__ssputs_r+0x58>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	f000 fba5 	bl	80083dc <_realloc_r>
 8007c92:	4606      	mov	r6, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1e1      	bne.n	8007c5c <__ssputs_r+0x70>
 8007c98:	6921      	ldr	r1, [r4, #16]
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	f000 fabe 	bl	800821c <_free_r>
 8007ca0:	e7c7      	b.n	8007c32 <__ssputs_r+0x46>
	...

08007ca4 <_svfiprintf_r>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	4698      	mov	r8, r3
 8007caa:	898b      	ldrh	r3, [r1, #12]
 8007cac:	061b      	lsls	r3, r3, #24
 8007cae:	b09d      	sub	sp, #116	; 0x74
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	d50e      	bpl.n	8007cd6 <_svfiprintf_r+0x32>
 8007cb8:	690b      	ldr	r3, [r1, #16]
 8007cba:	b963      	cbnz	r3, 8007cd6 <_svfiprintf_r+0x32>
 8007cbc:	2140      	movs	r1, #64	; 0x40
 8007cbe:	f000 fb19 	bl	80082f4 <_malloc_r>
 8007cc2:	6028      	str	r0, [r5, #0]
 8007cc4:	6128      	str	r0, [r5, #16]
 8007cc6:	b920      	cbnz	r0, 8007cd2 <_svfiprintf_r+0x2e>
 8007cc8:	230c      	movs	r3, #12
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd0:	e0d1      	b.n	8007e76 <_svfiprintf_r+0x1d2>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	616b      	str	r3, [r5, #20]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	2320      	movs	r3, #32
 8007cdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce4:	2330      	movs	r3, #48	; 0x30
 8007ce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e90 <_svfiprintf_r+0x1ec>
 8007cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cee:	f04f 0901 	mov.w	r9, #1
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cfa:	b10a      	cbz	r2, 8007d00 <_svfiprintf_r+0x5c>
 8007cfc:	2a25      	cmp	r2, #37	; 0x25
 8007cfe:	d1f9      	bne.n	8007cf4 <_svfiprintf_r+0x50>
 8007d00:	ebba 0b04 	subs.w	fp, sl, r4
 8007d04:	d00b      	beq.n	8007d1e <_svfiprintf_r+0x7a>
 8007d06:	465b      	mov	r3, fp
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff6d 	bl	8007bec <__ssputs_r>
 8007d12:	3001      	adds	r0, #1
 8007d14:	f000 80aa 	beq.w	8007e6c <_svfiprintf_r+0x1c8>
 8007d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d1a:	445a      	add	r2, fp
 8007d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a2 	beq.w	8007e6c <_svfiprintf_r+0x1c8>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d32:	f10a 0a01 	add.w	sl, sl, #1
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	9307      	str	r3, [sp, #28]
 8007d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d40:	4654      	mov	r4, sl
 8007d42:	2205      	movs	r2, #5
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	4851      	ldr	r0, [pc, #324]	; (8007e90 <_svfiprintf_r+0x1ec>)
 8007d4a:	f7f8 fac9 	bl	80002e0 <memchr>
 8007d4e:	9a04      	ldr	r2, [sp, #16]
 8007d50:	b9d8      	cbnz	r0, 8007d8a <_svfiprintf_r+0xe6>
 8007d52:	06d0      	lsls	r0, r2, #27
 8007d54:	bf44      	itt	mi
 8007d56:	2320      	movmi	r3, #32
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5c:	0711      	lsls	r1, r2, #28
 8007d5e:	bf44      	itt	mi
 8007d60:	232b      	movmi	r3, #43	; 0x2b
 8007d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6c:	d015      	beq.n	8007d9a <_svfiprintf_r+0xf6>
 8007d6e:	9a07      	ldr	r2, [sp, #28]
 8007d70:	4654      	mov	r4, sl
 8007d72:	2000      	movs	r0, #0
 8007d74:	f04f 0c0a 	mov.w	ip, #10
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7e:	3b30      	subs	r3, #48	; 0x30
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d94e      	bls.n	8007e22 <_svfiprintf_r+0x17e>
 8007d84:	b1b0      	cbz	r0, 8007db4 <_svfiprintf_r+0x110>
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	e014      	b.n	8007db4 <_svfiprintf_r+0x110>
 8007d8a:	eba0 0308 	sub.w	r3, r0, r8
 8007d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	46a2      	mov	sl, r4
 8007d98:	e7d2      	b.n	8007d40 <_svfiprintf_r+0x9c>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	9103      	str	r1, [sp, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfbb      	ittet	lt
 8007da6:	425b      	neglt	r3, r3
 8007da8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dac:	9307      	strge	r3, [sp, #28]
 8007dae:	9307      	strlt	r3, [sp, #28]
 8007db0:	bfb8      	it	lt
 8007db2:	9204      	strlt	r2, [sp, #16]
 8007db4:	7823      	ldrb	r3, [r4, #0]
 8007db6:	2b2e      	cmp	r3, #46	; 0x2e
 8007db8:	d10c      	bne.n	8007dd4 <_svfiprintf_r+0x130>
 8007dba:	7863      	ldrb	r3, [r4, #1]
 8007dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbe:	d135      	bne.n	8007e2c <_svfiprintf_r+0x188>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	1d1a      	adds	r2, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	9203      	str	r2, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfb8      	it	lt
 8007dcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dd0:	3402      	adds	r4, #2
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ea0 <_svfiprintf_r+0x1fc>
 8007dd8:	7821      	ldrb	r1, [r4, #0]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	4650      	mov	r0, sl
 8007dde:	f7f8 fa7f 	bl	80002e0 <memchr>
 8007de2:	b140      	cbz	r0, 8007df6 <_svfiprintf_r+0x152>
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	eba0 000a 	sub.w	r0, r0, sl
 8007dea:	fa03 f000 	lsl.w	r0, r3, r0
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	4303      	orrs	r3, r0
 8007df2:	3401      	adds	r4, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfa:	4826      	ldr	r0, [pc, #152]	; (8007e94 <_svfiprintf_r+0x1f0>)
 8007dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e00:	2206      	movs	r2, #6
 8007e02:	f7f8 fa6d 	bl	80002e0 <memchr>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d038      	beq.n	8007e7c <_svfiprintf_r+0x1d8>
 8007e0a:	4b23      	ldr	r3, [pc, #140]	; (8007e98 <_svfiprintf_r+0x1f4>)
 8007e0c:	bb1b      	cbnz	r3, 8007e56 <_svfiprintf_r+0x1b2>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	3308      	adds	r3, #8
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	4433      	add	r3, r6
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	e767      	b.n	8007cf2 <_svfiprintf_r+0x4e>
 8007e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e26:	460c      	mov	r4, r1
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e7a5      	b.n	8007d78 <_svfiprintf_r+0xd4>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	3401      	adds	r4, #1
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	4619      	mov	r1, r3
 8007e34:	f04f 0c0a 	mov.w	ip, #10
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3e:	3a30      	subs	r2, #48	; 0x30
 8007e40:	2a09      	cmp	r2, #9
 8007e42:	d903      	bls.n	8007e4c <_svfiprintf_r+0x1a8>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c5      	beq.n	8007dd4 <_svfiprintf_r+0x130>
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	e7c3      	b.n	8007dd4 <_svfiprintf_r+0x130>
 8007e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e50:	4604      	mov	r4, r0
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7f0      	b.n	8007e38 <_svfiprintf_r+0x194>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <_svfiprintf_r+0x1f8>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	4638      	mov	r0, r7
 8007e62:	f3af 8000 	nop.w
 8007e66:	1c42      	adds	r2, r0, #1
 8007e68:	4606      	mov	r6, r0
 8007e6a:	d1d6      	bne.n	8007e1a <_svfiprintf_r+0x176>
 8007e6c:	89ab      	ldrh	r3, [r5, #12]
 8007e6e:	065b      	lsls	r3, r3, #25
 8007e70:	f53f af2c 	bmi.w	8007ccc <_svfiprintf_r+0x28>
 8007e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e76:	b01d      	add	sp, #116	; 0x74
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	ab03      	add	r3, sp, #12
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	462a      	mov	r2, r5
 8007e82:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <_svfiprintf_r+0x1f8>)
 8007e84:	a904      	add	r1, sp, #16
 8007e86:	4638      	mov	r0, r7
 8007e88:	f000 f87a 	bl	8007f80 <_printf_i>
 8007e8c:	e7eb      	b.n	8007e66 <_svfiprintf_r+0x1c2>
 8007e8e:	bf00      	nop
 8007e90:	08008f2c 	.word	0x08008f2c
 8007e94:	08008f36 	.word	0x08008f36
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	08007bed 	.word	0x08007bed
 8007ea0:	08008f32 	.word	0x08008f32

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4699      	mov	r9, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bfb8      	it	lt
 8007eb8:	4613      	movlt	r3, r2
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc26      	bgt.n	8007f3a <_printf_common+0x96>
 8007eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ef0:	1e13      	subs	r3, r2, #0
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42b      	bmi.n	8007f54 <_printf_common+0xb0>
 8007efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f00:	4649      	mov	r1, r9
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d01e      	beq.n	8007f48 <_printf_common+0xa4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	68e5      	ldr	r5, [r4, #12]
 8007f0e:	6832      	ldr	r2, [r6, #0]
 8007f10:	f003 0306 	and.w	r3, r3, #6
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	bf08      	it	eq
 8007f18:	1aad      	subeq	r5, r5, r2
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	6922      	ldr	r2, [r4, #16]
 8007f1e:	bf0c      	ite	eq
 8007f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f24:	2500      	movne	r5, #0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bfc4      	itt	gt
 8007f2a:	1a9b      	subgt	r3, r3, r2
 8007f2c:	18ed      	addgt	r5, r5, r3
 8007f2e:	2600      	movs	r6, #0
 8007f30:	341a      	adds	r4, #26
 8007f32:	42b5      	cmp	r5, r6
 8007f34:	d11a      	bne.n	8007f6c <_printf_common+0xc8>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e008      	b.n	8007f4c <_printf_common+0xa8>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4638      	mov	r0, r7
 8007f42:	47c0      	blx	r8
 8007f44:	3001      	adds	r0, #1
 8007f46:	d103      	bne.n	8007f50 <_printf_common+0xac>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7c6      	b.n	8007ee2 <_printf_common+0x3e>
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	2030      	movs	r0, #48	; 0x30
 8007f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5e:	4422      	add	r2, r4
 8007f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f68:	3302      	adds	r3, #2
 8007f6a:	e7c7      	b.n	8007efc <_printf_common+0x58>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4649      	mov	r1, r9
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0e6      	beq.n	8007f48 <_printf_common+0xa4>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7d9      	b.n	8007f32 <_printf_common+0x8e>
	...

08007f80 <_printf_i>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	7e0f      	ldrb	r7, [r1, #24]
 8007f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f88:	2f78      	cmp	r7, #120	; 0x78
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f96:	d807      	bhi.n	8007fa8 <_printf_i+0x28>
 8007f98:	2f62      	cmp	r7, #98	; 0x62
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x32>
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	f000 80d8 	beq.w	8008152 <_printf_i+0x1d2>
 8007fa2:	2f58      	cmp	r7, #88	; 0x58
 8007fa4:	f000 80a3 	beq.w	80080ee <_printf_i+0x16e>
 8007fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fb0:	e03a      	b.n	8008028 <_printf_i+0xa8>
 8007fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb6:	2b15      	cmp	r3, #21
 8007fb8:	d8f6      	bhi.n	8007fa8 <_printf_i+0x28>
 8007fba:	a101      	add	r1, pc, #4	; (adr r1, 8007fc0 <_printf_i+0x40>)
 8007fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	08007fa9 	.word	0x08007fa9
 8007fcc:	08007fa9 	.word	0x08007fa9
 8007fd0:	08007fa9 	.word	0x08007fa9
 8007fd4:	08007fa9 	.word	0x08007fa9
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007fa9 	.word	0x08007fa9
 8007fe0:	08007fa9 	.word	0x08007fa9
 8007fe4:	08007fa9 	.word	0x08007fa9
 8007fe8:	08007fa9 	.word	0x08007fa9
 8007fec:	08008139 	.word	0x08008139
 8007ff0:	0800805d 	.word	0x0800805d
 8007ff4:	0800811b 	.word	0x0800811b
 8007ff8:	08007fa9 	.word	0x08007fa9
 8007ffc:	08007fa9 	.word	0x08007fa9
 8008000:	0800815b 	.word	0x0800815b
 8008004:	08007fa9 	.word	0x08007fa9
 8008008:	0800805d 	.word	0x0800805d
 800800c:	08007fa9 	.word	0x08007fa9
 8008010:	08007fa9 	.word	0x08007fa9
 8008014:	08008123 	.word	0x08008123
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	602a      	str	r2, [r5, #0]
 8008020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008028:	2301      	movs	r3, #1
 800802a:	e0a3      	b.n	8008174 <_printf_i+0x1f4>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	0606      	lsls	r6, r0, #24
 8008032:	f101 0304 	add.w	r3, r1, #4
 8008036:	d50a      	bpl.n	800804e <_printf_i+0xce>
 8008038:	680e      	ldr	r6, [r1, #0]
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	2e00      	cmp	r6, #0
 800803e:	da03      	bge.n	8008048 <_printf_i+0xc8>
 8008040:	232d      	movs	r3, #45	; 0x2d
 8008042:	4276      	negs	r6, r6
 8008044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008048:	485e      	ldr	r0, [pc, #376]	; (80081c4 <_printf_i+0x244>)
 800804a:	230a      	movs	r3, #10
 800804c:	e019      	b.n	8008082 <_printf_i+0x102>
 800804e:	680e      	ldr	r6, [r1, #0]
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008056:	bf18      	it	ne
 8008058:	b236      	sxthne	r6, r6
 800805a:	e7ef      	b.n	800803c <_printf_i+0xbc>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	6029      	str	r1, [r5, #0]
 8008064:	0601      	lsls	r1, r0, #24
 8008066:	d501      	bpl.n	800806c <_printf_i+0xec>
 8008068:	681e      	ldr	r6, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0xf2>
 800806c:	0646      	lsls	r6, r0, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0xe8>
 8008070:	881e      	ldrh	r6, [r3, #0]
 8008072:	4854      	ldr	r0, [pc, #336]	; (80081c4 <_printf_i+0x244>)
 8008074:	2f6f      	cmp	r7, #111	; 0x6f
 8008076:	bf0c      	ite	eq
 8008078:	2308      	moveq	r3, #8
 800807a:	230a      	movne	r3, #10
 800807c:	2100      	movs	r1, #0
 800807e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008082:	6865      	ldr	r5, [r4, #4]
 8008084:	60a5      	str	r5, [r4, #8]
 8008086:	2d00      	cmp	r5, #0
 8008088:	bfa2      	ittt	ge
 800808a:	6821      	ldrge	r1, [r4, #0]
 800808c:	f021 0104 	bicge.w	r1, r1, #4
 8008090:	6021      	strge	r1, [r4, #0]
 8008092:	b90e      	cbnz	r6, 8008098 <_printf_i+0x118>
 8008094:	2d00      	cmp	r5, #0
 8008096:	d04d      	beq.n	8008134 <_printf_i+0x1b4>
 8008098:	4615      	mov	r5, r2
 800809a:	fbb6 f1f3 	udiv	r1, r6, r3
 800809e:	fb03 6711 	mls	r7, r3, r1, r6
 80080a2:	5dc7      	ldrb	r7, [r0, r7]
 80080a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080a8:	4637      	mov	r7, r6
 80080aa:	42bb      	cmp	r3, r7
 80080ac:	460e      	mov	r6, r1
 80080ae:	d9f4      	bls.n	800809a <_printf_i+0x11a>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d10b      	bne.n	80080cc <_printf_i+0x14c>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07de      	lsls	r6, r3, #31
 80080b8:	d508      	bpl.n	80080cc <_printf_i+0x14c>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4299      	cmp	r1, r3
 80080c0:	bfde      	ittt	le
 80080c2:	2330      	movle	r3, #48	; 0x30
 80080c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080cc:	1b52      	subs	r2, r2, r5
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	f8cd a000 	str.w	sl, [sp]
 80080d4:	464b      	mov	r3, r9
 80080d6:	aa03      	add	r2, sp, #12
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff fee2 	bl	8007ea4 <_printf_common>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d14c      	bne.n	800817e <_printf_i+0x1fe>
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080e8:	b004      	add	sp, #16
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	4835      	ldr	r0, [pc, #212]	; (80081c4 <_printf_i+0x244>)
 80080f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080f4:	6829      	ldr	r1, [r5, #0]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080fc:	6029      	str	r1, [r5, #0]
 80080fe:	061d      	lsls	r5, r3, #24
 8008100:	d514      	bpl.n	800812c <_printf_i+0x1ac>
 8008102:	07df      	lsls	r7, r3, #31
 8008104:	bf44      	itt	mi
 8008106:	f043 0320 	orrmi.w	r3, r3, #32
 800810a:	6023      	strmi	r3, [r4, #0]
 800810c:	b91e      	cbnz	r6, 8008116 <_printf_i+0x196>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f023 0320 	bic.w	r3, r3, #32
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	2310      	movs	r3, #16
 8008118:	e7b0      	b.n	800807c <_printf_i+0xfc>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	f043 0320 	orr.w	r3, r3, #32
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	2378      	movs	r3, #120	; 0x78
 8008124:	4828      	ldr	r0, [pc, #160]	; (80081c8 <_printf_i+0x248>)
 8008126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800812a:	e7e3      	b.n	80080f4 <_printf_i+0x174>
 800812c:	0659      	lsls	r1, r3, #25
 800812e:	bf48      	it	mi
 8008130:	b2b6      	uxthmi	r6, r6
 8008132:	e7e6      	b.n	8008102 <_printf_i+0x182>
 8008134:	4615      	mov	r5, r2
 8008136:	e7bb      	b.n	80080b0 <_printf_i+0x130>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	6826      	ldr	r6, [r4, #0]
 800813c:	6961      	ldr	r1, [r4, #20]
 800813e:	1d18      	adds	r0, r3, #4
 8008140:	6028      	str	r0, [r5, #0]
 8008142:	0635      	lsls	r5, r6, #24
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	d501      	bpl.n	800814c <_printf_i+0x1cc>
 8008148:	6019      	str	r1, [r3, #0]
 800814a:	e002      	b.n	8008152 <_printf_i+0x1d2>
 800814c:	0670      	lsls	r0, r6, #25
 800814e:	d5fb      	bpl.n	8008148 <_printf_i+0x1c8>
 8008150:	8019      	strh	r1, [r3, #0]
 8008152:	2300      	movs	r3, #0
 8008154:	6123      	str	r3, [r4, #16]
 8008156:	4615      	mov	r5, r2
 8008158:	e7ba      	b.n	80080d0 <_printf_i+0x150>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	1d1a      	adds	r2, r3, #4
 800815e:	602a      	str	r2, [r5, #0]
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	6862      	ldr	r2, [r4, #4]
 8008164:	2100      	movs	r1, #0
 8008166:	4628      	mov	r0, r5
 8008168:	f7f8 f8ba 	bl	80002e0 <memchr>
 800816c:	b108      	cbz	r0, 8008172 <_printf_i+0x1f2>
 800816e:	1b40      	subs	r0, r0, r5
 8008170:	6060      	str	r0, [r4, #4]
 8008172:	6863      	ldr	r3, [r4, #4]
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	2300      	movs	r3, #0
 8008178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817c:	e7a8      	b.n	80080d0 <_printf_i+0x150>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	462a      	mov	r2, r5
 8008182:	4649      	mov	r1, r9
 8008184:	4640      	mov	r0, r8
 8008186:	47d0      	blx	sl
 8008188:	3001      	adds	r0, #1
 800818a:	d0ab      	beq.n	80080e4 <_printf_i+0x164>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	079b      	lsls	r3, r3, #30
 8008190:	d413      	bmi.n	80081ba <_printf_i+0x23a>
 8008192:	68e0      	ldr	r0, [r4, #12]
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	4298      	cmp	r0, r3
 8008198:	bfb8      	it	lt
 800819a:	4618      	movlt	r0, r3
 800819c:	e7a4      	b.n	80080e8 <_printf_i+0x168>
 800819e:	2301      	movs	r3, #1
 80081a0:	4632      	mov	r2, r6
 80081a2:	4649      	mov	r1, r9
 80081a4:	4640      	mov	r0, r8
 80081a6:	47d0      	blx	sl
 80081a8:	3001      	adds	r0, #1
 80081aa:	d09b      	beq.n	80080e4 <_printf_i+0x164>
 80081ac:	3501      	adds	r5, #1
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	9903      	ldr	r1, [sp, #12]
 80081b2:	1a5b      	subs	r3, r3, r1
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dcf2      	bgt.n	800819e <_printf_i+0x21e>
 80081b8:	e7eb      	b.n	8008192 <_printf_i+0x212>
 80081ba:	2500      	movs	r5, #0
 80081bc:	f104 0619 	add.w	r6, r4, #25
 80081c0:	e7f5      	b.n	80081ae <_printf_i+0x22e>
 80081c2:	bf00      	nop
 80081c4:	08008f3d 	.word	0x08008f3d
 80081c8:	08008f4e 	.word	0x08008f4e

080081cc <memcpy>:
 80081cc:	440a      	add	r2, r1
 80081ce:	4291      	cmp	r1, r2
 80081d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081d4:	d100      	bne.n	80081d8 <memcpy+0xc>
 80081d6:	4770      	bx	lr
 80081d8:	b510      	push	{r4, lr}
 80081da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e2:	4291      	cmp	r1, r2
 80081e4:	d1f9      	bne.n	80081da <memcpy+0xe>
 80081e6:	bd10      	pop	{r4, pc}

080081e8 <memmove>:
 80081e8:	4288      	cmp	r0, r1
 80081ea:	b510      	push	{r4, lr}
 80081ec:	eb01 0402 	add.w	r4, r1, r2
 80081f0:	d902      	bls.n	80081f8 <memmove+0x10>
 80081f2:	4284      	cmp	r4, r0
 80081f4:	4623      	mov	r3, r4
 80081f6:	d807      	bhi.n	8008208 <memmove+0x20>
 80081f8:	1e43      	subs	r3, r0, #1
 80081fa:	42a1      	cmp	r1, r4
 80081fc:	d008      	beq.n	8008210 <memmove+0x28>
 80081fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008206:	e7f8      	b.n	80081fa <memmove+0x12>
 8008208:	4402      	add	r2, r0
 800820a:	4601      	mov	r1, r0
 800820c:	428a      	cmp	r2, r1
 800820e:	d100      	bne.n	8008212 <memmove+0x2a>
 8008210:	bd10      	pop	{r4, pc}
 8008212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800821a:	e7f7      	b.n	800820c <memmove+0x24>

0800821c <_free_r>:
 800821c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800821e:	2900      	cmp	r1, #0
 8008220:	d044      	beq.n	80082ac <_free_r+0x90>
 8008222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008226:	9001      	str	r0, [sp, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f1a1 0404 	sub.w	r4, r1, #4
 800822e:	bfb8      	it	lt
 8008230:	18e4      	addlt	r4, r4, r3
 8008232:	f000 f913 	bl	800845c <__malloc_lock>
 8008236:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <_free_r+0x94>)
 8008238:	9801      	ldr	r0, [sp, #4]
 800823a:	6813      	ldr	r3, [r2, #0]
 800823c:	b933      	cbnz	r3, 800824c <_free_r+0x30>
 800823e:	6063      	str	r3, [r4, #4]
 8008240:	6014      	str	r4, [r2, #0]
 8008242:	b003      	add	sp, #12
 8008244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008248:	f000 b90e 	b.w	8008468 <__malloc_unlock>
 800824c:	42a3      	cmp	r3, r4
 800824e:	d908      	bls.n	8008262 <_free_r+0x46>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	1961      	adds	r1, r4, r5
 8008254:	428b      	cmp	r3, r1
 8008256:	bf01      	itttt	eq
 8008258:	6819      	ldreq	r1, [r3, #0]
 800825a:	685b      	ldreq	r3, [r3, #4]
 800825c:	1949      	addeq	r1, r1, r5
 800825e:	6021      	streq	r1, [r4, #0]
 8008260:	e7ed      	b.n	800823e <_free_r+0x22>
 8008262:	461a      	mov	r2, r3
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	b10b      	cbz	r3, 800826c <_free_r+0x50>
 8008268:	42a3      	cmp	r3, r4
 800826a:	d9fa      	bls.n	8008262 <_free_r+0x46>
 800826c:	6811      	ldr	r1, [r2, #0]
 800826e:	1855      	adds	r5, r2, r1
 8008270:	42a5      	cmp	r5, r4
 8008272:	d10b      	bne.n	800828c <_free_r+0x70>
 8008274:	6824      	ldr	r4, [r4, #0]
 8008276:	4421      	add	r1, r4
 8008278:	1854      	adds	r4, r2, r1
 800827a:	42a3      	cmp	r3, r4
 800827c:	6011      	str	r1, [r2, #0]
 800827e:	d1e0      	bne.n	8008242 <_free_r+0x26>
 8008280:	681c      	ldr	r4, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	6053      	str	r3, [r2, #4]
 8008286:	4421      	add	r1, r4
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	e7da      	b.n	8008242 <_free_r+0x26>
 800828c:	d902      	bls.n	8008294 <_free_r+0x78>
 800828e:	230c      	movs	r3, #12
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	e7d6      	b.n	8008242 <_free_r+0x26>
 8008294:	6825      	ldr	r5, [r4, #0]
 8008296:	1961      	adds	r1, r4, r5
 8008298:	428b      	cmp	r3, r1
 800829a:	bf04      	itt	eq
 800829c:	6819      	ldreq	r1, [r3, #0]
 800829e:	685b      	ldreq	r3, [r3, #4]
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	bf04      	itt	eq
 80082a4:	1949      	addeq	r1, r1, r5
 80082a6:	6021      	streq	r1, [r4, #0]
 80082a8:	6054      	str	r4, [r2, #4]
 80082aa:	e7ca      	b.n	8008242 <_free_r+0x26>
 80082ac:	b003      	add	sp, #12
 80082ae:	bd30      	pop	{r4, r5, pc}
 80082b0:	240007f8 	.word	0x240007f8

080082b4 <sbrk_aligned>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4e0e      	ldr	r6, [pc, #56]	; (80082f0 <sbrk_aligned+0x3c>)
 80082b8:	460c      	mov	r4, r1
 80082ba:	6831      	ldr	r1, [r6, #0]
 80082bc:	4605      	mov	r5, r0
 80082be:	b911      	cbnz	r1, 80082c6 <sbrk_aligned+0x12>
 80082c0:	f000 f8bc 	bl	800843c <_sbrk_r>
 80082c4:	6030      	str	r0, [r6, #0]
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 f8b7 	bl	800843c <_sbrk_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d00a      	beq.n	80082e8 <sbrk_aligned+0x34>
 80082d2:	1cc4      	adds	r4, r0, #3
 80082d4:	f024 0403 	bic.w	r4, r4, #3
 80082d8:	42a0      	cmp	r0, r4
 80082da:	d007      	beq.n	80082ec <sbrk_aligned+0x38>
 80082dc:	1a21      	subs	r1, r4, r0
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 f8ac 	bl	800843c <_sbrk_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d101      	bne.n	80082ec <sbrk_aligned+0x38>
 80082e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082ec:	4620      	mov	r0, r4
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	240007fc 	.word	0x240007fc

080082f4 <_malloc_r>:
 80082f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f8:	1ccd      	adds	r5, r1, #3
 80082fa:	f025 0503 	bic.w	r5, r5, #3
 80082fe:	3508      	adds	r5, #8
 8008300:	2d0c      	cmp	r5, #12
 8008302:	bf38      	it	cc
 8008304:	250c      	movcc	r5, #12
 8008306:	2d00      	cmp	r5, #0
 8008308:	4607      	mov	r7, r0
 800830a:	db01      	blt.n	8008310 <_malloc_r+0x1c>
 800830c:	42a9      	cmp	r1, r5
 800830e:	d905      	bls.n	800831c <_malloc_r+0x28>
 8008310:	230c      	movs	r3, #12
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	2600      	movs	r6, #0
 8008316:	4630      	mov	r0, r6
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	4e2e      	ldr	r6, [pc, #184]	; (80083d8 <_malloc_r+0xe4>)
 800831e:	f000 f89d 	bl	800845c <__malloc_lock>
 8008322:	6833      	ldr	r3, [r6, #0]
 8008324:	461c      	mov	r4, r3
 8008326:	bb34      	cbnz	r4, 8008376 <_malloc_r+0x82>
 8008328:	4629      	mov	r1, r5
 800832a:	4638      	mov	r0, r7
 800832c:	f7ff ffc2 	bl	80082b4 <sbrk_aligned>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	4604      	mov	r4, r0
 8008334:	d14d      	bne.n	80083d2 <_malloc_r+0xde>
 8008336:	6834      	ldr	r4, [r6, #0]
 8008338:	4626      	mov	r6, r4
 800833a:	2e00      	cmp	r6, #0
 800833c:	d140      	bne.n	80083c0 <_malloc_r+0xcc>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4631      	mov	r1, r6
 8008342:	4638      	mov	r0, r7
 8008344:	eb04 0803 	add.w	r8, r4, r3
 8008348:	f000 f878 	bl	800843c <_sbrk_r>
 800834c:	4580      	cmp	r8, r0
 800834e:	d13a      	bne.n	80083c6 <_malloc_r+0xd2>
 8008350:	6821      	ldr	r1, [r4, #0]
 8008352:	3503      	adds	r5, #3
 8008354:	1a6d      	subs	r5, r5, r1
 8008356:	f025 0503 	bic.w	r5, r5, #3
 800835a:	3508      	adds	r5, #8
 800835c:	2d0c      	cmp	r5, #12
 800835e:	bf38      	it	cc
 8008360:	250c      	movcc	r5, #12
 8008362:	4629      	mov	r1, r5
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff ffa5 	bl	80082b4 <sbrk_aligned>
 800836a:	3001      	adds	r0, #1
 800836c:	d02b      	beq.n	80083c6 <_malloc_r+0xd2>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	442b      	add	r3, r5
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	e00e      	b.n	8008394 <_malloc_r+0xa0>
 8008376:	6822      	ldr	r2, [r4, #0]
 8008378:	1b52      	subs	r2, r2, r5
 800837a:	d41e      	bmi.n	80083ba <_malloc_r+0xc6>
 800837c:	2a0b      	cmp	r2, #11
 800837e:	d916      	bls.n	80083ae <_malloc_r+0xba>
 8008380:	1961      	adds	r1, r4, r5
 8008382:	42a3      	cmp	r3, r4
 8008384:	6025      	str	r5, [r4, #0]
 8008386:	bf18      	it	ne
 8008388:	6059      	strne	r1, [r3, #4]
 800838a:	6863      	ldr	r3, [r4, #4]
 800838c:	bf08      	it	eq
 800838e:	6031      	streq	r1, [r6, #0]
 8008390:	5162      	str	r2, [r4, r5]
 8008392:	604b      	str	r3, [r1, #4]
 8008394:	4638      	mov	r0, r7
 8008396:	f104 060b 	add.w	r6, r4, #11
 800839a:	f000 f865 	bl	8008468 <__malloc_unlock>
 800839e:	f026 0607 	bic.w	r6, r6, #7
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	1af2      	subs	r2, r6, r3
 80083a6:	d0b6      	beq.n	8008316 <_malloc_r+0x22>
 80083a8:	1b9b      	subs	r3, r3, r6
 80083aa:	50a3      	str	r3, [r4, r2]
 80083ac:	e7b3      	b.n	8008316 <_malloc_r+0x22>
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	bf0c      	ite	eq
 80083b4:	6032      	streq	r2, [r6, #0]
 80083b6:	605a      	strne	r2, [r3, #4]
 80083b8:	e7ec      	b.n	8008394 <_malloc_r+0xa0>
 80083ba:	4623      	mov	r3, r4
 80083bc:	6864      	ldr	r4, [r4, #4]
 80083be:	e7b2      	b.n	8008326 <_malloc_r+0x32>
 80083c0:	4634      	mov	r4, r6
 80083c2:	6876      	ldr	r6, [r6, #4]
 80083c4:	e7b9      	b.n	800833a <_malloc_r+0x46>
 80083c6:	230c      	movs	r3, #12
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4638      	mov	r0, r7
 80083cc:	f000 f84c 	bl	8008468 <__malloc_unlock>
 80083d0:	e7a1      	b.n	8008316 <_malloc_r+0x22>
 80083d2:	6025      	str	r5, [r4, #0]
 80083d4:	e7de      	b.n	8008394 <_malloc_r+0xa0>
 80083d6:	bf00      	nop
 80083d8:	240007f8 	.word	0x240007f8

080083dc <_realloc_r>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	4680      	mov	r8, r0
 80083e2:	4614      	mov	r4, r2
 80083e4:	460e      	mov	r6, r1
 80083e6:	b921      	cbnz	r1, 80083f2 <_realloc_r+0x16>
 80083e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	4611      	mov	r1, r2
 80083ee:	f7ff bf81 	b.w	80082f4 <_malloc_r>
 80083f2:	b92a      	cbnz	r2, 8008400 <_realloc_r+0x24>
 80083f4:	f7ff ff12 	bl	800821c <_free_r>
 80083f8:	4625      	mov	r5, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	f000 f838 	bl	8008474 <_malloc_usable_size_r>
 8008404:	4284      	cmp	r4, r0
 8008406:	4607      	mov	r7, r0
 8008408:	d802      	bhi.n	8008410 <_realloc_r+0x34>
 800840a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800840e:	d812      	bhi.n	8008436 <_realloc_r+0x5a>
 8008410:	4621      	mov	r1, r4
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff ff6e 	bl	80082f4 <_malloc_r>
 8008418:	4605      	mov	r5, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d0ed      	beq.n	80083fa <_realloc_r+0x1e>
 800841e:	42bc      	cmp	r4, r7
 8008420:	4622      	mov	r2, r4
 8008422:	4631      	mov	r1, r6
 8008424:	bf28      	it	cs
 8008426:	463a      	movcs	r2, r7
 8008428:	f7ff fed0 	bl	80081cc <memcpy>
 800842c:	4631      	mov	r1, r6
 800842e:	4640      	mov	r0, r8
 8008430:	f7ff fef4 	bl	800821c <_free_r>
 8008434:	e7e1      	b.n	80083fa <_realloc_r+0x1e>
 8008436:	4635      	mov	r5, r6
 8008438:	e7df      	b.n	80083fa <_realloc_r+0x1e>
	...

0800843c <_sbrk_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_sbrk_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f8 fbfe 	bl	8000c48 <_sbrk>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_sbrk_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_sbrk_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	24000800 	.word	0x24000800

0800845c <__malloc_lock>:
 800845c:	4801      	ldr	r0, [pc, #4]	; (8008464 <__malloc_lock+0x8>)
 800845e:	f000 b811 	b.w	8008484 <__retarget_lock_acquire_recursive>
 8008462:	bf00      	nop
 8008464:	24000804 	.word	0x24000804

08008468 <__malloc_unlock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_unlock+0x8>)
 800846a:	f000 b80c 	b.w	8008486 <__retarget_lock_release_recursive>
 800846e:	bf00      	nop
 8008470:	24000804 	.word	0x24000804

08008474 <_malloc_usable_size_r>:
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f18      	subs	r0, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfbc      	itt	lt
 800847e:	580b      	ldrlt	r3, [r1, r0]
 8008480:	18c0      	addlt	r0, r0, r3
 8008482:	4770      	bx	lr

08008484 <__retarget_lock_acquire_recursive>:
 8008484:	4770      	bx	lr

08008486 <__retarget_lock_release_recursive>:
 8008486:	4770      	bx	lr

08008488 <_init>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	bf00      	nop
 800848c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848e:	bc08      	pop	{r3}
 8008490:	469e      	mov	lr, r3
 8008492:	4770      	bx	lr

08008494 <_fini>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr
