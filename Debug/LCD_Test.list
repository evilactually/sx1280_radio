
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f50  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f1d0  0800f1d0  0001f1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f1d4  0800f1d4  0001f1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  24000000  0800f1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000067c  24000104  0800f2dc  00020104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000780  0800f2dc  00020780  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  9 .debug_info   000166a8  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002dfa  00000000  00000000  000367da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011f0  00000000  00000000  000395d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001060  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000398bc  00000000  00000000  0003b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017848  00000000  00000000  000750e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00169a0d  00000000  00000000  0008c92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f6339  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d44  00000000  00000000  001f638c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000104 	.word	0x24000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008268 	.word	0x08008268

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000108 	.word	0x24000108
 80002dc:	08008268 	.word	0x08008268

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <MX_GPIO_Init+0x104>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a39      	ldr	r2, [pc, #228]	; (8000484 <MX_GPIO_Init+0x104>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b37      	ldr	r3, [pc, #220]	; (8000484 <MX_GPIO_Init+0x104>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b33      	ldr	r3, [pc, #204]	; (8000484 <MX_GPIO_Init+0x104>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a32      	ldr	r2, [pc, #200]	; (8000484 <MX_GPIO_Init+0x104>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b2f      	ldr	r3, [pc, #188]	; (8000484 <MX_GPIO_Init+0x104>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <MX_GPIO_Init+0x104>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <MX_GPIO_Init+0x104>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_GPIO_Init+0x104>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b24      	ldr	r3, [pc, #144]	; (8000484 <MX_GPIO_Init+0x104>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a23      	ldr	r2, [pc, #140]	; (8000484 <MX_GPIO_Init+0x104>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_GPIO_Init+0x104>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E3_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000414:	481c      	ldr	r0, [pc, #112]	; (8000488 <MX_GPIO_Init+0x108>)
 8000416:	f003 f889 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000420:	4819      	ldr	r0, [pc, #100]	; (8000488 <MX_GPIO_Init+0x108>)
 8000422:	f003 f883 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PE10 */
  GPIO_InitStruct.Pin = E3_Pin|GPIO_PIN_10;
 8000426:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4812      	ldr	r0, [pc, #72]	; (8000488 <MX_GPIO_Init+0x108>)
 8000440:	f002 feac 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044e:	2302      	movs	r3, #2
 8000450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_GPIO_Init+0x10c>)
 800045a:	f002 fe9f 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800045e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_GPIO_Init+0x108>)
 8000478:	f002 fe90 	bl	800319c <HAL_GPIO_Init>

}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	; 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	58024400 	.word	0x58024400
 8000488:	58021000 	.word	0x58021000
 800048c:	58020800 	.word	0x58020800

08000490 <LED_Blink>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void LED_Blink(uint32_t Hdelay,uint32_t Ldelay)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	2108      	movs	r1, #8
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <LED_Blink+0x3c>)
 80004a0:	f003 f844 	bl	800352c <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 fd55 	bl	8002f58 <HAL_Delay>
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2108      	movs	r1, #8
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <LED_Blink+0x3c>)
 80004b4:	f003 f83a 	bl	800352c <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay-1);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 fd4b 	bl	8002f58 <HAL_Delay>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	58021000 	.word	0x58021000

080004d0 <RTC_CalendarShow>:


static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  /* ±�?ÐëÍ¬Ê±»ñÈ¡Ê±¼äºÍÈÕÆÚ ²»È»»áµ¼ÖÂÏÂ´ÎRTC²»ÄÜ¶ÁÈ¡ */
  /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 80004da:	2200      	movs	r2, #0
 80004dc:	6839      	ldr	r1, [r7, #0]
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <RTC_CalendarShow+0x28>)
 80004e0:	f005 fca0 	bl	8005e24 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 80004e4:	2200      	movs	r2, #0
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <RTC_CalendarShow+0x28>)
 80004ea:	f005 fd7f 	bl	8005fec <HAL_RTC_GetDate>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	24000120 	.word	0x24000120

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f002 fc97 	bl	8002e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f85b 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f7ff ff39 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 800050e:	f000 f8e7 	bl	80006e0 <MX_RTC_Init>
  MX_SPI4_Init();
 8000512:	f000 f973 	bl	80007fc <MX_SPI4_Init>
  MX_TIM1_Init();
 8000516:	f000 fb33 	bl	8000b80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Test();
 800051a:	f000 fc49 	bl	8000db0 <LCD_Test>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	HAL_GPIO_WritePin(E3_GPIO_Port,GPIO_PIN_10,GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <main+0xb4>)
 8000526:	f003 f801 	bl	800352c <HAL_GPIO_WritePin>

  		RTC_CalendarShow(&sdatestructureget,&stimestructureget);
 800052a:	1d3a      	adds	r2, r7, #4
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffcc 	bl	80004d0 <RTC_CalendarShow>

  		if (stimestructureget.Seconds % 2 == 1)
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <main+0x5a>
  			sprintf((char *)&text,"Time: %02d:%02d", stimestructureget.Hours, stimestructureget.Minutes);
 8000544:	793b      	ldrb	r3, [r7, #4]
 8000546:	461a      	mov	r2, r3
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	f107 001c 	add.w	r0, r7, #28
 800054e:	4919      	ldr	r1, [pc, #100]	; (80005b4 <main+0xb8>)
 8000550:	f007 fa1c 	bl	800798c <siprintf>
 8000554:	e007      	b.n	8000566 <main+0x6a>
  		else
  			sprintf((char *)&text,"Time: %02d %02d", stimestructureget.Hours, stimestructureget.Minutes);
 8000556:	793b      	ldrb	r3, [r7, #4]
 8000558:	461a      	mov	r2, r3
 800055a:	797b      	ldrb	r3, [r7, #5]
 800055c:	f107 001c 	add.w	r0, r7, #28
 8000560:	4915      	ldr	r1, [pc, #84]	; (80005b8 <main+0xbc>)
 8000562:	f007 fa13 	bl	800798c <siprintf>
  		LCD_ShowString(4, 58, 160, 16, 16, text);
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2310      	movs	r3, #16
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	22a0      	movs	r2, #160	; 0xa0
 8000574:	213a      	movs	r1, #58	; 0x3a
 8000576:	2004      	movs	r0, #4
 8000578:	f000 ffdc 	bl	8001534 <LCD_ShowString>

  		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
 800057c:	f002 fce0 	bl	8002f40 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <main+0xc0>)
 8000588:	4618      	mov	r0, r3
 800058a:	f007 f9ff 	bl	800798c <siprintf>
  		LCD_ShowString(4, 74, 160, 16, 16,text);
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2310      	movs	r3, #16
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2310      	movs	r3, #16
 800059a:	22a0      	movs	r2, #160	; 0xa0
 800059c:	214a      	movs	r1, #74	; 0x4a
 800059e:	2004      	movs	r0, #4
 80005a0:	f000 ffc8 	bl	8001534 <LCD_ShowString>

  		LED_Blink(3,500);
 80005a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005a8:	2003      	movs	r0, #3
 80005aa:	f7ff ff71 	bl	8000490 <LED_Blink>
    	HAL_GPIO_WritePin(E3_GPIO_Port,GPIO_PIN_10,GPIO_PIN_RESET);
 80005ae:	e7b6      	b.n	800051e <main+0x22>
 80005b0:	58021000 	.word	0x58021000
 80005b4:	08008280 	.word	0x08008280
 80005b8:	08008290 	.word	0x08008290
 80005bc:	080082a0 	.word	0x080082a0

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09c      	sub	sp, #112	; 0x70
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ca:	224c      	movs	r2, #76	; 0x4c
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 f9d4 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2220      	movs	r2, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 f9ce 	bl	800797c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005e0:	2002      	movs	r0, #2
 80005e2:	f002 ffcd 	bl	8003580 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <SystemClock_Config+0x108>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <SystemClock_Config+0x108>)
 80005f0:	f023 0301 	bic.w	r3, r3, #1
 80005f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <SystemClock_Config+0x108>)
 80005f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <SystemClock_Config+0x10c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a30      	ldr	r2, [pc, #192]	; (80006cc <SystemClock_Config+0x10c>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <SystemClock_Config+0x10c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061c:	bf00      	nop
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0x10c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062a:	d1f8      	bne.n	800061e <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f002 ff98 	bl	8003560 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	f002 fcb6 	bl	8002fa0 <HAL_GetREVID>
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0x110>)
 8000636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <SystemClock_Config+0x110>)
 800063a:	f023 0318 	bic.w	r3, r3, #24
 800063e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000640:	2305      	movs	r3, #5
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	2302      	movs	r3, #2
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000656:	2302      	movs	r3, #2
 8000658:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800065a:	230c      	movs	r3, #12
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800066a:	230c      	movs	r3, #12
 800066c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800066e:	2302      	movs	r3, #2
 8000670:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	4618      	mov	r0, r3
 800067c:	f002 ffba 	bl	80035f4 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000686:	f000 f825 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	233f      	movs	r3, #63	; 0x3f
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fbf9 	bl	8003ea8 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80006bc:	f000 f80a 	bl	80006d4 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3770      	adds	r7, #112	; 0x70
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58000400 	.word	0x58000400
 80006cc:	58024800 	.word	0x58024800
 80006d0:	58024400 	.word	0x58024400

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_RTC_Init+0xb0>)
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <MX_RTC_Init+0xb4>)
 80006fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_RTC_Init+0xb0>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_RTC_Init+0xb0>)
 8000706:	227f      	movs	r2, #127	; 0x7f
 8000708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_RTC_Init+0xb0>)
 800070c:	22ff      	movs	r2, #255	; 0xff
 800070e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_RTC_Init+0xb0>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_RTC_Init+0xb0>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_RTC_Init+0xb0>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_RTC_Init+0xb0>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_RTC_Init+0xb0>)
 800072a:	f005 fa5b 	bl	8005be4 <HAL_RTC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000734:	f7ff ffce 	bl	80006d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000738:	2312      	movs	r3, #18
 800073a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <MX_RTC_Init+0xb0>)
 8000754:	f005 fac8 	bl	8005ce8 <HAL_RTC_SetTime>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800075e:	f7ff ffb9 	bl	80006d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000762:	2301      	movs	r3, #1
 8000764:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000766:	2306      	movs	r3, #6
 8000768:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800076a:	2301      	movs	r3, #1
 800076c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800076e:	2320      	movs	r3, #32
 8000770:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_RTC_Init+0xb0>)
 800077a:	f005 fbaf 	bl	8005edc <HAL_RTC_SetDate>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000784:	f7ff ffa6 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	24000120 	.word	0x24000120
 8000794:	58004000 	.word	0x58004000

08000798 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b2      	sub	sp, #200	; 0xc8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f007 f8e7 	bl	800797c <memset>
  if(rtcHandle->Instance==RTC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_RTC_MspInit+0x5c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d119      	bne.n	80007ec <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fe99 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80007dc:	f7ff ff7a 	bl	80006d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_RTC_MspInit+0x60>)
 80007e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_RTC_MspInit+0x60>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ea:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	37c8      	adds	r7, #200	; 0xc8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58004000 	.word	0x58004000
 80007f8:	58024400 	.word	0x58024400

080007fc <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000802:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <MX_SPI4_Init+0xac>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000808:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800080c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000810:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000814:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000818:	2207      	movs	r2, #7
 800081a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800082a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800082e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000832:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000836:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800085a:	2200      	movs	r2, #0
 800085c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000866:	2200      	movs	r2, #0
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800086c:	2200      	movs	r2, #0
 800086e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000872:	2200      	movs	r2, #0
 8000874:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000878:	2200      	movs	r2, #0
 800087a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800087e:	2200      	movs	r2, #0
 8000880:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000884:	2200      	movs	r2, #0
 8000886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI4_Init+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_SPI4_Init+0xa8>)
 8000890:	f005 fcca 	bl	8006228 <HAL_SPI_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800089a:	f7ff ff1b 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000144 	.word	0x24000144
 80008a8:	40013400 	.word	0x40013400

080008ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ba      	sub	sp, #232	; 0xe8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	22c0      	movs	r2, #192	; 0xc0
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f007 f855 	bl	800797c <memset>
  if(spiHandle->Instance==SPI4)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a26      	ldr	r2, [pc, #152]	; (8000970 <HAL_SPI_MspInit+0xc4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d145      	bne.n	8000968 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80008dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fe09 	bl	8004508 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80008fc:	f7ff feea 	bl	80006d4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000906:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800090c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_SPI_MspInit+0xc8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800093c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2302      	movs	r3, #2
 8000952:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000956:	2305      	movs	r3, #5
 8000958:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_SPI_MspInit+0xcc>)
 8000964:	f002 fc1a 	bl	800319c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	37e8      	adds	r7, #232	; 0xe8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013400 	.word	0x40013400
 8000974:	58024400 	.word	0x58024400
 8000978:	58021000 	.word	0x58021000

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_MspInit+0x30>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x30>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x30>)
 8000994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	58024400 	.word	0x58024400

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f002 fa8c 	bl	8002f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f006 ff78 	bl	8007928 <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	24080000 	.word	0x24080000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	240001cc 	.word	0x240001cc
 8000a6c:	24000780 	.word	0x24000780

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <SystemInit+0xe4>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a36      	ldr	r2, [pc, #216]	; (8000b54 <SystemInit+0xe4>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <SystemInit+0xe8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	2b06      	cmp	r3, #6
 8000a8e:	d807      	bhi.n	8000aa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <SystemInit+0xe8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <SystemInit+0xe8>)
 8000a9a:	f043 0307 	orr.w	r3, r3, #7
 8000a9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <SystemInit+0xec>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <SystemInit+0xec>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <SystemInit+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <SystemInit+0xec>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4929      	ldr	r1, [pc, #164]	; (8000b5c <SystemInit+0xec>)
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemInit+0xf0>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemInit+0xe8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <SystemInit+0xe8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <SystemInit+0xe8>)
 8000ad4:	f043 0307 	orr.w	r3, r3, #7
 8000ad8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <SystemInit+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <SystemInit+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <SystemInit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <SystemInit+0xec>)
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <SystemInit+0xf4>)
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <SystemInit+0xec>)
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <SystemInit+0xf8>)
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <SystemInit+0xec>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <SystemInit+0xfc>)
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <SystemInit+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <SystemInit+0xec>)
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <SystemInit+0xfc>)
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <SystemInit+0xec>)
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <SystemInit+0xfc>)
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <SystemInit+0xec>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <SystemInit+0xec>)
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0x100>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <SystemInit+0x104>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b3a:	d202      	bcs.n	8000b42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <SystemInit+0x108>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <SystemInit+0x10c>)
 8000b44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	52002000 	.word	0x52002000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b64:	02020200 	.word	0x02020200
 8000b68:	01ff0000 	.word	0x01ff0000
 8000b6c:	01010280 	.word	0x01010280
 8000b70:	5c001000 	.word	0x5c001000
 8000b74:	ffff0000 	.word	0xffff0000
 8000b78:	51008108 	.word	0x51008108
 8000b7c:	52004000 	.word	0x52004000

08000b80 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b096      	sub	sp, #88	; 0x58
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	222c      	movs	r2, #44	; 0x2c
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fee5 	bl	800797c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bb4:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <MX_TIM1_Init+0x11c>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bba:	220b      	movs	r2, #11
 8000bbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bde:	482e      	ldr	r0, [pc, #184]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000be0:	f006 f8bb 	bl	8006d5a <HAL_TIM_PWM_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f7ff fd73 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4825      	ldr	r0, [pc, #148]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000c02:	f006 fd85 	bl	8007710 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c0c:	f7ff fd62 	bl	80006d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c10:	2360      	movs	r3, #96	; 0x60
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c30:	2204      	movs	r2, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000c36:	f006 f8e7 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c40:	f7ff fd48 	bl	80006d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000c7a:	f006 fdd7 	bl	800782c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c84:	f7ff fd26 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM1_Init+0x118>)
 8000c8a:	f000 f82b 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 8000c8e:	bf00      	nop
 8000c90:	3758      	adds	r7, #88	; 0x58
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	240001d0 	.word	0x240001d0
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_TIM_PWM_MspInit+0x3c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10e      	bne.n	8000cd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_TIM_PWM_MspInit+0x40>)
 8000cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <HAL_TIM_PWM_MspInit+0x40>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HAL_TIM_PWM_MspInit+0x40>)
 8000cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_TIM_MspPostInit+0x6c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d11f      	bne.n	8000d46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_TIM_MspPostInit+0x70>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_TIM_MspPostInit+0x70>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_TIM_MspPostInit+0x70>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_TIM_MspPostInit+0x74>)
 8000d42:	f002 fa2b 	bl	800319c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010000 	.word	0x40010000
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020000 	.word	0x58020000

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d60:	f7ff fe86 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	; (8000d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	; (8000da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f006 fdd3 	bl	8007934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fbb5 	bl	80004fc <main>
  bx  lr
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d9c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000da0:	0800f1d8 	.word	0x0800f1d8
  ldr r2, =_sbss
 8000da4:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000da8:	24000780 	.word	0x24000780

08000dac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC3_IRQHandler>
	...

08000db0 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af02      	add	r7, sp, #8
	uint8_t text[20];

	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <LCD_Test+0x1fc>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000dbc:	4b7b      	ldr	r3, [pc, #492]	; (8000fac <LCD_Test+0x1fc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <LCD_Test+0x1fc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	735a      	strb	r2, [r3, #13]
	#else
	//error "Unknown Screen"

	#endif

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000dc8:	4979      	ldr	r1, [pc, #484]	; (8000fb0 <LCD_Test+0x200>)
 8000dca:	487a      	ldr	r0, [pc, #488]	; (8000fb4 <LCD_Test+0x204>)
 8000dcc:	f000 fcfa 	bl	80017c4 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000dd0:	4b79      	ldr	r3, [pc, #484]	; (8000fb8 <LCD_Test+0x208>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a75      	ldr	r2, [pc, #468]	; (8000fac <LCD_Test+0x1fc>)
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	4876      	ldr	r0, [pc, #472]	; (8000fb4 <LCD_Test+0x204>)
 8000dda:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8000ddc:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <LCD_Test+0x208>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4976      	ldr	r1, [pc, #472]	; (8000fbc <LCD_Test+0x20c>)
 8000de2:	4874      	ldr	r0, [pc, #464]	; (8000fb4 <LCD_Test+0x204>)
 8000de4:	4798      	blx	r3

	LCD_SetBrightness(0);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f8fa 	bl	8000fe0 <LCD_SetBrightness>

	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8000dec:	4b72      	ldr	r3, [pc, #456]	; (8000fb8 <LCD_Test+0x208>)
 8000dee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000df0:	4b73      	ldr	r3, [pc, #460]	; (8000fc0 <LCD_Test+0x210>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	486f      	ldr	r0, [pc, #444]	; (8000fb4 <LCD_Test+0x204>)
 8000df8:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);
	#endif

  uint32_t tick = get_tick();
 8000dfa:	f002 f8a1 	bl	8002f40 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000e00:	e06a      	b.n	8000ed8 <LCD_Test+0x128>
	{
		delay_ms(10);
 8000e02:	200a      	movs	r0, #10
 8000e04:	f002 f8a8 	bl	8002f58 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8000e08:	f002 f89a 	bl	8002f40 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e16:	d80f      	bhi.n	8000e38 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000e18:	f002 f892 	bl	8002f40 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2264      	movs	r2, #100	; 0x64
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <LCD_Test+0x214>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	099b      	lsrs	r3, r3, #6
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8d5 	bl	8000fe0 <LCD_SetBrightness>
 8000e36:	e04f      	b.n	8000ed8 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8000e38:	f002 f882 	bl	8002f40 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d83d      	bhi.n	8000ec6 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000e4a:	f002 f879 	bl	8002f40 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000e58:	4a5b      	ldr	r2, [pc, #364]	; (8000fc8 <LCD_Test+0x218>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	463b      	mov	r3, r7
 8000e62:	495a      	ldr	r1, [pc, #360]	; (8000fcc <LCD_Test+0x21c>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fd91 	bl	800798c <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <LCD_Test+0x1fc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b1e      	subs	r3, #30
 8000e72:	b298      	uxth	r0, r3
 8000e74:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <LCD_Test+0x1fc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	2310      	movs	r3, #16
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2310      	movs	r3, #16
 8000e84:	2101      	movs	r1, #1
 8000e86:	f000 fb55 	bl	8001534 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <LCD_Test+0x208>)
 8000e8c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <LCD_Test+0x1fc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	1edd      	subs	r5, r3, #3
 8000e94:	f002 f854 	bl	8002f40 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ea2:	4a42      	ldr	r2, [pc, #264]	; (8000fac <LCD_Test+0x1fc>)
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <LCD_Test+0x214>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	09db      	lsrs	r3, r3, #7
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	462a      	mov	r2, r5
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	483c      	ldr	r0, [pc, #240]	; (8000fb4 <LCD_Test+0x204>)
 8000ec2:	47a0      	blx	r4
 8000ec4:	e008      	b.n	8000ed8 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8000ec6:	f002 f83b 	bl	8002f40 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d808      	bhi.n	8000eea <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000edc:	483c      	ldr	r0, [pc, #240]	; (8000fd0 <LCD_Test+0x220>)
 8000ede:	f002 fb0d 	bl	80034fc <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d18c      	bne.n	8000e02 <LCD_Test+0x52>
 8000ee8:	e004      	b.n	8000ef4 <LCD_Test+0x144>
			break;
 8000eea:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000eec:	e002      	b.n	8000ef4 <LCD_Test+0x144>
	{
		delay_ms(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f002 f832 	bl	8002f58 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4835      	ldr	r0, [pc, #212]	; (8000fd0 <LCD_Test+0x220>)
 8000efa:	f002 faff 	bl	80034fc <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d0f4      	beq.n	8000eee <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 8000f04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f88b 	bl	8001024 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, WHITE);
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <LCD_Test+0x208>)
 8000f10:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <LCD_Test+0x1fc>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <LCD_Test+0x1fc>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f1e:	9101      	str	r1, [sp, #4]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4613      	mov	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	4822      	ldr	r0, [pc, #136]	; (8000fb4 <LCD_Test+0x204>)
 8000f2a:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <LCD_Test+0x224>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fd2b 	bl	800798c <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <LCD_Test+0x1fc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	2310      	movs	r3, #16
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2310      	movs	r3, #16
 8000f46:	2104      	movs	r1, #4
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f000 faf3 	bl	8001534 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000f4e:	f002 f833 	bl	8002fb8 <HAL_GetDEVID>
 8000f52:	4602      	mov	r2, r0
 8000f54:	463b      	mov	r3, r7
 8000f56:	4920      	ldr	r1, [pc, #128]	; (8000fd8 <LCD_Test+0x228>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fd17 	bl	800798c <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <LCD_Test+0x1fc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	463b      	mov	r3, r7
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2310      	movs	r3, #16
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	2116      	movs	r1, #22
 8000f70:	2004      	movs	r0, #4
 8000f72:	f000 fadf 	bl	8001534 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <LCD_Test+0x20c>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4917      	ldr	r1, [pc, #92]	; (8000fdc <LCD_Test+0x22c>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 fd04 	bl	800798c <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <LCD_Test+0x1fc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2310      	movs	r3, #16
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2310      	movs	r3, #16
 8000f94:	2128      	movs	r1, #40	; 0x28
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 facc 	bl	8001534 <LCD_ShowString>

	LCD_Light(100, 200);
 8000f9c:	21c8      	movs	r1, #200	; 0xc8
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f000 f840 	bl	8001024 <LCD_Light>
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bdb0      	pop	{r4, r5, r7, pc}
 8000fac:	2400025c 	.word	0x2400025c
 8000fb0:	24000008 	.word	0x24000008
 8000fb4:	2400021c 	.word	0x2400021c
 8000fb8:	2400002c 	.word	0x2400002c
 8000fbc:	24000254 	.word	0x24000254
 8000fc0:	08008d54 	.word	0x08008d54
 8000fc4:	10624dd3 	.word	0x10624dd3
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	080082ac 	.word	0x080082ac
 8000fd0:	58020800 	.word	0x58020800
 8000fd4:	080082b4 	.word	0x080082b4
 8000fd8:	080082c4 	.word	0x080082c4
 8000fdc:	080082d4 	.word	0x080082d4

08000fe0 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_WR_RS_GPIO_Port,GPIO_PIN_10,GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <LCD_SetBrightness+0x24>)
 8000ff0:	f002 fa9c 	bl	800352c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <LCD_SetBrightness+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58021000 	.word	0x58021000
 8001008:	240001d0 	.word	0x240001d0

0800100c <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <LCD_GetBrightness+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	240001d0 	.word	0x240001d0

08001024 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 800102e:	f7ff ffed 	bl	800100c <LCD_GetBrightness>
 8001032:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8001038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d05e      	beq.n	80010fe <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	429a      	cmp	r2, r3
 8001046:	d05c      	beq.n	8001102 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001052:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001060:	ed97 7a07 	vldr	s14, [r7, #28]
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001076:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001084:	ed97 7a06 	vldr	s14, [r7, #24]
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8001090:	edd7 6a07 	vldr	s13, [r7, #28]
 8001094:	ed97 7a06 	vldr	s14, [r7, #24]
 8001098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109c:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80010a0:	f001 ff4e 	bl	8002f40 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 ff56 	bl	8002f58 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80010ac:	f001 ff48 	bl	8002f40 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c2:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 80010c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80010e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ec:	ee17 0a90 	vmov	r0, s15
 80010f0:	f7ff ff76 	bl	8000fe0 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80010f4:	6a3a      	ldr	r2, [r7, #32]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d204      	bcs.n	8001106 <LCD_Light+0xe2>
		delay_ms(1);
 80010fc:	e7d3      	b.n	80010a6 <LCD_Light+0x82>
		return;
 80010fe:	bf00      	nop
 8001100:	e002      	b.n	8001108 <LCD_Light+0xe4>
		return;
 8001102:	bf00      	nop
 8001104:	e000      	b.n	8001108 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8001106:	bf00      	nop
		
	}
}
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8001110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	b097      	sub	sp, #92	; 0x5c
 8001116:	af02      	add	r7, sp, #8
 8001118:	461e      	mov	r6, r3
 800111a:	4603      	mov	r3, r0
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800111e:	460b      	mov	r3, r1
 8001120:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001122:	4613      	mov	r3, r2
 8001124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001128:	4633      	mov	r3, r6
 800112a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800112e:	466b      	mov	r3, sp
 8001130:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8001132:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001134:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 8001138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800113a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 800113e:	4baf      	ldr	r3, [pc, #700]	; (80013fc <LCD_ShowChar+0x2ec>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001146:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800114a:	2b0c      	cmp	r3, #12
 800114c:	d101      	bne.n	8001152 <LCD_ShowChar+0x42>
 800114e:	2106      	movs	r1, #6
 8001150:	e000      	b.n	8001154 <LCD_ShowChar+0x44>
 8001152:	2108      	movs	r1, #8
 8001154:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001158:	1e4b      	subs	r3, r1, #1
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
 800115c:	460a      	mov	r2, r1
 800115e:	2300      	movs	r3, #0
 8001160:	4692      	mov	sl, r2
 8001162:	469b      	mov	fp, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001170:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001174:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001178:	460b      	mov	r3, r1
 800117a:	005e      	lsls	r6, r3, #1
 800117c:	4603      	mov	r3, r0
 800117e:	3b01      	subs	r3, #1
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001182:	460a      	mov	r2, r1
 8001184:	2300      	movs	r3, #0
 8001186:	61ba      	str	r2, [r7, #24]
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	b2c3      	uxtb	r3, r0
 800118c:	2200      	movs	r2, #0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	627a      	str	r2, [r7, #36]	; 0x24
 8001192:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001196:	465b      	mov	r3, fp
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	fb02 fc03 	mul.w	ip, r2, r3
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	4652      	mov	r2, sl
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	449c      	add	ip, r3
 80011a8:	4652      	mov	r2, sl
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	fba2 8903 	umull	r8, r9, r2, r3
 80011b0:	eb0c 0309 	add.w	r3, ip, r9
 80011b4:	4699      	mov	r9, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80011c2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80011c6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80011ca:	460a      	mov	r2, r1
 80011cc:	2300      	movs	r3, #0
 80011ce:	613a      	str	r2, [r7, #16]
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	b2c3      	uxtb	r3, r0
 80011d4:	2200      	movs	r2, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	60fa      	str	r2, [r7, #12]
 80011da:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011de:	464b      	mov	r3, r9
 80011e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80011e4:	4652      	mov	r2, sl
 80011e6:	fb02 fc03 	mul.w	ip, r2, r3
 80011ea:	465b      	mov	r3, fp
 80011ec:	4642      	mov	r2, r8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	449c      	add	ip, r3
 80011f4:	4642      	mov	r2, r8
 80011f6:	4653      	mov	r3, sl
 80011f8:	fba2 4503 	umull	r4, r5, r2, r3
 80011fc:	eb0c 0305 	add.w	r3, ip, r5
 8001200:	461d      	mov	r5, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	012b      	lsls	r3, r5, #4
 800120c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001210:	0122      	lsls	r2, r4, #4
 8001212:	460b      	mov	r3, r1
 8001214:	4602      	mov	r2, r0
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	3307      	adds	r3, #7
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	ebad 0d03 	sub.w	sp, sp, r3
 8001226:	ab02      	add	r3, sp, #8
 8001228:	3301      	adds	r3, #1
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8001230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001234:	4619      	mov	r1, r3
 8001236:	4872      	ldr	r0, [pc, #456]	; (8001400 <LCD_ShowChar+0x2f0>)
 8001238:	f001 fc20 	bl	8002a7c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800123c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001240:	4619      	mov	r1, r3
 8001242:	486f      	ldr	r0, [pc, #444]	; (8001400 <LCD_ShowChar+0x2f0>)
 8001244:	f001 fc2c 	bl	8002aa0 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800124c:	3b20      	subs	r3, #32
 800124e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8001258:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 80a7 	bne.w	80013b0 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 8001262:	2300      	movs	r3, #0
 8001264:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001268:	e09a      	b.n	80013a0 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 800126a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d10e      	bne.n	8001290 <LCD_ShowChar+0x180>
 8001272:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001276:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 800127a:	4862      	ldr	r0, [pc, #392]	; (8001404 <LCD_ShowChar+0x2f4>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4403      	add	r3, r0
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800128e:	e00a      	b.n	80012a6 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 8001290:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001294:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001298:	495b      	ldr	r1, [pc, #364]	; (8001408 <LCD_ShowChar+0x2f8>)
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	440a      	add	r2, r1
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80012ac:	e06d      	b.n	800138a <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 80012ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da0e      	bge.n	80012d4 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80012b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <LCD_ShowChar+0x2ec>)
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	e00d      	b.n	80012f0 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <LCD_ShowChar+0x2fc>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b4b      	ldr	r3, [pc, #300]	; (800140c <LCD_ShowChar+0x2fc>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b43      	ldr	r3, [pc, #268]	; (80013fc <LCD_ShowChar+0x2ec>)
 80012ee:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80012f0:	0872      	lsrs	r2, r6, #1
 80012f2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80012f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012fa:	085b      	lsrs	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461c      	mov	r4, r3
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <LCD_ShowChar+0x2ec>)
 8001302:	8818      	ldrh	r0, [r3, #0]
 8001304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001306:	fb01 f202 	mul.w	r2, r1, r2
 800130a:	4422      	add	r2, r4
 800130c:	4601      	mov	r1, r0
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001312:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001316:	3301      	adds	r3, #1
 8001318:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 800131c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001320:	b29b      	uxth	r3, r3
 8001322:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001326:	429a      	cmp	r2, r3
 8001328:	d302      	bcc.n	8001330 <LCD_ShowChar+0x220>
 800132a:	2300      	movs	r3, #0
 800132c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001330:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800133a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800133c:	3301      	adds	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001340:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	429a      	cmp	r2, r3
 8001346:	d304      	bcc.n	8001352 <LCD_ShowChar+0x242>
 8001348:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <LCD_ShowChar+0x2ec>)
 800134a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800134e:	8013      	strh	r3, [r2, #0]
 8001350:	e0e6      	b.n	8001520 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8001352:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001354:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800135e:	429a      	cmp	r2, r3
 8001360:	d10e      	bne.n	8001380 <LCD_ShowChar+0x270>
				{
					y=y0;
 8001362:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001366:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001368:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800136a:	3301      	adds	r3, #1
 800136c:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800136e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001372:	429a      	cmp	r2, r3
 8001374:	d30e      	bcc.n	8001394 <LCD_ShowChar+0x284>
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <LCD_ShowChar+0x2ec>)
 8001378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800137c:	8013      	strh	r3, [r2, #0]
 800137e:	e0cf      	b.n	8001520 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001380:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001384:	3301      	adds	r3, #1
 8001386:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800138a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138e:	2b07      	cmp	r3, #7
 8001390:	d98d      	bls.n	80012ae <LCD_ShowChar+0x19e>
 8001392:	e000      	b.n	8001396 <LCD_ShowChar+0x286>
					break;
 8001394:	bf00      	nop
		for(t=0;t<size;t++)
 8001396:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800139a:	3301      	adds	r3, #1
 800139c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80013a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f4ff af5e 	bcc.w	800126a <LCD_ShowChar+0x15a>
 80013ae:	e09c      	b.n	80014ea <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013b6:	e091      	b.n	80014dc <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80013b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d10e      	bne.n	80013de <LCD_ShowChar+0x2ce>
 80013c0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80013c4:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <LCD_ShowChar+0x2f4>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4403      	add	r3, r0
 80013d4:	440b      	add	r3, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80013dc:	e00a      	b.n	80013f4 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80013de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80013e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <LCD_ShowChar+0x2f8>)
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	440a      	add	r2, r1
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80013fa:	e064      	b.n	80014c6 <LCD_ShowChar+0x3b6>
 80013fc:	24000028 	.word	0x24000028
 8001400:	2400021c 	.word	0x2400021c
 8001404:	080082f0 	.word	0x080082f0
 8001408:	08008764 	.word	0x08008764
 800140c:	24000258 	.word	0x24000258
			{			    
				if(temp&0x80)
 8001410:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001414:	2b00      	cmp	r3, #0
 8001416:	da1a      	bge.n	800144e <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <LCD_ShowChar+0x41c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <LCD_ShowChar+0x41c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b218      	sxth	r0, r3
 800142e:	0872      	lsrs	r2, r6, #1
 8001430:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8001434:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461c      	mov	r4, r3
 800143e:	b280      	uxth	r0, r0
 8001440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	4422      	add	r2, r4
 8001448:	4601      	mov	r1, r0
 800144a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800144e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001452:	3301      	adds	r3, #1
 8001454:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001458:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800145c:	b29b      	uxth	r3, r3
 800145e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001462:	429a      	cmp	r2, r3
 8001464:	d302      	bcc.n	800146c <LCD_ShowChar+0x35c>
 8001466:	2300      	movs	r3, #0
 8001468:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 800146c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001476:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001478:	3301      	adds	r3, #1
 800147a:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800147c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	429a      	cmp	r2, r3
 8001482:	d304      	bcc.n	800148e <LCD_ShowChar+0x37e>
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <LCD_ShowChar+0x41c>)
 8001486:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800148a:	8013      	strh	r3, [r2, #0]
 800148c:	e048      	b.n	8001520 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800148e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001490:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800149a:	429a      	cmp	r2, r3
 800149c:	d10e      	bne.n	80014bc <LCD_ShowChar+0x3ac>
				{
					y=y0;
 800149e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 80014a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a6:	3301      	adds	r3, #1
 80014a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80014aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d30e      	bcc.n	80014d0 <LCD_ShowChar+0x3c0>
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <LCD_ShowChar+0x41c>)
 80014b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80014b8:	8013      	strh	r3, [r2, #0]
 80014ba:	e031      	b.n	8001520 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 80014bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014c0:	3301      	adds	r3, #1
 80014c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80014c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	d9a0      	bls.n	8001410 <LCD_ShowChar+0x300>
 80014ce:	e000      	b.n	80014d2 <LCD_ShowChar+0x3c2>
					break;
 80014d0:	bf00      	nop
		for(t=0;t<size;t++)
 80014d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014d6:	3301      	adds	r3, #1
 80014d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80014dc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80014e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f4ff af67 	bcc.w	80013b8 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80014ea:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80014ee:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80014f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d101      	bne.n	80014fe <LCD_ShowChar+0x3ee>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e000      	b.n	8001500 <LCD_ShowChar+0x3f0>
 80014fe:	2308      	movs	r3, #8
 8001500:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	4602      	mov	r2, r0
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <LCD_ShowChar+0x420>)
 800150e:	f001 f907 	bl	8002720 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001512:	4a06      	ldr	r2, [pc, #24]	; (800152c <LCD_ShowChar+0x41c>)
 8001514:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001518:	8013      	strh	r3, [r2, #0]
 800151a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800151e:	e001      	b.n	8001524 <LCD_ShowChar+0x414>
 8001520:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8001524:	3754      	adds	r7, #84	; 0x54
 8001526:	46bd      	mov	sp, r7
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800152c:	24000028 	.word	0x24000028
 8001530:	2400021c 	.word	0x2400021c

08001534 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b087      	sub	sp, #28
 8001538:	af02      	add	r7, sp, #8
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	4603      	mov	r3, r0
 8001548:	80bb      	strh	r3, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4413      	add	r3, r2
 800155c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800155e:	883a      	ldrh	r2, [r7, #0]
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001566:	e024      	b.n	80015b2 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	429a      	cmp	r2, r3
 800156e:	d307      	bcc.n	8001580 <LCD_ShowString+0x4c>
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	80fb      	strh	r3, [r7, #6]
 8001574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001578:	b29a      	uxth	r2, r3
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8001580:	88ba      	ldrh	r2, [r7, #4]
 8001582:	883b      	ldrh	r3, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d21d      	bcs.n	80015c4 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001590:	88b9      	ldrh	r1, [r7, #4]
 8001592:	88f8      	ldrh	r0, [r7, #6]
 8001594:	2400      	movs	r4, #0
 8001596:	9400      	str	r4, [sp, #0]
 8001598:	f7ff fdba 	bl	8001110 <LCD_ShowChar>
        x+=size/2;
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4413      	add	r3, r2
 80015aa:	80fb      	strh	r3, [r7, #6]
        p++;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	3301      	adds	r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b7e      	cmp	r3, #126	; 0x7e
 80015b8:	d805      	bhi.n	80015c6 <LCD_ShowString+0x92>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b1f      	cmp	r3, #31
 80015c0:	d8d2      	bhi.n	8001568 <LCD_ShowString+0x34>
    }  
}
 80015c2:	e000      	b.n	80015c6 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80015c4:	bf00      	nop
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <lcd_init>:

static int32_t lcd_init(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
	//HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
	return result;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80015ea:	f001 fca9 	bl	8002f40 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001608:	481d      	ldr	r0, [pc, #116]	; (8001680 <lcd_writereg+0x8c>)
 800160a:	f001 ff8f 	bl	800352c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001614:	481a      	ldr	r0, [pc, #104]	; (8001680 <lcd_writereg+0x8c>)
 8001616:	f001 ff89 	bl	800352c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800161a:	f107 010f 	add.w	r1, r7, #15
 800161e:	2364      	movs	r3, #100	; 0x64
 8001620:	2201      	movs	r2, #1
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <lcd_writereg+0x90>)
 8001624:	f004 ff24 	bl	8006470 <HAL_SPI_Transmit>
 8001628:	4603      	mov	r3, r0
 800162a:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001632:	4813      	ldr	r0, [pc, #76]	; (8001680 <lcd_writereg+0x8c>)
 8001634:	f001 ff7a 	bl	800352c <HAL_GPIO_WritePin>
	if(length > 0)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00c      	beq.n	8001658 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	b29a      	uxth	r2, r3
 8001642:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	480e      	ldr	r0, [pc, #56]	; (8001684 <lcd_writereg+0x90>)
 800164a:	f004 ff11 	bl	8006470 <HAL_SPI_Transmit>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <lcd_writereg+0x8c>)
 8001660:	f001 ff64 	bl	800352c <HAL_GPIO_WritePin>
	if(result>0){
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dd03      	ble.n	8001672 <lcd_writereg+0x7e>
		result = -1;}
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e001      	b.n	8001676 <lcd_writereg+0x82>
	else{
		result = 0;}
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
	return result;
 8001676:	697b      	ldr	r3, [r7, #20]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58021000 	.word	0x58021000
 8001684:	24000144 	.word	0x24000144

08001688 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169a:	481b      	ldr	r0, [pc, #108]	; (8001708 <lcd_readreg+0x80>)
 800169c:	f001 ff46 	bl	800352c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <lcd_readreg+0x80>)
 80016a8:	f001 ff40 	bl	800352c <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80016ac:	1df9      	adds	r1, r7, #7
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	4816      	ldr	r0, [pc, #88]	; (800170c <lcd_readreg+0x84>)
 80016b4:	f004 fedc 	bl	8006470 <HAL_SPI_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <lcd_readreg+0x80>)
 80016c4:	f001 ff32 	bl	800352c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80016c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016cc:	2201      	movs	r2, #1
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <lcd_readreg+0x84>)
 80016d2:	f005 f8c9 	bl	8006868 <HAL_SPI_Receive>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <lcd_readreg+0x80>)
 80016e8:	f001 ff20 	bl	800352c <HAL_GPIO_WritePin>
	if(result>0){
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd03      	ble.n	80016fa <lcd_readreg+0x72>
		result = -1;}
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e001      	b.n	80016fe <lcd_readreg+0x76>
	else{
		result = 0;}
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
	return result;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58021000 	.word	0x58021000
 800170c:	24000144 	.word	0x24000144

08001710 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <lcd_senddata+0x50>)
 8001722:	f001 ff03 	bl	800352c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <lcd_senddata+0x54>)
 8001730:	f004 fe9e 	bl	8006470 <HAL_SPI_Transmit>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <lcd_senddata+0x50>)
 8001740:	f001 fef4 	bl	800352c <HAL_GPIO_WritePin>
	if(result>0){
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dd03      	ble.n	8001752 <lcd_senddata+0x42>
		result = -1;}
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e001      	b.n	8001756 <lcd_senddata+0x46>
	else{
		result = 0;}
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	return result;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58021000 	.word	0x58021000
 8001764:	24000144 	.word	0x24000144

08001768 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <lcd_recvdata+0x54>)
 800177a:	f001 fed7 	bl	800352c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <lcd_recvdata+0x58>)
 800178a:	f005 f86d 	bl	8006868 <HAL_SPI_Receive>
 800178e:	4603      	mov	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <lcd_recvdata+0x54>)
 800179a:	f001 fec7 	bl	800352c <HAL_GPIO_WritePin>
	if(result>0){
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd03      	ble.n	80017ac <lcd_recvdata+0x44>
		result = -1;}
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e001      	b.n	80017b0 <lcd_recvdata+0x48>
	else{
		result = 0;}
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
	return result;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	58021000 	.word	0x58021000
 80017c0:	24000144 	.word	0x24000144

080017c4 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e03a      	b.n	8001852 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	891a      	ldrh	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <ST7735_RegisterBusIO+0x98>)
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <ST7735_RegisterBusIO+0x9c>)
 8001826:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <ST7735_RegisterBusIO+0xa0>)
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <ST7735_RegisterBusIO+0xa4>)
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4798      	blx	r3
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	e002      	b.n	8001852 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08002ccd 	.word	0x08002ccd
 8001860:	08002cf5 	.word	0x08002cf5
 8001864:	08002d1f 	.word	0x08002d1f
 8001868:	08002d43 	.word	0x08002d43

0800186c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e3a6      	b.n	8001fd4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f103 0020 	add.w	r0, r3, #32
 8001890:	f107 0213 	add.w	r2, r7, #19
 8001894:	2300      	movs	r3, #0
 8001896:	2101      	movs	r1, #1
 8001898:	f001 fa92 	bl	8002dc0 <st7735_write_reg>
 800189c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800189e:	2178      	movs	r1, #120	; 0x78
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f001 fa60 	bl	8002d66 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f103 0020 	add.w	r0, r3, #32
 80018b0:	f107 0213 	add.w	r2, r7, #19
 80018b4:	2300      	movs	r3, #0
 80018b6:	2101      	movs	r1, #1
 80018b8:	f001 fa82 	bl	8002dc0 <st7735_write_reg>
 80018bc:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80018be:	2178      	movs	r1, #120	; 0x78
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f001 fa50 	bl	8002d66 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f103 0020 	add.w	r0, r3, #32
 80018d0:	f107 0213 	add.w	r2, r7, #19
 80018d4:	2301      	movs	r3, #1
 80018d6:	2111      	movs	r1, #17
 80018d8:	f001 fa72 	bl	8002dc0 <st7735_write_reg>
 80018dc:	4602      	mov	r2, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f103 0020 	add.w	r0, r3, #32
 80018ea:	f107 0213 	add.w	r2, r7, #19
 80018ee:	2300      	movs	r3, #0
 80018f0:	21b1      	movs	r1, #177	; 0xb1
 80018f2:	f001 fa65 	bl	8002dc0 <st7735_write_reg>
 80018f6:	4602      	mov	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80018fe:	2301      	movs	r3, #1
 8001900:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3320      	adds	r3, #32
 8001906:	f107 0113 	add.w	r1, r7, #19
 800190a:	2201      	movs	r2, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fa6c 	bl	8002dea <st7735_send_data>
 8001912:	4602      	mov	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800191a:	232c      	movs	r3, #44	; 0x2c
 800191c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3320      	adds	r3, #32
 8001922:	f107 0113 	add.w	r1, r7, #19
 8001926:	2201      	movs	r2, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fa5e 	bl	8002dea <st7735_send_data>
 800192e:	4602      	mov	r2, r0
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001936:	232d      	movs	r3, #45	; 0x2d
 8001938:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3320      	adds	r3, #32
 800193e:	f107 0113 	add.w	r1, r7, #19
 8001942:	2201      	movs	r2, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fa50 	bl	8002dea <st7735_send_data>
 800194a:	4602      	mov	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001952:	2301      	movs	r3, #1
 8001954:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f103 0020 	add.w	r0, r3, #32
 800195c:	f107 0213 	add.w	r2, r7, #19
 8001960:	2301      	movs	r3, #1
 8001962:	21b2      	movs	r1, #178	; 0xb2
 8001964:	f001 fa2c 	bl	8002dc0 <st7735_write_reg>
 8001968:	4602      	mov	r2, r0
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001970:	232c      	movs	r3, #44	; 0x2c
 8001972:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3320      	adds	r3, #32
 8001978:	f107 0113 	add.w	r1, r7, #19
 800197c:	2201      	movs	r2, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fa33 	bl	8002dea <st7735_send_data>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4413      	add	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800198c:	232d      	movs	r3, #45	; 0x2d
 800198e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3320      	adds	r3, #32
 8001994:	f107 0113 	add.w	r1, r7, #19
 8001998:	2201      	movs	r2, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fa25 	bl	8002dea <st7735_send_data>
 80019a0:	4602      	mov	r2, r0
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 80019a8:	2301      	movs	r3, #1
 80019aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f103 0020 	add.w	r0, r3, #32
 80019b2:	f107 0213 	add.w	r2, r7, #19
 80019b6:	2301      	movs	r3, #1
 80019b8:	21b3      	movs	r1, #179	; 0xb3
 80019ba:	f001 fa01 	bl	8002dc0 <st7735_write_reg>
 80019be:	4602      	mov	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80019c6:	232c      	movs	r3, #44	; 0x2c
 80019c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3320      	adds	r3, #32
 80019ce:	f107 0113 	add.w	r1, r7, #19
 80019d2:	2201      	movs	r2, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fa08 	bl	8002dea <st7735_send_data>
 80019da:	4602      	mov	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80019e2:	232d      	movs	r3, #45	; 0x2d
 80019e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3320      	adds	r3, #32
 80019ea:	f107 0113 	add.w	r1, r7, #19
 80019ee:	2201      	movs	r2, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 f9fa 	bl	8002dea <st7735_send_data>
 80019f6:	4602      	mov	r2, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4413      	add	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80019fe:	2301      	movs	r3, #1
 8001a00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3320      	adds	r3, #32
 8001a06:	f107 0113 	add.w	r1, r7, #19
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f9ec 	bl	8002dea <st7735_send_data>
 8001a12:	4602      	mov	r2, r0
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001a1a:	232c      	movs	r3, #44	; 0x2c
 8001a1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3320      	adds	r3, #32
 8001a22:	f107 0113 	add.w	r1, r7, #19
 8001a26:	2201      	movs	r2, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 f9de 	bl	8002dea <st7735_send_data>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001a36:	232d      	movs	r3, #45	; 0x2d
 8001a38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	f107 0113 	add.w	r1, r7, #19
 8001a42:	2201      	movs	r2, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 f9d0 	bl	8002dea <st7735_send_data>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001a52:	2307      	movs	r3, #7
 8001a54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f103 0020 	add.w	r0, r3, #32
 8001a5c:	f107 0213 	add.w	r2, r7, #19
 8001a60:	2301      	movs	r3, #1
 8001a62:	21b4      	movs	r1, #180	; 0xb4
 8001a64:	f001 f9ac 	bl	8002dc0 <st7735_write_reg>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001a70:	23a2      	movs	r3, #162	; 0xa2
 8001a72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f103 0020 	add.w	r0, r3, #32
 8001a7a:	f107 0213 	add.w	r2, r7, #19
 8001a7e:	2301      	movs	r3, #1
 8001a80:	21c0      	movs	r1, #192	; 0xc0
 8001a82:	f001 f99d 	bl	8002dc0 <st7735_write_reg>
 8001a86:	4602      	mov	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3320      	adds	r3, #32
 8001a96:	f107 0113 	add.w	r1, r7, #19
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 f9a4 	bl	8002dea <st7735_send_data>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001aaa:	2384      	movs	r3, #132	; 0x84
 8001aac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3320      	adds	r3, #32
 8001ab2:	f107 0113 	add.w	r1, r7, #19
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 f996 	bl	8002dea <st7735_send_data>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001ac6:	23c5      	movs	r3, #197	; 0xc5
 8001ac8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f103 0020 	add.w	r0, r3, #32
 8001ad0:	f107 0213 	add.w	r2, r7, #19
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	21c1      	movs	r1, #193	; 0xc1
 8001ad8:	f001 f972 	bl	8002dc0 <st7735_write_reg>
 8001adc:	4602      	mov	r2, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f103 0020 	add.w	r0, r3, #32
 8001aee:	f107 0213 	add.w	r2, r7, #19
 8001af2:	2301      	movs	r3, #1
 8001af4:	21c2      	movs	r1, #194	; 0xc2
 8001af6:	f001 f963 	bl	8002dc0 <st7735_write_reg>
 8001afa:	4602      	mov	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	4413      	add	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3320      	adds	r3, #32
 8001b0a:	f107 0113 	add.w	r1, r7, #19
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f96a 	bl	8002dea <st7735_send_data>
 8001b16:	4602      	mov	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001b1e:	238a      	movs	r3, #138	; 0x8a
 8001b20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0020 	add.w	r0, r3, #32
 8001b28:	f107 0213 	add.w	r2, r7, #19
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	21c3      	movs	r1, #195	; 0xc3
 8001b30:	f001 f946 	bl	8002dc0 <st7735_write_reg>
 8001b34:	4602      	mov	r2, r0
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001b3c:	232a      	movs	r3, #42	; 0x2a
 8001b3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3320      	adds	r3, #32
 8001b44:	f107 0113 	add.w	r1, r7, #19
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 f94d 	bl	8002dea <st7735_send_data>
 8001b50:	4602      	mov	r2, r0
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001b58:	238a      	movs	r3, #138	; 0x8a
 8001b5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f103 0020 	add.w	r0, r3, #32
 8001b62:	f107 0213 	add.w	r2, r7, #19
 8001b66:	2301      	movs	r3, #1
 8001b68:	21c4      	movs	r1, #196	; 0xc4
 8001b6a:	f001 f929 	bl	8002dc0 <st7735_write_reg>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001b76:	23ee      	movs	r3, #238	; 0xee
 8001b78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3320      	adds	r3, #32
 8001b7e:	f107 0113 	add.w	r1, r7, #19
 8001b82:	2201      	movs	r2, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f930 	bl	8002dea <st7735_send_data>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4413      	add	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001b92:	230e      	movs	r3, #14
 8001b94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f103 0020 	add.w	r0, r3, #32
 8001b9c:	f107 0213 	add.w	r2, r7, #19
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	21c5      	movs	r1, #197	; 0xc5
 8001ba4:	f001 f90c 	bl	8002dc0 <st7735_write_reg>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f103 0020 	add.w	r0, r3, #32
 8001bbe:	f107 0213 	add.w	r2, r7, #19
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2121      	movs	r1, #33	; 0x21
 8001bc6:	f001 f8fb 	bl	8002dc0 <st7735_write_reg>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e00c      	b.n	8001bee <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f103 0020 	add.w	r0, r3, #32
 8001bda:	f107 0213 	add.w	r2, r7, #19
 8001bde:	2300      	movs	r3, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	f001 f8ed 	bl	8002dc0 <st7735_write_reg>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f103 0020 	add.w	r0, r3, #32
 8001bf4:	f107 0208 	add.w	r2, r7, #8
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	213a      	movs	r1, #58	; 0x3a
 8001bfc:	f001 f8e0 	bl	8002dc0 <st7735_write_reg>
 8001c00:	4602      	mov	r2, r0
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f103 0020 	add.w	r0, r3, #32
 8001c12:	f107 0213 	add.w	r2, r7, #19
 8001c16:	2301      	movs	r3, #1
 8001c18:	21e0      	movs	r1, #224	; 0xe0
 8001c1a:	f001 f8d1 	bl	8002dc0 <st7735_write_reg>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001c26:	231c      	movs	r3, #28
 8001c28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3320      	adds	r3, #32
 8001c2e:	f107 0113 	add.w	r1, r7, #19
 8001c32:	2201      	movs	r2, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 f8d8 	bl	8002dea <st7735_send_data>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001c42:	2307      	movs	r3, #7
 8001c44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3320      	adds	r3, #32
 8001c4a:	f107 0113 	add.w	r1, r7, #19
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f8ca 	bl	8002dea <st7735_send_data>
 8001c56:	4602      	mov	r2, r0
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3320      	adds	r3, #32
 8001c66:	f107 0113 	add.w	r1, r7, #19
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 f8bc 	bl	8002dea <st7735_send_data>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001c7a:	2337      	movs	r3, #55	; 0x37
 8001c7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3320      	adds	r3, #32
 8001c82:	f107 0113 	add.w	r1, r7, #19
 8001c86:	2201      	movs	r2, #1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 f8ae 	bl	8002dea <st7735_send_data>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001c96:	2332      	movs	r3, #50	; 0x32
 8001c98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3320      	adds	r3, #32
 8001c9e:	f107 0113 	add.w	r1, r7, #19
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 f8a0 	bl	8002dea <st7735_send_data>
 8001caa:	4602      	mov	r2, r0
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001cb2:	2329      	movs	r3, #41	; 0x29
 8001cb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3320      	adds	r3, #32
 8001cba:	f107 0113 	add.w	r1, r7, #19
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 f892 	bl	8002dea <st7735_send_data>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4413      	add	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001cce:	232d      	movs	r3, #45	; 0x2d
 8001cd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	f107 0113 	add.w	r1, r7, #19
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f884 	bl	8002dea <st7735_send_data>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001cea:	2329      	movs	r3, #41	; 0x29
 8001cec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	f107 0113 	add.w	r1, r7, #19
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f876 	bl	8002dea <st7735_send_data>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8001d06:	2325      	movs	r3, #37	; 0x25
 8001d08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	f107 0113 	add.w	r1, r7, #19
 8001d12:	2201      	movs	r2, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 f868 	bl	8002dea <st7735_send_data>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4413      	add	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8001d22:	232b      	movs	r3, #43	; 0x2b
 8001d24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3320      	adds	r3, #32
 8001d2a:	f107 0113 	add.w	r1, r7, #19
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 f85a 	bl	8002dea <st7735_send_data>
 8001d36:	4602      	mov	r2, r0
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8001d3e:	2339      	movs	r3, #57	; 0x39
 8001d40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3320      	adds	r3, #32
 8001d46:	f107 0113 	add.w	r1, r7, #19
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f84c 	bl	8002dea <st7735_send_data>
 8001d52:	4602      	mov	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3320      	adds	r3, #32
 8001d62:	f107 0113 	add.w	r1, r7, #19
 8001d66:	2201      	movs	r2, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f83e 	bl	8002dea <st7735_send_data>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4413      	add	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001d76:	2301      	movs	r3, #1
 8001d78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3320      	adds	r3, #32
 8001d7e:	f107 0113 	add.w	r1, r7, #19
 8001d82:	2201      	movs	r2, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 f830 	bl	8002dea <st7735_send_data>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	4413      	add	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8001d92:	2303      	movs	r3, #3
 8001d94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3320      	adds	r3, #32
 8001d9a:	f107 0113 	add.w	r1, r7, #19
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 f822 	bl	8002dea <st7735_send_data>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001dae:	2310      	movs	r3, #16
 8001db0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3320      	adds	r3, #32
 8001db6:	f107 0113 	add.w	r1, r7, #19
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 f814 	bl	8002dea <st7735_send_data>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f103 0020 	add.w	r0, r3, #32
 8001dd4:	f107 0213 	add.w	r2, r7, #19
 8001dd8:	2301      	movs	r3, #1
 8001dda:	21e1      	movs	r1, #225	; 0xe1
 8001ddc:	f000 fff0 	bl	8002dc0 <st7735_write_reg>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8001de8:	231d      	movs	r3, #29
 8001dea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3320      	adds	r3, #32
 8001df0:	f107 0113 	add.w	r1, r7, #19
 8001df4:	2201      	movs	r2, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fff7 	bl	8002dea <st7735_send_data>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001e04:	2307      	movs	r3, #7
 8001e06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	f107 0113 	add.w	r1, r7, #19
 8001e10:	2201      	movs	r2, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 ffe9 	bl	8002dea <st7735_send_data>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8001e20:	2306      	movs	r3, #6
 8001e22:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3320      	adds	r3, #32
 8001e28:	f107 0113 	add.w	r1, r7, #19
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 ffdb 	bl	8002dea <st7735_send_data>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001e3c:	232e      	movs	r3, #46	; 0x2e
 8001e3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3320      	adds	r3, #32
 8001e44:	f107 0113 	add.w	r1, r7, #19
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 ffcd 	bl	8002dea <st7735_send_data>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001e58:	232c      	movs	r3, #44	; 0x2c
 8001e5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3320      	adds	r3, #32
 8001e60:	f107 0113 	add.w	r1, r7, #19
 8001e64:	2201      	movs	r2, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 ffbf 	bl	8002dea <st7735_send_data>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001e74:	2329      	movs	r3, #41	; 0x29
 8001e76:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	f107 0113 	add.w	r1, r7, #19
 8001e80:	2201      	movs	r2, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 ffb1 	bl	8002dea <st7735_send_data>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001e90:	232d      	movs	r3, #45	; 0x2d
 8001e92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3320      	adds	r3, #32
 8001e98:	f107 0113 	add.w	r1, r7, #19
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 ffa3 	bl	8002dea <st7735_send_data>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001eac:	232e      	movs	r3, #46	; 0x2e
 8001eae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	f107 0113 	add.w	r1, r7, #19
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 ff95 	bl	8002dea <st7735_send_data>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8001ec8:	232e      	movs	r3, #46	; 0x2e
 8001eca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	f107 0113 	add.w	r1, r7, #19
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 ff87 	bl	8002dea <st7735_send_data>
 8001edc:	4602      	mov	r2, r0
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001ee4:	2337      	movs	r3, #55	; 0x37
 8001ee6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3320      	adds	r3, #32
 8001eec:	f107 0113 	add.w	r1, r7, #19
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 ff79 	bl	8002dea <st7735_send_data>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8001f00:	233f      	movs	r3, #63	; 0x3f
 8001f02:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3320      	adds	r3, #32
 8001f08:	f107 0113 	add.w	r1, r7, #19
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 ff6b 	bl	8002dea <st7735_send_data>
 8001f14:	4602      	mov	r2, r0
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4413      	add	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3320      	adds	r3, #32
 8001f24:	f107 0113 	add.w	r1, r7, #19
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 ff5d 	bl	8002dea <st7735_send_data>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	f107 0113 	add.w	r1, r7, #19
 8001f44:	2201      	movs	r2, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 ff4f 	bl	8002dea <st7735_send_data>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001f54:	2302      	movs	r3, #2
 8001f56:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	f107 0113 	add.w	r1, r7, #19
 8001f60:	2201      	movs	r2, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 ff41 	bl	8002dea <st7735_send_data>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8001f70:	2310      	movs	r3, #16
 8001f72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3320      	adds	r3, #32
 8001f78:	f107 0113 	add.w	r1, r7, #19
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 ff33 	bl	8002dea <st7735_send_data>
 8001f84:	4602      	mov	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f103 0020 	add.w	r0, r3, #32
 8001f96:	f107 0213 	add.w	r2, r7, #19
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2113      	movs	r1, #19
 8001f9e:	f000 ff0f 	bl	8002dc0 <st7735_write_reg>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f103 0020 	add.w	r0, r3, #32
 8001fb0:	f107 0213 	add.w	r2, r7, #19
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2129      	movs	r1, #41	; 0x29
 8001fb8:	f000 ff02 	bl	8002dc0 <st7735_write_reg>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f944 	bl	8002254 <ST7735_SetOrientation>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001fe0:	697b      	ldr	r3, [r7, #20]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3320      	adds	r3, #32
 800200e:	f107 0208 	add.w	r2, r7, #8
 8002012:	21da      	movs	r1, #218	; 0xda
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fec0 	bl	8002d9a <st7735_read_reg>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e02d      	b.n	8002084 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0020 	add.w	r0, r3, #32
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	3301      	adds	r3, #1
 8002034:	461a      	mov	r2, r3
 8002036:	21db      	movs	r1, #219	; 0xdb
 8002038:	f000 feaf 	bl	8002d9a <st7735_read_reg>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e01c      	b.n	8002084 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0020 	add.w	r0, r3, #32
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	3302      	adds	r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	21dc      	movs	r1, #220	; 0xdc
 800205a:	f000 fe9e 	bl	8002d9a <st7735_read_reg>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e00b      	b.n	8002084 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 800206c:	7abb      	ldrb	r3, [r7, #10]
 800206e:	461a      	mov	r2, r3
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	431a      	orrs	r2, r3
 8002076:	7a3b      	ldrb	r3, [r7, #8]
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0020 	add.w	r0, r3, #32
 80020a2:	f107 020b 	add.w	r2, r7, #11
 80020a6:	2300      	movs	r3, #0
 80020a8:	2113      	movs	r1, #19
 80020aa:	f000 fe89 	bl	8002dc0 <st7735_write_reg>
 80020ae:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80020b0:	210a      	movs	r1, #10
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fe57 	bl	8002d66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0020 	add.w	r0, r3, #32
 80020be:	f107 020b 	add.w	r2, r7, #11
 80020c2:	2300      	movs	r3, #0
 80020c4:	2129      	movs	r1, #41	; 0x29
 80020c6:	f000 fe7b 	bl	8002dc0 <st7735_write_reg>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80020d2:	210a      	movs	r1, #10
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fe46 	bl	8002d66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f103 0020 	add.w	r0, r3, #32
 80020e0:	f107 020b 	add.w	r2, r7, #11
 80020e4:	2300      	movs	r3, #0
 80020e6:	2136      	movs	r1, #54	; 0x36
 80020e8:	f000 fe6a 	bl	8002dc0 <st7735_write_reg>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <ST7735_DisplayOn+0xc0>)
 80020f6:	7b1b      	ldrb	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <ST7735_DisplayOn+0xc0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <ST7735_DisplayOn+0xc4>)
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e006      	b.n	8002120 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <ST7735_DisplayOn+0xc0>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <ST7735_DisplayOn+0xc4>)
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800211e:	b2db      	uxtb	r3, r3
 8002120:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3320      	adds	r3, #32
 8002126:	f107 010b 	add.w	r1, r7, #11
 800212a:	2201      	movs	r2, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fe5c 	bl	8002dea <st7735_send_data>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2400025c 	.word	0x2400025c
 8002154:	24000078 	.word	0x24000078

08002158 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0020 	add.w	r0, r3, #32
 800216a:	f107 020b 	add.w	r2, r7, #11
 800216e:	2300      	movs	r3, #0
 8002170:	2113      	movs	r1, #19
 8002172:	f000 fe25 	bl	8002dc0 <st7735_write_reg>
 8002176:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002178:	210a      	movs	r1, #10
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fdf3 	bl	8002d66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0020 	add.w	r0, r3, #32
 8002186:	f107 020b 	add.w	r2, r7, #11
 800218a:	2300      	movs	r3, #0
 800218c:	2128      	movs	r1, #40	; 0x28
 800218e:	f000 fe17 	bl	8002dc0 <st7735_write_reg>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800219a:	210a      	movs	r1, #10
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fde2 	bl	8002d66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 0020 	add.w	r0, r3, #32
 80021a8:	f107 020b 	add.w	r2, r7, #11
 80021ac:	2300      	movs	r3, #0
 80021ae:	2136      	movs	r1, #54	; 0x36
 80021b0:	f000 fe06 	bl	8002dc0 <st7735_write_reg>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <ST7735_DisplayOff+0xc0>)
 80021be:	7b1b      	ldrb	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <ST7735_DisplayOff+0xc0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <ST7735_DisplayOff+0xc4>)
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e006      	b.n	80021e8 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <ST7735_DisplayOff+0xc0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <ST7735_DisplayOff+0xc4>)
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3320      	adds	r3, #32
 80021ee:	f107 010b 	add.w	r1, r7, #11
 80021f2:	2201      	movs	r2, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fdf8 	bl	8002dea <st7735_send_data>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2400025c 	.word	0x2400025c
 800221c:	24000078 	.word	0x24000078

08002220 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <ST7735_SetOrientation+0x1a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d119      	bne.n	80022a2 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7b5b      	ldrb	r3, [r3, #13]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <ST7735_SetOrientation+0x114>)
 8002278:	2250      	movs	r2, #80	; 0x50
 800227a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <ST7735_SetOrientation+0x114>)
 800227e:	22a0      	movs	r2, #160	; 0xa0
 8002280:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002282:	e028      	b.n	80022d6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	7b5b      	ldrb	r3, [r3, #13]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <ST7735_SetOrientation+0x40>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7b5b      	ldrb	r3, [r3, #13]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d120      	bne.n	80022d6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <ST7735_SetOrientation+0x114>)
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800229a:	4b33      	ldr	r3, [pc, #204]	; (8002368 <ST7735_SetOrientation+0x114>)
 800229c:	22a0      	movs	r2, #160	; 0xa0
 800229e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80022a0:	e019      	b.n	80022d6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7b5b      	ldrb	r3, [r3, #13]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022ac:	22a0      	movs	r2, #160	; 0xa0
 80022ae:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022b2:	2250      	movs	r2, #80	; 0x50
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	e00f      	b.n	80022d8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b5b      	ldrb	r3, [r3, #13]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <ST7735_SetOrientation+0x74>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7b5b      	ldrb	r3, [r3, #13]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d107      	bne.n	80022d8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022ca:	22a0      	movs	r2, #160	; 0xa0
 80022cc:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	e000      	b.n	80022d8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80022d6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022de:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	7b1a      	ldrb	r2, [r3, #12]
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022e6:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7b5a      	ldrb	r2, [r3, #13]
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022ee:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <ST7735_SetOrientation+0x114>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fbdf 	bl	8002ac4 <ST7735_SetDisplayWindow>
 8002306:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <ST7735_SetOrientation+0x114>)
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <ST7735_SetOrientation+0x114>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <ST7735_SetOrientation+0x118>)
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	b2db      	uxtb	r3, r3
 8002324:	e006      	b.n	8002334 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <ST7735_SetOrientation+0x114>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <ST7735_SetOrientation+0x118>)
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002332:	b2db      	uxtb	r3, r3
 8002334:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0020 	add.w	r0, r3, #32
 800233c:	f107 020b 	add.w	r2, r7, #11
 8002340:	2301      	movs	r3, #1
 8002342:	2136      	movs	r1, #54	; 0x36
 8002344:	f000 fd3c 	bl	8002dc0 <st7735_write_reg>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2400025c 	.word	0x2400025c
 800236c:	24000078 	.word	0x24000078

08002370 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <ST7735_GetOrientation+0x20>)
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	2400025c 	.word	0x2400025c

08002394 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80023a0:	4b59      	ldr	r3, [pc, #356]	; (8002508 <ST7735_SetCursor+0x174>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d821      	bhi.n	80023ec <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80023a8:	4b57      	ldr	r3, [pc, #348]	; (8002508 <ST7735_SetCursor+0x174>)
 80023aa:	7b5b      	ldrb	r3, [r3, #13]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10e      	bne.n	80023ce <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <ST7735_SetCursor+0x174>)
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	331a      	adds	r3, #26
 80023bc:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	e033      	b.n	800242e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3318      	adds	r3, #24
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	e02f      	b.n	800242e <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80023ce:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <ST7735_SetCursor+0x174>)
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d12b      	bne.n	800242e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <ST7735_SetCursor+0x174>)
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d127      	bne.n	800242e <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3302      	adds	r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3301      	adds	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	e020      	b.n	800242e <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <ST7735_SetCursor+0x174>)
 80023ee:	7b5b      	ldrb	r3, [r3, #13]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10e      	bne.n	8002412 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <ST7735_SetCursor+0x174>)
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <ST7735_SetCursor+0x76>
				Xpos += 1;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	331a      	adds	r3, #26
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	e011      	b.n	800242e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3318      	adds	r3, #24
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	e00d      	b.n	800242e <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <ST7735_SetCursor+0x174>)
 8002414:	7b5b      	ldrb	r3, [r3, #13]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d109      	bne.n	800242e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <ST7735_SetCursor+0x174>)
 800241c:	7b1b      	ldrb	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3302      	adds	r3, #2
 800242c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f103 0020 	add.w	r0, r3, #32
 8002434:	f107 0213 	add.w	r2, r7, #19
 8002438:	2300      	movs	r3, #0
 800243a:	212a      	movs	r1, #42	; 0x2a
 800243c:	f000 fcc0 	bl	8002dc0 <st7735_write_reg>
 8002440:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b2db      	uxtb	r3, r3
 8002448:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3320      	adds	r3, #32
 800244e:	f107 0113 	add.w	r1, r7, #19
 8002452:	2201      	movs	r2, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fcc8 	bl	8002dea <st7735_send_data>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4413      	add	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3320      	adds	r3, #32
 800246c:	f107 0113 	add.w	r1, r7, #19
 8002470:	2201      	movs	r2, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fcb9 	bl	8002dea <st7735_send_data>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f103 0020 	add.w	r0, r3, #32
 8002486:	f107 0213 	add.w	r2, r7, #19
 800248a:	2300      	movs	r3, #0
 800248c:	212b      	movs	r1, #43	; 0x2b
 800248e:	f000 fc97 	bl	8002dc0 <st7735_write_reg>
 8002492:	4602      	mov	r2, r0
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3320      	adds	r3, #32
 80024a6:	f107 0113 	add.w	r1, r7, #19
 80024aa:	2201      	movs	r2, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fc9c 	bl	8002dea <st7735_send_data>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3320      	adds	r3, #32
 80024c4:	f107 0113 	add.w	r1, r7, #19
 80024c8:	2201      	movs	r2, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fc8d 	bl	8002dea <st7735_send_data>
 80024d0:	4602      	mov	r2, r0
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4413      	add	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f103 0020 	add.w	r0, r3, #32
 80024de:	f107 0213 	add.w	r2, r7, #19
 80024e2:	2300      	movs	r3, #0
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	f000 fc6b 	bl	8002dc0 <st7735_write_reg>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4413      	add	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80024fe:	697b      	ldr	r3, [r7, #20]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2400025c 	.word	0x2400025c

0800250c <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b090      	sub	sp, #64	; 0x40
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	330a      	adds	r3, #10
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	330b      	adds	r3, #11
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	441a      	add	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	441a      	add	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	330d      	adds	r3, #13
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4413      	add	r3, r2
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3312      	adds	r3, #18
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3313      	adds	r3, #19
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	441a      	add	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	441a      	add	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3315      	adds	r3, #21
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	4413      	add	r3, r2
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3316      	adds	r3, #22
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	3317      	adds	r3, #23
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	441a      	add	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3318      	adds	r3, #24
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	441a      	add	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3319      	adds	r3, #25
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	4413      	add	r3, r2
 8002598:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	3302      	adds	r3, #2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3303      	adds	r3, #3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	441a      	add	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	3304      	adds	r3, #4
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	441a      	add	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3305      	adds	r3, #5
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	4413      	add	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	4413      	add	r3, r2
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80025d2:	4b51      	ldr	r3, [pc, #324]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa6a 	bl	8002ac4 <ST7735_SetDisplayWindow>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
 80025fc:	e087      	b.n	800270e <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 8002600:	7b1b      	ldrb	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002606:	4b44      	ldr	r3, [pc, #272]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a44      	ldr	r2, [pc, #272]	; (800271c <ST7735_DrawBitmap+0x210>)
 800260c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002610:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002612:	f043 0308 	orr.w	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e005      	b.n	8002626 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <ST7735_DrawBitmap+0x210>)
 8002620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002624:	b2db      	uxtb	r3, r3
 8002626:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f103 0020 	add.w	r0, r3, #32
 800262e:	f107 0213 	add.w	r2, r7, #19
 8002632:	2301      	movs	r3, #1
 8002634:	2136      	movs	r1, #54	; 0x36
 8002636:	f000 fbc3 	bl	8002dc0 <st7735_write_reg>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e062      	b.n	800270e <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f7ff fea1 	bl	8002394 <ST7735_SetCursor>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
 800265e:	e056      	b.n	800270e <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3320      	adds	r3, #32
 8002670:	f107 0114 	add.w	r1, r7, #20
 8002674:	2202      	movs	r2, #2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fbb7 	bl	8002dea <st7735_send_data>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002688:	e009      	b.n	800269e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	3302      	adds	r3, #2
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	3302      	adds	r3, #2
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d3e0      	bcc.n	8002660 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80026a0:	7b1b      	ldrb	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <ST7735_DrawBitmap+0x210>)
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e006      	b.n	80026ca <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a16      	ldr	r2, [pc, #88]	; (800271c <ST7735_DrawBitmap+0x210>)
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f103 0020 	add.w	r0, r3, #32
 80026d2:	f107 0213 	add.w	r2, r7, #19
 80026d6:	2301      	movs	r3, #1
 80026d8:	2136      	movs	r1, #54	; 0x36
 80026da:	f000 fb71 	bl	8002dc0 <st7735_write_reg>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ea:	e010      	b.n	800270e <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <ST7735_DrawBitmap+0x20c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f9e1 	bl	8002ac4 <ST7735_SetDisplayWindow>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002710:	4618      	mov	r0, r3
 8002712:	3738      	adds	r7, #56	; 0x38
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2400025c 	.word	0x2400025c
 800271c:	24000078 	.word	0x24000078

08002720 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	441a      	add	r2, r3
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <ST7735_FillRGBRect+0xcc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d806      	bhi.n	8002752 <ST7735_FillRGBRect+0x32>
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	441a      	add	r2, r3
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <ST7735_FillRGBRect+0xcc>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d903      	bls.n	800275a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e042      	b.n	80027e0 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e03b      	b.n	80027d8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	461a      	mov	r2, r3
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fe12 	bl	8002394 <ST7735_SetCursor>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e029      	b.n	80027d2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e013      	b.n	80027ac <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	7811      	ldrb	r1, [r2, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <ST7735_FillRGBRect+0xd0>)
 800278e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	3301      	adds	r3, #1
 800279a:	7811      	ldrb	r1, [r2, #0]
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <ST7735_FillRGBRect+0xd0>)
 800279e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3302      	adds	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3e7      	bcc.n	8002784 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f103 0020 	add.w	r0, r3, #32
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	461a      	mov	r2, r3
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <ST7735_FillRGBRect+0xd0>)
 80027c2:	f000 fb12 	bl	8002dea <st7735_send_data>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	3301      	adds	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3bf      	bcc.n	8002760 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80027e0:	69fb      	ldr	r3, [r7, #28]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2400025c 	.word	0x2400025c
 80027f0:	2400026c 	.word	0x2400026c

080027f4 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	441a      	add	r2, r3
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <ST7735_DrawHLine+0x98>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d903      	bls.n	800281c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e032      	b.n	8002882 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fdb7 	bl	8002394 <ST7735_SetCursor>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e026      	b.n	8002882 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e010      	b.n	800285c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	0a1a      	lsrs	r2, r3, #8
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	b2d1      	uxtb	r1, r2
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <ST7735_DrawHLine+0x9c>)
 8002846:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	3301      	adds	r3, #1
 800284e:	6a3a      	ldr	r2, [r7, #32]
 8002850:	b2d1      	uxtb	r1, r2
 8002852:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <ST7735_DrawHLine+0x9c>)
 8002854:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	3301      	adds	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3ea      	bcc.n	800283a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f103 0020 	add.w	r0, r3, #32
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	461a      	mov	r2, r3
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <ST7735_DrawHLine+0x9c>)
 8002872:	f000 faba 	bl	8002dea <st7735_send_data>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002882:	697b      	ldr	r3, [r7, #20]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2400025c 	.word	0x2400025c
 8002890:	240004ec 	.word	0x240004ec

08002894 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	441a      	add	r2, r3
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <ST7735_DrawVLine+0x64>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d903      	bls.n	80028bc <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e018      	b.n	80028ee <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	e011      	b.n	80028e6 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	441a      	add	r2, r3
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f841 	bl	8002954 <ST7735_SetPixel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	617b      	str	r3, [r7, #20]
        break;
 80028de:	e006      	b.n	80028ee <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3301      	adds	r3, #1
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3e9      	bcc.n	80028c2 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 80028ee:	697b      	ldr	r3, [r7, #20]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2400025c 	.word	0x2400025c

080028fc <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e014      	b.n	8002942 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff66 	bl	80027f4 <ST7735_DrawHLine>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	61fb      	str	r3, [r7, #28]
      break;
 8002934:	e009      	b.n	800294a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	3301      	adds	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	429a      	cmp	r2, r3
 8002948:	d3e6      	bcc.n	8002918 <ST7735_FillRect+0x1c>
  }

  return ret;
 800294a:	69fb      	ldr	r3, [r7, #28]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29a      	uxth	r2, r3
 8002976:	8a7b      	ldrh	r3, [r7, #18]
 8002978:	4313      	orrs	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <ST7735_SetPixel+0x84>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d204      	bcs.n	8002992 <ST7735_SetPixel+0x3e>
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <ST7735_SetPixel+0x84>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d303      	bcc.n	800299a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e019      	b.n	80029ce <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fcf8 	bl	8002394 <ST7735_SetCursor>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00d      	b.n	80029ce <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3320      	adds	r3, #32
 80029b6:	f107 0112 	add.w	r1, r7, #18
 80029ba:	2202      	movs	r2, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa14 	bl	8002dea <st7735_send_data>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80029ce:	697b      	ldr	r3, [r7, #20]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2400025c 	.word	0x2400025c

080029dc <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fcd0 	bl	8002394 <ST7735_SetCursor>
 80029f4:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3320      	adds	r3, #32
 80029fa:	f107 0211 	add.w	r2, r7, #17
 80029fe:	212e      	movs	r1, #46	; 0x2e
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f9ca 	bl	8002d9a <st7735_read_reg>
 8002a06:	4602      	mov	r2, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3320      	adds	r3, #32
 8002a12:	f107 0111 	add.w	r1, r7, #17
 8002a16:	2201      	movs	r2, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f9f8 	bl	8002e0e <st7735_recv_data>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4413      	add	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3320      	adds	r3, #32
 8002a2a:	f107 0113 	add.w	r1, r7, #19
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f9ec 	bl	8002e0e <st7735_recv_data>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3320      	adds	r3, #32
 8002a42:	f107 0112 	add.w	r1, r7, #18
 8002a46:	2201      	movs	r2, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f9e0 	bl	8002e0e <st7735_recv_data>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4413      	add	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	7cbb      	ldrb	r3, [r7, #18]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	441a      	add	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002a70:	697b      	ldr	r3, [r7, #20]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <ST7735_GetXSize+0x20>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	2400025c 	.word	0x2400025c

08002aa0 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <ST7735_GetYSize+0x20>)
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	2400025c 	.word	0x2400025c

08002ac4 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d821      	bhi.n	8002b1e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10e      	bne.n	8002b00 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002ae2:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002ae4:	7b1b      	ldrb	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	331a      	adds	r3, #26
 8002aee:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3301      	adds	r3, #1
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e036      	b.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3318      	adds	r3, #24
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	e032      	b.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002b00:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b02:	7b5b      	ldrb	r3, [r3, #13]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d12e      	bne.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002b08:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d12a      	bne.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	3302      	adds	r3, #2
 8002b14:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e023      	b.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b20:	7b5b      	ldrb	r3, [r3, #13]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d111      	bne.n	8002b4a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002b26:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b28:	7b1b      	ldrb	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	331a      	adds	r3, #26
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	e014      	b.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3318      	adds	r3, #24
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	e00d      	b.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b4c:	7b5b      	ldrb	r3, [r3, #13]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d109      	bne.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002b52:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <ST7735_SetDisplayWindow+0x204>)
 8002b54:	7b1b      	ldrb	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3302      	adds	r3, #2
 8002b64:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f103 0020 	add.w	r0, r3, #32
 8002b6c:	f107 0213 	add.w	r2, r7, #19
 8002b70:	2300      	movs	r3, #0
 8002b72:	212a      	movs	r1, #42	; 0x2a
 8002b74:	f000 f924 	bl	8002dc0 <st7735_write_reg>
 8002b78:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3320      	adds	r3, #32
 8002b86:	f107 0113 	add.w	r1, r7, #19
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f92c 	bl	8002dea <st7735_send_data>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	f107 0113 	add.w	r1, r7, #19
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f91d 	bl	8002dea <st7735_send_data>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	f107 0113 	add.w	r1, r7, #19
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f90a 	bl	8002dea <st7735_send_data>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3320      	adds	r3, #32
 8002bf4:	f107 0113 	add.w	r1, r7, #19
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f8f5 	bl	8002dea <st7735_send_data>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f103 0020 	add.w	r0, r3, #32
 8002c0e:	f107 0213 	add.w	r2, r7, #19
 8002c12:	2300      	movs	r3, #0
 8002c14:	212b      	movs	r1, #43	; 0x2b
 8002c16:	f000 f8d3 	bl	8002dc0 <st7735_write_reg>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3320      	adds	r3, #32
 8002c2e:	f107 0113 	add.w	r1, r7, #19
 8002c32:	2201      	movs	r2, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f8d8 	bl	8002dea <st7735_send_data>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	f107 0113 	add.w	r1, r7, #19
 8002c50:	2201      	movs	r2, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f8c9 	bl	8002dea <st7735_send_data>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	3b01      	subs	r3, #1
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3320      	adds	r3, #32
 8002c72:	f107 0113 	add.w	r1, r7, #19
 8002c76:	2201      	movs	r2, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f8b6 	bl	8002dea <st7735_send_data>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	4413      	add	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3320      	adds	r3, #32
 8002c9c:	f107 0113 	add.w	r1, r7, #19
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8a1 	bl	8002dea <st7735_send_data>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002cbc:	697b      	ldr	r3, [r7, #20]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2400025c 	.word	0x2400025c

08002ccc <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	7afa      	ldrb	r2, [r7, #11]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4798      	blx	r3
 8002cea:	4603      	mov	r3, r0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	7af8      	ldrb	r0, [r7, #11]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	4798      	blx	r3
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68b8      	ldr	r0, [r7, #8]
 8002d5a:	4798      	blx	r3
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002d7a:	bf00      	nop
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4798      	blx	r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f5      	bhi.n	8002d7c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	460b      	mov	r3, r1
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	6910      	ldr	r0, [r2, #16]
 8002db0:	7af9      	ldrb	r1, [r7, #11]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4798      	blx	r3
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681c      	ldr	r4, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6918      	ldr	r0, [r3, #16]
 8002dd8:	7af9      	ldrb	r1, [r7, #11]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	47a0      	blx	r4
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6910      	ldr	r0, [r2, #16]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4798      	blx	r3
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6910      	ldr	r0, [r2, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	4798      	blx	r3
 8002e28:	4603      	mov	r3, r0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f000 f97c 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e40:	f001 f9e8 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_Init+0x68>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	4913      	ldr	r1, [pc, #76]	; (8002ea0 <HAL_Init+0x6c>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_Init+0x68>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_Init+0x6c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_Init+0x70>)
 8002e76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_Init+0x74>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f814 	bl	8002eac <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e002      	b.n	8002e94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8e:	f7fd fd75 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	080082e0 	.word	0x080082e0
 8002ea4:	24000004 	.word	0x24000004
 8002ea8:	24000000 	.word	0x24000000

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_InitTick+0x60>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e021      	b.n	8002f04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <HAL_InitTick+0x64>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_InitTick+0x60>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f953 	bl	8003182 <HAL_SYSTICK_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00e      	b.n	8002f04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b0f      	cmp	r3, #15
 8002eea:	d80a      	bhi.n	8002f02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eec:	2200      	movs	r2, #0
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f000 f92b 	bl	800314e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <HAL_InitTick+0x68>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	2400009c 	.word	0x2400009c
 8002f10:	24000000 	.word	0x24000000
 8002f14:	24000098 	.word	0x24000098

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2400009c 	.word	0x2400009c
 8002f3c:	2400076c 	.word	0x2400076c

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2400076c 	.word	0x2400076c

08002f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff ffee 	bl	8002f40 <HAL_GetTick>
 8002f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d005      	beq.n	8002f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_Delay+0x44>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f7e:	bf00      	nop
 8002f80:	f7ff ffde 	bl	8002f40 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f7      	bhi.n	8002f80 <HAL_Delay+0x28>
  {
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2400009c 	.word	0x2400009c

08002fa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_GetREVID+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	5c001000 	.word	0x5c001000

08002fb8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_GetDEVID+0x18>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	5c001000 	.word	0x5c001000

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	05fa0000 	.word	0x05fa0000

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff47 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff5e 	bl	800301c <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff90 	bl	800308c <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5f 	bl	8003038 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffb2 	bl	80030f4 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031aa:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <HAL_GPIO_Init+0x234>)
 80031ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ae:	e194      	b.n	80034da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8186 	beq.w	80034d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d005      	beq.n	80031e0 <HAL_GPIO_Init+0x44>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d130      	bne.n	8003242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003216:	2201      	movs	r2, #1
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0201 	and.w	r2, r3, #1
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b03      	cmp	r3, #3
 800324c:	d017      	beq.n	800327e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d123      	bne.n	80032d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0203 	and.w	r2, r3, #3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80e0 	beq.w	80034d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_GPIO_Init+0x238>)
 8003316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800331a:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_GPIO_Init+0x238>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_GPIO_Init+0x238>)
 8003326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_GPIO_Init+0x23c>)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_GPIO_Init+0x240>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d052      	beq.n	8003404 <HAL_GPIO_Init+0x268>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_GPIO_Init+0x244>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d031      	beq.n	80033ca <HAL_GPIO_Init+0x22e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_GPIO_Init+0x248>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02b      	beq.n	80033c6 <HAL_GPIO_Init+0x22a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x24c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d025      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_GPIO_Init+0x250>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01f      	beq.n	80033be <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_GPIO_Init+0x254>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d019      	beq.n	80033ba <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_GPIO_Init+0x258>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_GPIO_Init+0x25c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_GPIO_Init+0x260>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_GPIO_Init+0x264>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_Init+0x20e>
 80033a6:	2309      	movs	r3, #9
 80033a8:	e02d      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033aa:	230a      	movs	r3, #10
 80033ac:	e02b      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033ae:	2308      	movs	r3, #8
 80033b0:	e029      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e027      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e025      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e023      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033be:	2304      	movs	r3, #4
 80033c0:	e021      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e01f      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e01d      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01b      	b.n	8003406 <HAL_GPIO_Init+0x26a>
 80033ce:	bf00      	nop
 80033d0:	58000080 	.word	0x58000080
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58000400 	.word	0x58000400
 80033dc:	58020000 	.word	0x58020000
 80033e0:	58020400 	.word	0x58020400
 80033e4:	58020800 	.word	0x58020800
 80033e8:	58020c00 	.word	0x58020c00
 80033ec:	58021000 	.word	0x58021000
 80033f0:	58021400 	.word	0x58021400
 80033f4:	58021800 	.word	0x58021800
 80033f8:	58021c00 	.word	0x58021c00
 80033fc:	58022000 	.word	0x58022000
 8003400:	58022400 	.word	0x58022400
 8003404:	2300      	movs	r3, #0
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f002 0203 	and.w	r2, r2, #3
 800340c:	0092      	lsls	r2, r2, #2
 800340e:	4093      	lsls	r3, r2
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003416:	4938      	ldr	r1, [pc, #224]	; (80034f8 <HAL_GPIO_Init+0x35c>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800344a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f ae63 	bne.w	80031b0 <HAL_GPIO_Init+0x14>
  }
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	3724      	adds	r7, #36	; 0x24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	58000400 	.word	0x58000400

080034fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e001      	b.n	800351e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003548:	e003      	b.n	8003552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	041a      	lsls	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	58024800 	.word	0x58024800

08003580 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_PWREx_ConfigSupply+0x70>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d00a      	beq.n	80035aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_PWREx_ConfigSupply+0x70>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e01f      	b.n	80035e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e01d      	b.n	80035e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_PWREx_ConfigSupply+0x70>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	490f      	ldr	r1, [pc, #60]	; (80035f0 <HAL_PWREx_ConfigSupply+0x70>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035ba:	f7ff fcc1 	bl	8002f40 <HAL_GetTick>
 80035be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035c0:	e009      	b.n	80035d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035c2:	f7ff fcbd 	bl	8002f40 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d0:	d901      	bls.n	80035d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e007      	b.n	80035e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_PWREx_ConfigSupply+0x70>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e2:	d1ee      	bne.n	80035c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	58024800 	.word	0x58024800

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f000 bc48 	b.w	8003e98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8088 	beq.w	8003726 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003616:	4b99      	ldr	r3, [pc, #612]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003620:	4b96      	ldr	r3, [pc, #600]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	2b10      	cmp	r3, #16
 800362a:	d007      	beq.n	800363c <HAL_RCC_OscConfig+0x48>
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2b18      	cmp	r3, #24
 8003630:	d111      	bne.n	8003656 <HAL_RCC_OscConfig+0x62>
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b8f      	ldr	r3, [pc, #572]	; (800387c <HAL_RCC_OscConfig+0x288>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d06d      	beq.n	8003724 <HAL_RCC_OscConfig+0x130>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d169      	bne.n	8003724 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f000 bc21 	b.w	8003e98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x7a>
 8003660:	4b86      	ldr	r3, [pc, #536]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a85      	ldr	r2, [pc, #532]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e02e      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x9c>
 8003676:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a80      	ldr	r2, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x288>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b7e      	ldr	r3, [pc, #504]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7d      	ldr	r2, [pc, #500]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0xc0>
 800369a:	4b78      	ldr	r3, [pc, #480]	; (800387c <HAL_RCC_OscConfig+0x288>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a77      	ldr	r2, [pc, #476]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b75      	ldr	r3, [pc, #468]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a74      	ldr	r2, [pc, #464]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 80036b4:	4b71      	ldr	r3, [pc, #452]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a70      	ldr	r2, [pc, #448]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b6e      	ldr	r3, [pc, #440]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6d      	ldr	r2, [pc, #436]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff fc34 	bl	8002f40 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7ff fc30 	bl	8002f40 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e3d4      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ee:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xe8>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7ff fc20 	bl	8002f40 <HAL_GetTick>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff fc1c 	bl	8002f40 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e3c0      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x110>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80ca 	beq.w	80038c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003734:	4b51      	ldr	r3, [pc, #324]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800373e:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_RCC_OscConfig+0x166>
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2b18      	cmp	r3, #24
 800374e:	d156      	bne.n	80037fe <HAL_RCC_OscConfig+0x20a>
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d151      	bne.n	80037fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375a:	4b48      	ldr	r3, [pc, #288]	; (800387c <HAL_RCC_OscConfig+0x288>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x17e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e392      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003772:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0219 	bic.w	r2, r3, #25
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	493f      	ldr	r1, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7ff fbdc 	bl	8002f40 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7ff fbd8 	bl	8002f40 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e37c      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	f7ff fbf9 	bl	8002fa0 <HAL_GetREVID>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d817      	bhi.n	80037e8 <HAL_RCC_OscConfig+0x1f4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d108      	bne.n	80037d2 <HAL_RCC_OscConfig+0x1de>
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d0:	e07a      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	031b      	lsls	r3, r3, #12
 80037e0:	4926      	ldr	r1, [pc, #152]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e6:	e06f      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	4921      	ldr	r1, [pc, #132]	; (800387c <HAL_RCC_OscConfig+0x288>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	e064      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d047      	beq.n	8003896 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0219 	bic.w	r2, r3, #25
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	491a      	ldr	r1, [pc, #104]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7ff fb92 	bl	8002f40 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7ff fb8e 	bl	8002f40 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e332      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	f7ff fbaf 	bl	8002fa0 <HAL_GetREVID>
 8003842:	4603      	mov	r3, r0
 8003844:	f241 0203 	movw	r2, #4099	; 0x1003
 8003848:	4293      	cmp	r3, r2
 800384a:	d819      	bhi.n	8003880 <HAL_RCC_OscConfig+0x28c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d108      	bne.n	8003866 <HAL_RCC_OscConfig+0x272>
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_RCC_OscConfig+0x288>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003862:	6053      	str	r3, [r2, #4]
 8003864:	e030      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	031b      	lsls	r3, r3, #12
 8003874:	4901      	ldr	r1, [pc, #4]	; (800387c <HAL_RCC_OscConfig+0x288>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
 800387a:	e025      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
 800387c:	58024400 	.word	0x58024400
 8003880:	4b9a      	ldr	r3, [pc, #616]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	4997      	ldr	r1, [pc, #604]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b95      	ldr	r3, [pc, #596]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a94      	ldr	r2, [pc, #592]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7ff fb4d 	bl	8002f40 <HAL_GetTick>
 80038a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7ff fb49 	bl	8002f40 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e2ed      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038bc:	4b8b      	ldr	r3, [pc, #556]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a9 	beq.w	8003a28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d6:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e0:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_OscConfig+0x308>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b18      	cmp	r3, #24
 80038f0:	d13a      	bne.n	8003968 <HAL_RCC_OscConfig+0x374>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d135      	bne.n	8003968 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038fc:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_OscConfig+0x320>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e2c1      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003914:	f7ff fb44 	bl	8002fa0 <HAL_GetREVID>
 8003918:	4603      	mov	r3, r0
 800391a:	f241 0203 	movw	r2, #4099	; 0x1003
 800391e:	4293      	cmp	r3, r2
 8003920:	d817      	bhi.n	8003952 <HAL_RCC_OscConfig+0x35e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	2b20      	cmp	r3, #32
 8003928:	d108      	bne.n	800393c <HAL_RCC_OscConfig+0x348>
 800392a:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003932:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003938:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800393a:	e075      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800393c:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	069b      	lsls	r3, r3, #26
 800394a:	4968      	ldr	r1, [pc, #416]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003950:	e06a      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003952:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	061b      	lsls	r3, r3, #24
 8003960:	4962      	ldr	r1, [pc, #392]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003966:	e05f      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d042      	beq.n	80039f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003970:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5d      	ldr	r2, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7ff fae0 	bl	8002f40 <HAL_GetTick>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003984:	f7ff fadc 	bl	8002f40 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e280      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003996:	4b55      	ldr	r3, [pc, #340]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a2:	f7ff fafd 	bl	8002fa0 <HAL_GetREVID>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d817      	bhi.n	80039e0 <HAL_RCC_OscConfig+0x3ec>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d108      	bne.n	80039ca <HAL_RCC_OscConfig+0x3d6>
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039c6:	6053      	str	r3, [r2, #4]
 80039c8:	e02e      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	069b      	lsls	r3, r3, #26
 80039d8:	4944      	ldr	r1, [pc, #272]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
 80039de:	e023      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	493f      	ldr	r1, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
 80039f4:	e018      	b.n	8003a28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3c      	ldr	r2, [pc, #240]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7ff fa9d 	bl	8002f40 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a0a:	f7ff fa99 	bl	8002f40 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e23d      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a1c:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d036      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d019      	beq.n	8003a70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7ff fa7a 	bl	8002f40 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a50:	f7ff fa76 	bl	8002f40 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e21a      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x45c>
 8003a6e:	e018      	b.n	8003aa2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7ff fa60 	bl	8002f40 <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a84:	f7ff fa5c 	bl	8002f40 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e200      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d039      	beq.n	8003b22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01c      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ac2:	f7ff fa3d 	bl	8002f40 <HAL_GetTick>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aca:	f7ff fa39 	bl	8002f40 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1dd      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_OscConfig+0x4f8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x4d6>
 8003ae8:	e01b      	b.n	8003b22 <HAL_RCC_OscConfig+0x52e>
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af0:	4b9b      	ldr	r3, [pc, #620]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a9a      	ldr	r2, [pc, #616]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003afc:	f7ff fa20 	bl	8002f40 <HAL_GetTick>
 8003b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b04:	f7ff fa1c 	bl	8002f40 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1c0      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b16:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8081 	beq.w	8003c32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b30:	4b8c      	ldr	r3, [pc, #560]	; (8003d64 <HAL_RCC_OscConfig+0x770>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a8b      	ldr	r2, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x770>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3c:	f7ff fa00 	bl	8002f40 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7ff f9fc 	bl	8002f40 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1a0      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b56:	4b83      	ldr	r3, [pc, #524]	; (8003d64 <HAL_RCC_OscConfig+0x770>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <HAL_RCC_OscConfig+0x584>
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a7c      	ldr	r2, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70
 8003b76:	e02d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x5e0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_OscConfig+0x5a6>
 8003b80:	4b77      	ldr	r3, [pc, #476]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a76      	ldr	r2, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	4b74      	ldr	r3, [pc, #464]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a73      	ldr	r2, [pc, #460]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x5e0>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c8>
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a6b      	ldr	r2, [pc, #428]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x5e0>
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a67      	ldr	r2, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a64      	ldr	r2, [pc, #400]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7ff f9b0 	bl	8002f40 <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7ff f9ac 	bl	8002f40 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e14e      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ee      	beq.n	8003be4 <HAL_RCC_OscConfig+0x5f0>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7ff f99a 	bl	8002f40 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7ff f996 	bl	8002f40 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e138      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ee      	bne.n	8003c10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 812d 	beq.w	8003e96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c3c:	4b48      	ldr	r3, [pc, #288]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c44:	2b18      	cmp	r3, #24
 8003c46:	f000 80bd 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	f040 809e 	bne.w	8003d90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a41      	ldr	r2, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7ff f96e 	bl	8002f40 <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7ff f96a 	bl	8002f40 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e10e      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8a:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <HAL_RCC_OscConfig+0x774>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	4931      	ldr	r1, [pc, #196]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cd0:	4923      	ldr	r1, [pc, #140]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x778>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cee:	00d2      	lsls	r2, r2, #3
 8003cf0:	491b      	ldr	r1, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f023 020c 	bic.w	r2, r3, #12
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4917      	ldr	r1, [pc, #92]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f023 0202 	bic.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	4912      	ldr	r1, [pc, #72]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7ff f8f3 	bl	8002f40 <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d5c:	e011      	b.n	8003d82 <HAL_RCC_OscConfig+0x78e>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
 8003d64:	58024800 	.word	0x58024800
 8003d68:	fffffc0c 	.word	0xfffffc0c
 8003d6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7ff f8e6 	bl	8002f40 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e08a      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x77c>
 8003d8e:	e082      	b.n	8003e96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a42      	ldr	r2, [pc, #264]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7ff f8d0 	bl	8002f40 <HAL_GetTick>
 8003da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7ff f8cc 	bl	8002f40 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e070      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db6:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x7b0>
 8003dc2:	e068      	b.n	8003e96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dca:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0203 	and.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d12a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d122      	bne.n	8003e3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d108      	bne.n	8003e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e02b      	b.n	8003e98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e40:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d01f      	beq.n	8003e96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e62:	f7ff f86d 	bl	8002f40 <HAL_GetTick>
 8003e66:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e68:	bf00      	nop
 8003e6a:	f7ff f869 	bl	8002f40 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d0f9      	beq.n	8003e6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_OscConfig+0x8b0>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e82:	00d2      	lsls	r2, r2, #3
 8003e84:	4906      	ldr	r1, [pc, #24]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <HAL_RCC_OscConfig+0x8ac>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3730      	adds	r7, #48	; 0x30
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	ffff0007 	.word	0xffff0007

08003ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e19c      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b87      	ldr	r3, [pc, #540]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4985      	ldr	r1, [pc, #532]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b83      	ldr	r3, [pc, #524]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e184      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d908      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4975      	ldr	r1, [pc, #468]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b70      	ldr	r3, [pc, #448]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f36:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	496a      	ldr	r1, [pc, #424]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	495e      	ldr	r1, [pc, #376]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d908      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f92:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4953      	ldr	r1, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 020f 	bic.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4947      	ldr	r1, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d055      	beq.n	800408a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4940      	ldr	r1, [pc, #256]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0f6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0ea      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0de      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4925      	ldr	r1, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fe ff71 	bl	8002f40 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	e00a      	b.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004062:	f7fe ff6d 	bl	8002f40 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0be      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	429a      	cmp	r2, r3
 8004088:	d1eb      	bne.n	8004062 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d208      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d214      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	4906      	ldr	r1, [pc, #24]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e086      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
 80040e8:	52002000 	.word	0x52002000
 80040ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800410c:	4b3c      	ldr	r3, [pc, #240]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	4939      	ldr	r1, [pc, #228]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d208      	bcs.n	800414c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	492e      	ldr	r1, [pc, #184]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004148:	4313      	orrs	r3, r2
 800414a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004164:	429a      	cmp	r2, r3
 8004166:	d208      	bcs.n	800417a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004176:	4313      	orrs	r3, r2
 8004178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004192:	429a      	cmp	r2, r3
 8004194:	d208      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4917      	ldr	r1, [pc, #92]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041a8:	f000 f834 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	4912      	ldr	r1, [pc, #72]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x360>)
 80041de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x364>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x368>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fe5e 	bl	8002eac <HAL_InitTick>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	080082e0 	.word	0x080082e0
 8004208:	24000004 	.word	0x24000004
 800420c:	24000000 	.word	0x24000000
 8004210:	24000098 	.word	0x24000098

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421a:	4bb3      	ldr	r3, [pc, #716]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	2b18      	cmp	r3, #24
 8004224:	f200 8155 	bhi.w	80044d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004295 	.word	0x08004295
 8004234:	080044d3 	.word	0x080044d3
 8004238:	080044d3 	.word	0x080044d3
 800423c:	080044d3 	.word	0x080044d3
 8004240:	080044d3 	.word	0x080044d3
 8004244:	080044d3 	.word	0x080044d3
 8004248:	080044d3 	.word	0x080044d3
 800424c:	080044d3 	.word	0x080044d3
 8004250:	080042bb 	.word	0x080042bb
 8004254:	080044d3 	.word	0x080044d3
 8004258:	080044d3 	.word	0x080044d3
 800425c:	080044d3 	.word	0x080044d3
 8004260:	080044d3 	.word	0x080044d3
 8004264:	080044d3 	.word	0x080044d3
 8004268:	080044d3 	.word	0x080044d3
 800426c:	080044d3 	.word	0x080044d3
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080044d3 	.word	0x080044d3
 8004278:	080044d3 	.word	0x080044d3
 800427c:	080044d3 	.word	0x080044d3
 8004280:	080044d3 	.word	0x080044d3
 8004284:	080044d3 	.word	0x080044d3
 8004288:	080044d3 	.word	0x080044d3
 800428c:	080044d3 	.word	0x080044d3
 8004290:	080042c7 	.word	0x080042c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004294:	4b94      	ldr	r3, [pc, #592]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a0:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a90      	ldr	r2, [pc, #576]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042b2:	e111      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042b4:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b6:	61bb      	str	r3, [r7, #24]
      break;
 80042b8:	e10e      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042ba:	4b8d      	ldr	r3, [pc, #564]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042bc:	61bb      	str	r3, [r7, #24]
      break;
 80042be:	e10b      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042c0:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042c2:	61bb      	str	r3, [r7, #24]
      break;
 80042c4:	e108      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042d0:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042dc:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042e6:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	08db      	lsrs	r3, r3, #3
 80042ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80e1 	beq.w	80044cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f000 8083 	beq.w	8004418 <HAL_RCC_GetSysClockFreq+0x204>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f200 80a1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x248>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x114>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d056      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004326:	e099      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800438e:	e087      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043d2:	e065      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b40      	ldr	r3, [pc, #256]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004416:	e043      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800445a:	e021      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800449e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	3301      	adds	r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c4:	ee17 3a90 	vmov	r3, s15
 80044c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044d4:	61bb      	str	r3, [r7, #24]
      break;
 80044d6:	bf00      	nop
  }

  return sysclockfreq;
 80044d8:	69bb      	ldr	r3, [r7, #24]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	03d09000 	.word	0x03d09000
 80044f0:	003d0900 	.word	0x003d0900
 80044f4:	017d7840 	.word	0x017d7840
 80044f8:	46000000 	.word	0x46000000
 80044fc:	4c742400 	.word	0x4c742400
 8004500:	4a742400 	.word	0x4a742400
 8004504:	4bbebc20 	.word	0x4bbebc20

08004508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b0ca      	sub	sp, #296	; 0x128
 800450e:	af00      	add	r7, sp, #0
 8004510:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004514:	2300      	movs	r3, #0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800452c:	2500      	movs	r5, #0
 800452e:	ea54 0305 	orrs.w	r3, r4, r5
 8004532:	d049      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800453e:	d02f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004540:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004544:	d828      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800454a:	d01a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800454c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004550:	d822      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d007      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800455c:	e01c      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455e:	4bb8      	ldr	r3, [pc, #736]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	4ab7      	ldr	r2, [pc, #732]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800456a:	e01a      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004570:	3308      	adds	r3, #8
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f9d1 	bl	800591c <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	3328      	adds	r3, #40	; 0x28
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fa78 	bl	8005a80 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045aa:	4ba5      	ldr	r3, [pc, #660]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	4aa1      	ldr	r2, [pc, #644]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6513      	str	r3, [r2, #80]	; 0x50
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80045d4:	f04f 0900 	mov.w	r9, #0
 80045d8:	ea58 0309 	orrs.w	r3, r8, r9
 80045dc:	d047      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d82a      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004605 	.word	0x08004605
 80045f4:	08004613 	.word	0x08004613
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004647 	.word	0x08004647
 8004600:	08004647 	.word	0x08004647
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004604:	4b8e      	ldr	r3, [pc, #568]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a8d      	ldr	r2, [pc, #564]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004610:	e01a      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	3308      	adds	r3, #8
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f97e 	bl	800591c <RCCEx_PLL2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004626:	e00f      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462c:	3328      	adds	r3, #40	; 0x28
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f001 fa25 	bl	8005a80 <RCCEx_PLL3_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463c:	e004      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004650:	4b7b      	ldr	r3, [pc, #492]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	f023 0107 	bic.w	r1, r3, #7
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	4a78      	ldr	r2, [pc, #480]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6513      	str	r3, [r2, #80]	; 0x50
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800467a:	f04f 0b00 	mov.w	fp, #0
 800467e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004682:	d04c      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d030      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004694:	d829      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004696:	2bc0      	cmp	r3, #192	; 0xc0
 8004698:	d02d      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800469a:	2bc0      	cmp	r3, #192	; 0xc0
 800469c:	d825      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d018      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d821      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d007      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046ae:	e01c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a62      	ldr	r2, [pc, #392]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046bc:	e01c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	3308      	adds	r3, #8
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f928 	bl	800591c <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	3328      	adds	r3, #40	; 0x28
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f9cf 	bl	8005a80 <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004700:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004704:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004710:	430b      	orrs	r3, r1
 8004712:	6513      	str	r3, [r2, #80]	; 0x50
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800472a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004734:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d053      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800474a:	d035      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800474c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004750:	d82e      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004752:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004756:	d031      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004758:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800475c:	d828      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800475e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004762:	d01a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004768:	d822      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800476e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004772:	d007      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004774:	e01c      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004776:	4b32      	ldr	r3, [pc, #200]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	4a31      	ldr	r2, [pc, #196]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800477c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004782:	e01c      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	3308      	adds	r3, #8
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f001 f8c5 	bl	800591c <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004798:	e011      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479e:	3328      	adds	r3, #40	; 0x28
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 f96c 	bl	8005a80 <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ae:	e006      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047c6:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047d6:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
 80047dc:	e003      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80047f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d056      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800480e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004812:	d038      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004818:	d831      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800481a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800481e:	d034      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004820:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004824:	d82b      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482a:	d01d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800482c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004830:	d825      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800483c:	e01f      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004844:	4ba2      	ldr	r3, [pc, #648]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4aa1      	ldr	r2, [pc, #644]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004850:	e01c      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	3308      	adds	r3, #8
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f85e 	bl	800591c <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004866:	e011      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486c:	3328      	adds	r3, #40	; 0x28
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f905 	bl	8005a80 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800487c:	e006      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004884:	e002      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800488a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004894:	4b8e      	ldr	r3, [pc, #568]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048a4:	4a8a      	ldr	r2, [pc, #552]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d03a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	2b30      	cmp	r3, #48	; 0x30
 80048dc:	d01f      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048de:	2b30      	cmp	r3, #48	; 0x30
 80048e0:	d819      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d00c      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d815      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d019      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d111      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	4a76      	ldr	r2, [pc, #472]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80048fe:	e011      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004904:	3308      	adds	r3, #8
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f001 f807 	bl	800591c <RCCEx_PLL2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800492c:	4b68      	ldr	r3, [pc, #416]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800493c:	430b      	orrs	r3, r1
 800493e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004960:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d051      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004974:	d035      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497a:	d82e      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800497c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004980:	d031      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004982:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004986:	d828      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498c:	d01a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004992:	d822      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499c:	d007      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800499e:	e01c      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049ac:	e01c      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b2:	3308      	adds	r3, #8
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 ffb0 	bl	800591c <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049c2:	e011      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c8:	3328      	adds	r3, #40	; 0x28
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 f857 	bl	8005a80 <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d8:	e006      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049f0:	4b37      	ldr	r3, [pc, #220]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	4a34      	ldr	r2, [pc, #208]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6513      	str	r3, [r2, #80]	; 0x50
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	d056      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a38:	d033      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3e:	d82c      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a44:	d02f      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a4a:	d826      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a50:	d02b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a56:	d820      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5c:	d012      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a62:	d81a      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d022      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6c:	d115      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a72:	3308      	adds	r3, #8
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ff50 	bl	800591c <RCCEx_PLL2_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a82:	e015      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a88:	3328      	adds	r3, #40	; 0x28
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fff7 	bl	8005a80 <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aa0:	e006      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e004      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac6:	4a02      	ldr	r2, [pc, #8]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6513      	str	r3, [r2, #80]	; 0x50
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004af2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	d055      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b08:	d033      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b0e:	d82c      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d02f      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1a:	d826      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b20:	d02b      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b26:	d820      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d012      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b32:	d81a      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d022      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3c:	d115      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	3308      	adds	r3, #8
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fee8 	bl	800591c <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b52:	e015      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b58:	3328      	adds	r3, #40	; 0x28
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 ff8f 	bl	8005a80 <RCCEx_PLL3_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b68:	e00a      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b72:	bf00      	nop
 8004b74:	e004      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b88:	4ba3      	ldr	r3, [pc, #652]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b98:	4a9f      	ldr	r2, [pc, #636]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9e:	e003      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	d037      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd8:	d816      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d111      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be4:	4b8c      	ldr	r3, [pc, #560]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	4a8b      	ldr	r2, [pc, #556]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004bf0:	e00f      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fe8e 	bl	800591c <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c06:	e004      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a7b      	ldr	r2, [pc, #492]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6513      	str	r3, [r2, #80]	; 0x50
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d039      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d81c      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004c79 	.word	0x08004c79
 8004c70:	08004c87 	.word	0x08004c87
 8004c74:	08004ca5 	.word	0x08004ca5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a66      	ldr	r2, [pc, #408]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fe44 	bl	800591c <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cae:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	f023 0103 	bic.w	r1, r3, #3
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	4a56      	ldr	r2, [pc, #344]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc2:	e003      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ce2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f000 809f 	beq.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a4a      	ldr	r2, [pc, #296]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cfa:	f7fe f921 	bl	8002f40 <HAL_GetTick>
 8004cfe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d02:	e00b      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d04:	f7fe f91c 	bl	8002f40 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b64      	cmp	r3, #100	; 0x64
 8004d12:	d903      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ed      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d179      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d30:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d3c:	4053      	eors	r3, r2
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d015      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d46:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d6a:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d118      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fe f8de 	bl	8002f40 <HAL_GetTick>
 8004d84:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d88:	e00d      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fe f8d9 	bl	8002f40 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004da4:	e005      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0eb      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d129      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d10e      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ddc:	091a      	lsrs	r2, r3, #4
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6113      	str	r3, [r2, #16]
 8004de8:	e005      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004df4:	6113      	str	r3, [r2, #16]
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e06:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0c:	e00e      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004e16:	e009      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	58024800 	.word	0x58024800
 8004e20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f002 0301 	and.w	r3, r2, #1
 8004e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f000 8089 	beq.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e54:	2b28      	cmp	r3, #40	; 0x28
 8004e56:	d86b      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004f39 	.word	0x08004f39
 8004e64:	08004f31 	.word	0x08004f31
 8004e68:	08004f31 	.word	0x08004f31
 8004e6c:	08004f31 	.word	0x08004f31
 8004e70:	08004f31 	.word	0x08004f31
 8004e74:	08004f31 	.word	0x08004f31
 8004e78:	08004f31 	.word	0x08004f31
 8004e7c:	08004f31 	.word	0x08004f31
 8004e80:	08004f05 	.word	0x08004f05
 8004e84:	08004f31 	.word	0x08004f31
 8004e88:	08004f31 	.word	0x08004f31
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f31 	.word	0x08004f31
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f31 	.word	0x08004f31
 8004e9c:	08004f31 	.word	0x08004f31
 8004ea0:	08004f1b 	.word	0x08004f1b
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f31 	.word	0x08004f31
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f31 	.word	0x08004f31
 8004eb4:	08004f31 	.word	0x08004f31
 8004eb8:	08004f31 	.word	0x08004f31
 8004ebc:	08004f31 	.word	0x08004f31
 8004ec0:	08004f39 	.word	0x08004f39
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f31 	.word	0x08004f31
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f31 	.word	0x08004f31
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f31 	.word	0x08004f31
 8004f00:	08004f39 	.word	0x08004f39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fd05 	bl	800591c <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1e:	3328      	adds	r3, #40	; 0x28
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fdac 	bl	8005a80 <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f42:	4bbf      	ldr	r3, [pc, #764]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f50:	4abb      	ldr	r2, [pc, #748]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6553      	str	r3, [r2, #84]	; 0x54
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f002 0302 	and.w	r3, r2, #2
 8004f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d041      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d824      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fa9 	.word	0x08004fa9
 8004f98:	08004fbf 	.word	0x08004fbf
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fac:	3308      	adds	r3, #8
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fcb3 	bl	800591c <RCCEx_PLL2_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fbc:	e00f      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc2:	3328      	adds	r3, #40	; 0x28
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd5a 	bl	8005a80 <RCCEx_PLL3_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fe6:	4b96      	ldr	r3, [pc, #600]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f023 0107 	bic.w	r1, r3, #7
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff4:	4a92      	ldr	r2, [pc, #584]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6553      	str	r3, [r2, #84]	; 0x54
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f002 0304 	and.w	r3, r2, #4
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	2300      	movs	r3, #0
 8005016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800501a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d044      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502c:	2b05      	cmp	r3, #5
 800502e:	d825      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	08005085 	.word	0x08005085
 800503c:	08005051 	.word	0x08005051
 8005040:	08005067 	.word	0x08005067
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	3308      	adds	r3, #8
 8005056:	2101      	movs	r1, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fc5f 	bl	800591c <RCCEx_PLL2_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005064:	e00f      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506a:	3328      	adds	r3, #40	; 0x28
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fd06 	bl	8005a80 <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800507a:	e004      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005082:	e000      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800508e:	4b6c      	ldr	r3, [pc, #432]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f023 0107 	bic.w	r1, r3, #7
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509e:	4a68      	ldr	r2, [pc, #416]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6593      	str	r3, [r2, #88]	; 0x58
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f002 0320 	and.w	r3, r2, #32
 80050ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050c8:	460b      	mov	r3, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	d055      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050da:	d033      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80050dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e0:	d82c      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d02f      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d826      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050f2:	d02b      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80050f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050f8:	d820      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fe:	d012      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005104:	d81a      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d022      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510e:	d115      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	3308      	adds	r3, #8
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fbff 	bl	800591c <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005124:	e015      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512a:	3328      	adds	r3, #40	; 0x28
 800512c:	2102      	movs	r1, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fca6 	bl	8005a80 <RCCEx_PLL3_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800513a:	e00a      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005142:	e006      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005144:	bf00      	nop
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6553      	str	r3, [r2, #84]	; 0x54
 8005170:	e003      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800518a:	2300      	movs	r3, #0
 800518c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005190:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d058      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800519a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051a6:	d033      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ac:	d82c      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d02f      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b8:	d826      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051be:	d02b      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c4:	d820      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ca:	d012      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d0:	d81a      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d022      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d115      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e0:	3308      	adds	r3, #8
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb99 	bl	800591c <RCCEx_PLL2_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051f0:	e015      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f6:	3328      	adds	r3, #40	; 0x28
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fc40 	bl	8005a80 <RCCEx_PLL3_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005206:	e00a      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800520e:	e006      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005210:	bf00      	nop
 8005212:	e004      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005214:	bf00      	nop
 8005216:	e002      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005218:	bf00      	nop
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800521c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10e      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005236:	4a02      	ldr	r2, [pc, #8]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005238:	430b      	orrs	r3, r1
 800523a:	6593      	str	r3, [r2, #88]	; 0x58
 800523c:	e006      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800525c:	2300      	movs	r3, #0
 800525e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005262:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005266:	460b      	mov	r3, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	d055      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800526c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005278:	d033      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800527a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800527e:	d82c      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005284:	d02f      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d826      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800528c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005290:	d02b      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005292:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005296:	d820      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529c:	d012      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800529e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a2:	d81a      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d022      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ac:	d115      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b2:	3308      	adds	r3, #8
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb30 	bl	800591c <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052c2:	e015      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	3328      	adds	r3, #40	; 0x28
 80052ca:	2102      	movs	r1, #2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fbd7 	bl	8005a80 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e2:	bf00      	nop
 80052e4:	e004      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052f8:	4ba1      	ldr	r3, [pc, #644]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005308:	4a9d      	ldr	r2, [pc, #628]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530a:	430b      	orrs	r3, r1
 800530c:	6593      	str	r3, [r2, #88]	; 0x58
 800530e:	e003      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f002 0308 	and.w	r3, r2, #8
 8005324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005328:	2300      	movs	r3, #0
 800532a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800532e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005332:	460b      	mov	r3, r1
 8005334:	4313      	orrs	r3, r2
 8005336:	d01e      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d10c      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534a:	3328      	adds	r3, #40	; 0x28
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fb96 	bl	8005a80 <RCCEx_PLL3_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005360:	4b87      	ldr	r3, [pc, #540]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005370:	4a83      	ldr	r2, [pc, #524]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005372:	430b      	orrs	r3, r1
 8005374:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f002 0310 	and.w	r3, r2, #16
 8005382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800538c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d01e      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d10c      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	2102      	movs	r1, #2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fb67 	bl	8005a80 <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053be:	4b70      	ldr	r3, [pc, #448]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ce:	4a6c      	ldr	r2, [pc, #432]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80053e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053ee:	460b      	mov	r3, r1
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d03e      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005400:	d022      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005406:	d81b      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d00b      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	3308      	adds	r3, #8
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fa7d 	bl	800591c <RCCEx_PLL2_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005428:	e00f      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	3328      	adds	r3, #40	; 0x28
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fb24 	bl	8005a80 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800543e:	e004      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10b      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005452:	4b4b      	ldr	r3, [pc, #300]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005462:	4a47      	ldr	r2, [pc, #284]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005464:	430b      	orrs	r3, r1
 8005466:	6593      	str	r3, [r2, #88]	; 0x58
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800547e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005480:	2300      	movs	r3, #0
 8005482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005484:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d03b      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800549a:	d01f      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800549c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054a0:	d818      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a6:	d003      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ac:	d007      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054ae:	e011      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a32      	ldr	r2, [pc, #200]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054bc:	e00f      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	3328      	adds	r3, #40	; 0x28
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fada 	bl	8005a80 <RCCEx_PLL3_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054d2:	e004      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80054dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6553      	str	r3, [r2, #84]	; 0x54
 80054fc:	e003      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005512:	673b      	str	r3, [r7, #112]	; 0x70
 8005514:	2300      	movs	r3, #0
 8005516:	677b      	str	r3, [r7, #116]	; 0x74
 8005518:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800551c:	460b      	mov	r3, r1
 800551e:	4313      	orrs	r3, r2
 8005520:	d034      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d007      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005532:	e011      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005534:	4b12      	ldr	r3, [pc, #72]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4a11      	ldr	r2, [pc, #68]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005540:	e00e      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005546:	3308      	adds	r3, #8
 8005548:	2102      	movs	r1, #2
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f9e6 	bl	800591c <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800555e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10d      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800556a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	4a02      	ldr	r2, [pc, #8]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005578:	430b      	orrs	r3, r1
 800557a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800557c:	e006      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
 800559a:	2300      	movs	r3, #0
 800559c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800559e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ac:	3328      	adds	r3, #40	; 0x28
 80055ae:	2102      	movs	r1, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fa65 	bl	8005a80 <RCCEx_PLL3_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055ce:	663b      	str	r3, [r7, #96]	; 0x60
 80055d0:	2300      	movs	r3, #0
 80055d2:	667b      	str	r3, [r7, #100]	; 0x64
 80055d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055d8:	460b      	mov	r3, r1
 80055da:	4313      	orrs	r3, r2
 80055dc:	d038      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d018      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80055ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f0:	d811      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f6:	d014      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80055f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fc:	d80b      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d106      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005608:	4bc3      	ldr	r3, [pc, #780]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4ac2      	ldr	r2, [pc, #776]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800560e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005614:	e008      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800561c:	e004      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005630:	4bb9      	ldr	r3, [pc, #740]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005640:	4ab5      	ldr	r2, [pc, #724]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005642:	430b      	orrs	r3, r1
 8005644:	6553      	str	r3, [r2, #84]	; 0x54
 8005646:	e003      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800564c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800565c:	65bb      	str	r3, [r7, #88]	; 0x58
 800565e:	2300      	movs	r3, #0
 8005660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005662:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800566c:	4baa      	ldr	r3, [pc, #680]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567a:	4aa7      	ldr	r2, [pc, #668]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800567c:	430b      	orrs	r3, r1
 800567e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
 800568e:	2300      	movs	r3, #0
 8005690:	657b      	str	r3, [r7, #84]	; 0x54
 8005692:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800569c:	4b9e      	ldr	r3, [pc, #632]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80056a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056ac:	4a9a      	ldr	r2, [pc, #616]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056be:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c0:	2300      	movs	r3, #0
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056c8:	460b      	mov	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ce:	4b92      	ldr	r3, [pc, #584]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056dc:	4a8e      	ldr	r2, [pc, #568]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80056ee:	643b      	str	r3, [r7, #64]	; 0x40
 80056f0:	2300      	movs	r3, #0
 80056f2:	647b      	str	r3, [r7, #68]	; 0x44
 80056f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056fe:	4b86      	ldr	r3, [pc, #536]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	4a85      	ldr	r2, [pc, #532]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005708:	6113      	str	r3, [r2, #16]
 800570a:	4b83      	ldr	r3, [pc, #524]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800570c:	6919      	ldr	r1, [r3, #16]
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005716:	4a80      	ldr	r2, [pc, #512]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005718:	430b      	orrs	r3, r1
 800571a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005728:	63bb      	str	r3, [r7, #56]	; 0x38
 800572a:	2300      	movs	r3, #0
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005738:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	4a74      	ldr	r2, [pc, #464]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005748:	430b      	orrs	r3, r1
 800574a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005758:	633b      	str	r3, [r7, #48]	; 0x30
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005768:	4b6b      	ldr	r3, [pc, #428]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005778:	4a67      	ldr	r2, [pc, #412]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577a:	430b      	orrs	r3, r1
 800577c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	2100      	movs	r1, #0
 8005788:	62b9      	str	r1, [r7, #40]	; 0x28
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005790:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005794:	460b      	mov	r3, r1
 8005796:	4313      	orrs	r3, r2
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579e:	3308      	adds	r3, #8
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f8ba 	bl	800591c <RCCEx_PLL2_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	2100      	movs	r1, #0
 80057c8:	6239      	str	r1, [r7, #32]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d011      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057de:	3308      	adds	r3, #8
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f89a 	bl	800591c <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	2100      	movs	r1, #0
 8005808:	61b9      	str	r1, [r7, #24]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005814:	460b      	mov	r3, r1
 8005816:	4313      	orrs	r3, r2
 8005818:	d011      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581e:	3308      	adds	r3, #8
 8005820:	2102      	movs	r1, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f87a 	bl	800591c <RCCEx_PLL2_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800582e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800583a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	2100      	movs	r1, #0
 8005848:	6139      	str	r1, [r7, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005854:	460b      	mov	r3, r1
 8005856:	4313      	orrs	r3, r2
 8005858:	d011      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585e:	3328      	adds	r3, #40	; 0x28
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f90c 	bl	8005a80 <RCCEx_PLL3_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800587a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	2100      	movs	r1, #0
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	d011      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589e:	3328      	adds	r3, #40	; 0x28
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f8ec 	bl	8005a80 <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	2100      	movs	r1, #0
 80058c8:	6039      	str	r1, [r7, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d011      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058de:	3328      	adds	r3, #40	; 0x28
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f8cc 	bl	8005a80 <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80058fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
}
 800590c:	4618      	mov	r0, r3
 800590e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005912:	46bd      	mov	sp, r7
 8005914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005918:	58024400 	.word	0x58024400

0800591c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800592a:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d101      	bne.n	800593a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e099      	b.n	8005a6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800593a:	4b4f      	ldr	r3, [pc, #316]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4e      	ldr	r2, [pc, #312]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005946:	f7fd fafb 	bl	8002f40 <HAL_GetTick>
 800594a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800594c:	e008      	b.n	8005960 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800594e:	f7fd faf7 	bl	8002f40 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e086      	b.n	8005a6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005960:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800596c:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	493f      	ldr	r1, [pc, #252]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	628b      	str	r3, [r1, #40]	; 0x28
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	3b01      	subs	r3, #1
 8005986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	3b01      	subs	r3, #1
 8005990:	025b      	lsls	r3, r3, #9
 8005992:	b29b      	uxth	r3, r3
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	3b01      	subs	r3, #1
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059b0:	4931      	ldr	r1, [pc, #196]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	492d      	ldr	r1, [pc, #180]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059c8:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f023 0220 	bic.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	4928      	ldr	r1, [pc, #160]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a26      	ldr	r2, [pc, #152]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059e0:	f023 0310 	bic.w	r3, r3, #16
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <RCCEx_PLL2_Config+0x160>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	69d2      	ldr	r2, [r2, #28]
 80059f2:	00d2      	lsls	r2, r2, #3
 80059f4:	4920      	ldr	r1, [pc, #128]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059fa:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a00:	f043 0310 	orr.w	r3, r3, #16
 8005a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a18:	e00f      	b.n	8005a3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a20:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a2c:	e005      	b.n	8005a3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a2e:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a46:	f7fd fa7b 	bl	8002f40 <HAL_GetTick>
 8005a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a4c:	e008      	b.n	8005a60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a4e:	f7fd fa77 	bl	8002f40 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <RCCEx_PLL2_Config+0x15c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	ffff0007 	.word	0xffff0007

08005a80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a8e:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d101      	bne.n	8005a9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e099      	b.n	8005bd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a9e:	4b4f      	ldr	r3, [pc, #316]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4e      	ldr	r2, [pc, #312]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aaa:	f7fd fa49 	bl	8002f40 <HAL_GetTick>
 8005aae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ab0:	e008      	b.n	8005ac4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ab2:	f7fd fa45 	bl	8002f40 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e086      	b.n	8005bd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ac4:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ad0:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	493f      	ldr	r1, [pc, #252]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	025b      	lsls	r3, r3, #9
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b14:	4931      	ldr	r1, [pc, #196]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	492d      	ldr	r1, [pc, #180]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	4928      	ldr	r1, [pc, #160]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	4a26      	ldr	r2, [pc, #152]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <RCCEx_PLL3_Config+0x160>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	69d2      	ldr	r2, [r2, #28]
 8005b56:	00d2      	lsls	r2, r2, #3
 8005b58:	4920      	ldr	r1, [pc, #128]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b5e:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b7c:	e00f      	b.n	8005b9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d106      	bne.n	8005b92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b90:	e005      	b.n	8005b9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005baa:	f7fd f9c9 	bl	8002f40 <HAL_GetTick>
 8005bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bb0:	e008      	b.n	8005bc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bb2:	f7fd f9c5 	bl	8002f40 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e006      	b.n	8005bd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <RCCEx_PLL3_Config+0x15c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	ffff0007 	.word	0xffff0007

08005be4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d071      	beq.n	8005cda <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fa fdc4 	bl	8000798 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d050      	beq.n	8005cc8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	22ca      	movs	r2, #202	; 0xca
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2253      	movs	r2, #83	; 0x53
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa4a 	bl	80060d0 <RTC_EnterInitMode>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d124      	bne.n	8005c90 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6899      	ldr	r1, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <HAL_RTC_Init+0x100>)
 8005c52:	400b      	ands	r3, r1
 8005c54:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6899      	ldr	r1, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0419      	lsls	r1, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa56 	bl	8006138 <RTC_ExitInitMode>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0203 	bic.w	r2, r2, #3
 8005ca4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	22ff      	movs	r2, #255	; 0xff
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc6:	e001      	b.n	8005ccc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	ff8fffbf 	.word	0xff8fffbf

08005ce8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_RTC_SetTime+0x1a>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e089      	b.n	8005e16 <HAL_RTC_SetTime+0x12e>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ca      	movs	r2, #202	; 0xca
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2253      	movs	r2, #83	; 0x53
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f9d4 	bl	80060d0 <RTC_EnterInitMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d161      	bne.n	8005df6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d126      	bne.n	8005d86 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fa2f 	bl	80061b4 <RTC_ByteToBcd2>
 8005d56:	4603      	mov	r3, r0
 8005d58:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fa28 	bl	80061b4 <RTC_ByteToBcd2>
 8005d64:	4603      	mov	r3, r0
 8005d66:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d68:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fa20 	bl	80061b4 <RTC_ByteToBcd2>
 8005d74:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d76:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e018      	b.n	8005db8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005da6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	78db      	ldrb	r3, [r3, #3]
 8005db2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <HAL_RTC_SetTime+0x138>)
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f9a3 	bl	8006138 <RTC_ExitInitMode>
 8005df2:	4603      	mov	r3, r0
 8005df4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	007f7f7f 	.word	0x007f7f7f

08005e24 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <HAL_RTC_GetTime+0xb4>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	0d9b      	lsrs	r3, r3, #22
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f9a9 	bl	80061f4 <RTC_Bcd2ToByte>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f9a0 	bl	80061f4 <RTC_Bcd2ToByte>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	789b      	ldrb	r3, [r3, #2]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 f997 	bl	80061f4 <RTC_Bcd2ToByte>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	007f7f7f 	.word	0x007f7f7f

08005edc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RTC_SetDate+0x1a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e073      	b.n	8005fde <HAL_RTC_SetDate+0x102>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10e      	bne.n	8005f2a <HAL_RTC_SetDate+0x4e>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	f023 0310 	bic.w	r3, r3, #16
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	330a      	adds	r3, #10
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11c      	bne.n	8005f6a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f93d 	bl	80061b4 <RTC_ByteToBcd2>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f936 	bl	80061b4 <RTC_ByteToBcd2>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f4c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	789b      	ldrb	r3, [r3, #2]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f92e 	bl	80061b4 <RTC_ByteToBcd2>
 8005f58:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f5a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e00e      	b.n	8005f88 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f76:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	22ca      	movs	r2, #202	; 0xca
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2253      	movs	r2, #83	; 0x53
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f899 	bl	80060d0 <RTC_EnterInitMode>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <HAL_RTC_SetDate+0x10c>)
 8005fb0:	400b      	ands	r3, r1
 8005fb2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f8bf 	bl	8006138 <RTC_ExitInitMode>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	22ff      	movs	r2, #255	; 0xff
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]


}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	00ffff3f 	.word	0x00ffff3f

08005fec <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b21      	ldr	r3, [pc, #132]	; (8006084 <HAL_RTC_GetDate+0x98>)
 8006000:	4013      	ands	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	0b5b      	lsrs	r3, r3, #13
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11a      	bne.n	8006078 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f8d4 	bl	80061f4 <RTC_Bcd2ToByte>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f8cb 	bl	80061f4 <RTC_Bcd2ToByte>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	789b      	ldrb	r3, [r3, #2]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8c2 	bl	80061f4 <RTC_Bcd2ToByte>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	00ffff3f 	.word	0x00ffff3f

08006088 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <HAL_RTC_WaitForSynchro+0x44>)
 8006096:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8006098:	f7fc ff52 	bl	8002f40 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800609e:	e009      	b.n	80060b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060a0:	f7fc ff4e 	bl	8002f40 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ae:	d901      	bls.n	80060b4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e007      	b.n	80060c4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	0003ff5f 	.word	0x0003ff5f

080060d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d120      	bne.n	800612c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060f4:	f7fc ff24 	bl	8002f40 <HAL_GetTick>
 80060f8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80060fa:	e00d      	b.n	8006118 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80060fc:	f7fc ff20 	bl	8002f40 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d905      	bls.n	8006118 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2203      	movs	r2, #3
 8006114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <RTC_EnterInitMode+0x5c>
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d1e7      	bne.n	80060fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <RTC_ExitInitMode+0x78>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a19      	ldr	r2, [pc, #100]	; (80061b0 <RTC_ExitInitMode+0x78>)
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006150:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <RTC_ExitInitMode+0x78>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10c      	bne.n	8006176 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff93 	bl	8006088 <HAL_RTC_WaitForSynchro>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01e      	beq.n	80061a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	73fb      	strb	r3, [r7, #15]
 8006174:	e017      	b.n	80061a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <RTC_ExitInitMode+0x78>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <RTC_ExitInitMode+0x78>)
 800617c:	f023 0320 	bic.w	r3, r3, #32
 8006180:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff80 	bl	8006088 <HAL_RTC_WaitForSynchro>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2203      	movs	r2, #3
 8006192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <RTC_ExitInitMode+0x78>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	4a04      	ldr	r2, [pc, #16]	; (80061b0 <RTC_ExitInitMode+0x78>)
 80061a0:	f043 0320 	orr.w	r3, r3, #32
 80061a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	58004000 	.word	0x58004000

080061b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80061c6:	e005      	b.n	80061d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	3b0a      	subs	r3, #10
 80061d2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80061d4:	7afb      	ldrb	r3, [r7, #11]
 80061d6:	2b09      	cmp	r3, #9
 80061d8:	d8f6      	bhi.n	80061c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	7afb      	ldrb	r3, [r7, #11]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b2db      	uxtb	r3, r3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	4413      	add	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	4413      	add	r3, r2
 800621a:	b2db      	uxtb	r3, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e10f      	b.n	800645a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a87      	ldr	r2, [pc, #540]	; (8006464 <HAL_SPI_Init+0x23c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00f      	beq.n	800626a <HAL_SPI_Init+0x42>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a86      	ldr	r2, [pc, #536]	; (8006468 <HAL_SPI_Init+0x240>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00a      	beq.n	800626a <HAL_SPI_Init+0x42>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a84      	ldr	r2, [pc, #528]	; (800646c <HAL_SPI_Init+0x244>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d005      	beq.n	800626a <HAL_SPI_Init+0x42>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d901      	bls.n	800626a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e0f7      	b.n	800645a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fd5a 	bl	8006d24 <SPI_GetPacketSize>
 8006270:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a7b      	ldr	r2, [pc, #492]	; (8006464 <HAL_SPI_Init+0x23c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00c      	beq.n	8006296 <HAL_SPI_Init+0x6e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a79      	ldr	r2, [pc, #484]	; (8006468 <HAL_SPI_Init+0x240>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <HAL_SPI_Init+0x6e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a78      	ldr	r2, [pc, #480]	; (800646c <HAL_SPI_Init+0x244>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d002      	beq.n	8006296 <HAL_SPI_Init+0x6e>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b08      	cmp	r3, #8
 8006294:	d811      	bhi.n	80062ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800629a:	4a72      	ldr	r2, [pc, #456]	; (8006464 <HAL_SPI_Init+0x23c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a70      	ldr	r2, [pc, #448]	; (8006468 <HAL_SPI_Init+0x240>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_SPI_Init+0x8c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a6f      	ldr	r2, [pc, #444]	; (800646c <HAL_SPI_Init+0x244>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d104      	bne.n	80062be <HAL_SPI_Init+0x96>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d901      	bls.n	80062be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0cd      	b.n	800645a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fa faea 	bl	80008ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80062fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006304:	d119      	bne.n	800633a <HAL_SPI_Init+0x112>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d103      	bne.n	8006318 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006328:	d107      	bne.n	800633a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006338:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <HAL_SPI_Init+0x13e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b06      	cmp	r3, #6
 800634c:	d90b      	bls.n	8006366 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e007      	b.n	8006376 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	431a      	orrs	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	ea42 0103 	orr.w	r1, r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d6:	ea42 0103 	orr.w	r1, r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d113      	bne.n	8006416 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006400:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006414:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40013000 	.word	0x40013000
 8006468:	40003800 	.word	0x40003800
 800646c:	40003c00 	.word	0x40003c00

08006470 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3320      	adds	r3, #32
 8006486:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_SPI_Transmit+0x2a>
 8006496:	2302      	movs	r3, #2
 8006498:	e1e1      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a2:	f7fc fd4d 	bl	8002f40 <HAL_GetTick>
 80064a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d007      	beq.n	80064c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80064c0:	7efb      	ldrb	r3, [r7, #27]
 80064c2:	e1cc      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_Transmit+0x60>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d107      	bne.n	80064e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80064dc:	7efb      	ldrb	r3, [r7, #27]
 80064de:	e1be      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2203      	movs	r2, #3
 80064e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	88fa      	ldrh	r2, [r7, #6]
 80064fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006530:	d108      	bne.n	8006544 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e009      	b.n	8006558 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006556:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4b96      	ldr	r3, [pc, #600]	; (80067b8 <HAL_SPI_Transmit+0x348>)
 8006560:	4013      	ands	r3, r2
 8006562:	88f9      	ldrh	r1, [r7, #6]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	430b      	orrs	r3, r1
 800656a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006584:	d107      	bne.n	8006596 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2b0f      	cmp	r3, #15
 800659c:	d947      	bls.n	800662e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800659e:	e03f      	b.n	8006620 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d114      	bne.n	80065d8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065d6:	e023      	b.n	8006620 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d8:	f7fc fcb2 	bl	8002f40 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d803      	bhi.n	80065f0 <HAL_SPI_Transmit+0x180>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Transmit+0x186>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d114      	bne.n	8006620 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fac6 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e11e      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1b9      	bne.n	80065a0 <HAL_SPI_Transmit+0x130>
 800662c:	e0f1      	b.n	8006812 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b07      	cmp	r3, #7
 8006634:	f240 80e6 	bls.w	8006804 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006638:	e05d      	b.n	80066f6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d132      	bne.n	80066ae <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d918      	bls.n	8006686 <HAL_SPI_Transmit+0x216>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d014      	beq.n	8006686 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b02      	subs	r3, #2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006684:	e037      	b.n	80066f6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80066ac:	e023      	b.n	80066f6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ae:	f7fc fc47 	bl	8002f40 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d803      	bhi.n	80066c6 <HAL_SPI_Transmit+0x256>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d102      	bne.n	80066cc <HAL_SPI_Transmit+0x25c>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d114      	bne.n	80066f6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fa5b 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e0b3      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d19b      	bne.n	800663a <HAL_SPI_Transmit+0x1ca>
 8006702:	e086      	b.n	8006812 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d154      	bne.n	80067bc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d918      	bls.n	8006750 <HAL_SPI_Transmit+0x2e0>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d914      	bls.n	8006750 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b04      	subs	r3, #4
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800674e:	e059      	b.n	8006804 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d917      	bls.n	800678c <HAL_SPI_Transmit+0x31c>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d013      	beq.n	800678c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	881a      	ldrh	r2, [r3, #0]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006772:	1c9a      	adds	r2, r3, #2
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b02      	subs	r3, #2
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800678a:	e03b      	b.n	8006804 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3320      	adds	r3, #32
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80067b6:	e025      	b.n	8006804 <HAL_SPI_Transmit+0x394>
 80067b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067bc:	f7fc fbc0 	bl	8002f40 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d803      	bhi.n	80067d4 <HAL_SPI_Transmit+0x364>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d102      	bne.n	80067da <HAL_SPI_Transmit+0x36a>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d114      	bne.n	8006804 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f9d4 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e02c      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	f47f af79 	bne.w	8006704 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2200      	movs	r2, #0
 800681a:	2108      	movs	r1, #8
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fa53 	bl	8006cc8 <SPI_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f9a5 	bl	8006b88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800685c:	7efb      	ldrb	r3, [r7, #27]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3330      	adds	r3, #48	; 0x30
 8006882:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_SPI_Receive+0x2a>
 800688e:	2302      	movs	r3, #2
 8006890:	e173      	b.n	8006b7a <HAL_SPI_Receive+0x312>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689a:	f7fc fb51 	bl	8002f40 <HAL_GetTick>
 800689e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d007      	beq.n	80068bc <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
 80068ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80068b8:	7ffb      	ldrb	r3, [r7, #31]
 80068ba:	e15e      	b.n	8006b7a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_Receive+0x60>
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
 80068d6:	e150      	b.n	8006b7a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2204      	movs	r2, #4
 80068dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006928:	d108      	bne.n	800693c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e009      	b.n	8006950 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800694e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4b8b      	ldr	r3, [pc, #556]	; (8006b84 <HAL_SPI_Receive+0x31c>)
 8006958:	4013      	ands	r3, r2
 800695a:	88f9      	ldrh	r1, [r7, #6]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	430b      	orrs	r3, r1
 8006962:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697c:	d107      	bne.n	800698e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2b0f      	cmp	r3, #15
 8006994:	d948      	bls.n	8006a28 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006996:	e040      	b.n	8006a1a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	f248 0308 	movw	r3, #32776	; 0x8008
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d014      	beq.n	80069d2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80069d0:	e023      	b.n	8006a1a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d2:	f7fc fab5 	bl	8002f40 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d803      	bhi.n	80069ea <HAL_SPI_Receive+0x182>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d102      	bne.n	80069f0 <HAL_SPI_Receive+0x188>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d114      	bne.n	8006a1a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f8c9 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e0af      	b.n	8006b7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b8      	bne.n	8006998 <HAL_SPI_Receive+0x130>
 8006a26:	e095      	b.n	8006b54 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b07      	cmp	r3, #7
 8006a2e:	f240 808b 	bls.w	8006b48 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006a32:	e03f      	b.n	8006ab4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d114      	bne.n	8006a6c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	8812      	ldrh	r2, [r2, #0]
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006a6a:	e023      	b.n	8006ab4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a6c:	f7fc fa68 	bl	8002f40 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d803      	bhi.n	8006a84 <HAL_SPI_Receive+0x21c>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_Receive+0x222>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d114      	bne.n	8006ab4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f87c 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e062      	b.n	8006b7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1b9      	bne.n	8006a34 <HAL_SPI_Receive+0x1cc>
 8006ac0:	e048      	b.n	8006b54 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d117      	bne.n	8006b00 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006afe:	e023      	b.n	8006b48 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b00:	f7fc fa1e 	bl	8002f40 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d803      	bhi.n	8006b18 <HAL_SPI_Receive+0x2b0>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Receive+0x2b6>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d114      	bne.n	8006b48 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f832 	bl	8006b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e018      	b.n	8006b7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1b6      	bne.n	8006ac2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f817 	bl	8006b88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	ffff0000 	.word	0xffff0000

08006b88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0210 	orr.w	r2, r2, #16
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6919      	ldr	r1, [r3, #16]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b3c      	ldr	r3, [pc, #240]	; (8006cc4 <SPI_CloseTransfer+0x13c>)
 8006bd4:	400b      	ands	r3, r1
 8006bd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d014      	beq.n	8006c1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00f      	beq.n	8006c1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0220 	orr.w	r2, r2, #32
 8006c1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d014      	beq.n	8006c54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00f      	beq.n	8006c54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c3a:	f043 0204 	orr.w	r2, r3, #4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00f      	beq.n	8006c7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00f      	beq.n	8006ca8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8e:	f043 0208 	orr.w	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	fffffc90 	.word	0xfffffc90

08006cc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cd8:	e010      	b.n	8006cfc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cda:	f7fc f931 	bl	8002f40 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d803      	bhi.n	8006cf2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d102      	bne.n	8006cf8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e00f      	b.n	8006d1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4013      	ands	r3, r2
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d0df      	beq.n	8006cda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3307      	adds	r3, #7
 8006d42:	08db      	lsrs	r3, r3, #3
 8006d44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e049      	b.n	8006e00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7f9 ff8d 	bl	8000ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f000 f949 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e0ff      	b.n	8007026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b14      	cmp	r3, #20
 8006e32:	f200 80f0 	bhi.w	8007016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08007017 	.word	0x08007017
 8006e44:	08007017 	.word	0x08007017
 8006e48:	08007017 	.word	0x08007017
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08007017 	.word	0x08007017
 8006e54:	08007017 	.word	0x08007017
 8006e58:	08007017 	.word	0x08007017
 8006e5c:	08006f13 	.word	0x08006f13
 8006e60:	08007017 	.word	0x08007017
 8006e64:	08007017 	.word	0x08007017
 8006e68:	08007017 	.word	0x08007017
 8006e6c:	08006f53 	.word	0x08006f53
 8006e70:	08007017 	.word	0x08007017
 8006e74:	08007017 	.word	0x08007017
 8006e78:	08007017 	.word	0x08007017
 8006e7c:	08006f95 	.word	0x08006f95
 8006e80:	08007017 	.word	0x08007017
 8006e84:	08007017 	.word	0x08007017
 8006e88:	08007017 	.word	0x08007017
 8006e8c:	08006fd5 	.word	0x08006fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f964 	bl	8007164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6999      	ldr	r1, [r3, #24]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	619a      	str	r2, [r3, #24]
      break;
 8006ece:	e0a5      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f9d4 	bl	8007284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6999      	ldr	r1, [r3, #24]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	021a      	lsls	r2, r3, #8
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	619a      	str	r2, [r3, #24]
      break;
 8006f10:	e084      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fa3d 	bl	8007398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0208 	orr.w	r2, r2, #8
 8006f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0204 	bic.w	r2, r2, #4
 8006f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69d9      	ldr	r1, [r3, #28]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	61da      	str	r2, [r3, #28]
      break;
 8006f50:	e064      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 faa5 	bl	80074a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69d9      	ldr	r1, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	021a      	lsls	r2, r3, #8
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	61da      	str	r2, [r3, #28]
      break;
 8006f92:	e043      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 faee 	bl	800757c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0208 	orr.w	r2, r2, #8
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0204 	bic.w	r2, r2, #4
 8006fbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fd2:	e023      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fb32 	bl	8007644 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	021a      	lsls	r2, r3, #8
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007014:	e002      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
      break;
 800701a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a40      	ldr	r2, [pc, #256]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d00f      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3c      	ldr	r2, [pc, #240]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <TIM_Base_SetConfig+0x120>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d108      	bne.n	8007082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2f      	ldr	r2, [pc, #188]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01f      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d01b      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2c      	ldr	r2, [pc, #176]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d017      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <TIM_Base_SetConfig+0x120>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00f      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <TIM_Base_SetConfig+0x124>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00b      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <TIM_Base_SetConfig+0x128>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <TIM_Base_SetConfig+0x12c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a26      	ldr	r2, [pc, #152]	; (8007160 <TIM_Base_SetConfig+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d108      	bne.n	80070dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a12      	ldr	r2, [pc, #72]	; (8007154 <TIM_Base_SetConfig+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a11      	ldr	r2, [pc, #68]	; (8007158 <TIM_Base_SetConfig+0x128>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <TIM_Base_SetConfig+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <TIM_Base_SetConfig+0x130>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40010400 	.word	0x40010400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4b37      	ldr	r3, [pc, #220]	; (800726c <TIM_OC1_SetConfig+0x108>)
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2d      	ldr	r2, [pc, #180]	; (8007270 <TIM_OC1_SetConfig+0x10c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00f      	beq.n	80071e0 <TIM_OC1_SetConfig+0x7c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2c      	ldr	r2, [pc, #176]	; (8007274 <TIM_OC1_SetConfig+0x110>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00b      	beq.n	80071e0 <TIM_OC1_SetConfig+0x7c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a2b      	ldr	r2, [pc, #172]	; (8007278 <TIM_OC1_SetConfig+0x114>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_OC1_SetConfig+0x7c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a2a      	ldr	r2, [pc, #168]	; (800727c <TIM_OC1_SetConfig+0x118>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_OC1_SetConfig+0x7c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a29      	ldr	r2, [pc, #164]	; (8007280 <TIM_OC1_SetConfig+0x11c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10c      	bne.n	80071fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0308 	bic.w	r3, r3, #8
 80071e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 0304 	bic.w	r3, r3, #4
 80071f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <TIM_OC1_SetConfig+0x10c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00f      	beq.n	8007222 <TIM_OC1_SetConfig+0xbe>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a1b      	ldr	r2, [pc, #108]	; (8007274 <TIM_OC1_SetConfig+0x110>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00b      	beq.n	8007222 <TIM_OC1_SetConfig+0xbe>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a1a      	ldr	r2, [pc, #104]	; (8007278 <TIM_OC1_SetConfig+0x114>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d007      	beq.n	8007222 <TIM_OC1_SetConfig+0xbe>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <TIM_OC1_SetConfig+0x118>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_OC1_SetConfig+0xbe>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a18      	ldr	r2, [pc, #96]	; (8007280 <TIM_OC1_SetConfig+0x11c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d111      	bne.n	8007246 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	fffeff8f 	.word	0xfffeff8f
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400
 8007278:	40014000 	.word	0x40014000
 800727c:	40014400 	.word	0x40014400
 8007280:	40014800 	.word	0x40014800

08007284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f023 0210 	bic.w	r2, r3, #16
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4b34      	ldr	r3, [pc, #208]	; (8007380 <TIM_OC2_SetConfig+0xfc>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0320 	bic.w	r3, r3, #32
 80072ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a29      	ldr	r2, [pc, #164]	; (8007384 <TIM_OC2_SetConfig+0x100>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC2_SetConfig+0x68>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_OC2_SetConfig+0x104>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10d      	bne.n	8007308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1e      	ldr	r2, [pc, #120]	; (8007384 <TIM_OC2_SetConfig+0x100>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00f      	beq.n	8007330 <TIM_OC2_SetConfig+0xac>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <TIM_OC2_SetConfig+0x104>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <TIM_OC2_SetConfig+0xac>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <TIM_OC2_SetConfig+0x108>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <TIM_OC2_SetConfig+0xac>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <TIM_OC2_SetConfig+0x10c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0xac>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <TIM_OC2_SetConfig+0x110>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d113      	bne.n	8007358 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	feff8fff 	.word	0xfeff8fff
 8007384:	40010000 	.word	0x40010000
 8007388:	40010400 	.word	0x40010400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800

08007398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4b33      	ldr	r3, [pc, #204]	; (8007490 <TIM_OC3_SetConfig+0xf8>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a28      	ldr	r2, [pc, #160]	; (8007494 <TIM_OC3_SetConfig+0xfc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_OC3_SetConfig+0x66>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a27      	ldr	r2, [pc, #156]	; (8007498 <TIM_OC3_SetConfig+0x100>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d10d      	bne.n	800741a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <TIM_OC3_SetConfig+0xfc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_OC3_SetConfig+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <TIM_OC3_SetConfig+0x100>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_OC3_SetConfig+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <TIM_OC3_SetConfig+0x104>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_OC3_SetConfig+0xaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <TIM_OC3_SetConfig+0x108>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_OC3_SetConfig+0xaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <TIM_OC3_SetConfig+0x10c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d113      	bne.n	800746a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	621a      	str	r2, [r3, #32]
}
 8007484:	bf00      	nop
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	fffeff8f 	.word	0xfffeff8f
 8007494:	40010000 	.word	0x40010000
 8007498:	40010400 	.word	0x40010400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4b24      	ldr	r3, [pc, #144]	; (8007564 <TIM_OC4_SetConfig+0xbc>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a19      	ldr	r2, [pc, #100]	; (8007568 <TIM_OC4_SetConfig+0xc0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00f      	beq.n	8007528 <TIM_OC4_SetConfig+0x80>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a18      	ldr	r2, [pc, #96]	; (800756c <TIM_OC4_SetConfig+0xc4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00b      	beq.n	8007528 <TIM_OC4_SetConfig+0x80>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a17      	ldr	r2, [pc, #92]	; (8007570 <TIM_OC4_SetConfig+0xc8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_OC4_SetConfig+0x80>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a16      	ldr	r2, [pc, #88]	; (8007574 <TIM_OC4_SetConfig+0xcc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_OC4_SetConfig+0x80>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <TIM_OC4_SetConfig+0xd0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d109      	bne.n	800753c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	019b      	lsls	r3, r3, #6
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	feff8fff 	.word	0xfeff8fff
 8007568:	40010000 	.word	0x40010000
 800756c:	40010400 	.word	0x40010400
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800

0800757c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4b21      	ldr	r3, [pc, #132]	; (800762c <TIM_OC5_SetConfig+0xb0>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <TIM_OC5_SetConfig+0xb4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00f      	beq.n	80075f2 <TIM_OC5_SetConfig+0x76>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a17      	ldr	r2, [pc, #92]	; (8007634 <TIM_OC5_SetConfig+0xb8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_OC5_SetConfig+0x76>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <TIM_OC5_SetConfig+0xbc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_OC5_SetConfig+0x76>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a15      	ldr	r2, [pc, #84]	; (800763c <TIM_OC5_SetConfig+0xc0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_OC5_SetConfig+0x76>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a14      	ldr	r2, [pc, #80]	; (8007640 <TIM_OC5_SetConfig+0xc4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d109      	bne.n	8007606 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	fffeff8f 	.word	0xfffeff8f
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <TIM_OC6_SetConfig+0xb4>)
 8007670:	4013      	ands	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	051b      	lsls	r3, r3, #20
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a19      	ldr	r2, [pc, #100]	; (80076fc <TIM_OC6_SetConfig+0xb8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00f      	beq.n	80076bc <TIM_OC6_SetConfig+0x78>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a18      	ldr	r2, [pc, #96]	; (8007700 <TIM_OC6_SetConfig+0xbc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00b      	beq.n	80076bc <TIM_OC6_SetConfig+0x78>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a17      	ldr	r2, [pc, #92]	; (8007704 <TIM_OC6_SetConfig+0xc0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d007      	beq.n	80076bc <TIM_OC6_SetConfig+0x78>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <TIM_OC6_SetConfig+0xc4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC6_SetConfig+0x78>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a15      	ldr	r2, [pc, #84]	; (800770c <TIM_OC6_SetConfig+0xc8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d109      	bne.n	80076d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	621a      	str	r2, [r3, #32]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	feff8fff 	.word	0xfeff8fff
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400
 8007704:	40014000 	.word	0x40014000
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007724:	2302      	movs	r3, #2
 8007726:	e06d      	b.n	8007804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a30      	ldr	r2, [pc, #192]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a2f      	ldr	r2, [pc, #188]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d022      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779a:	d01d      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d018      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1c      	ldr	r2, [pc, #112]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1a      	ldr	r2, [pc, #104]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a15      	ldr	r2, [pc, #84]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a15      	ldr	r2, [pc, #84]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10c      	bne.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40010000 	.word	0x40010000
 8007814:	40010400 	.word	0x40010400
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40001800 	.word	0x40001800
 8007828:	40014000 	.word	0x40014000

0800782c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007844:	2302      	movs	r3, #2
 8007846:	e065      	b.n	8007914 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d115      	bne.n	8007902 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	051b      	lsls	r3, r3, #20
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <__errno>:
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <__errno+0x8>)
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	240000a0 	.word	0x240000a0

08007934 <__libc_init_array>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4d0d      	ldr	r5, [pc, #52]	; (800796c <__libc_init_array+0x38>)
 8007938:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <__libc_init_array+0x3c>)
 800793a:	1b64      	subs	r4, r4, r5
 800793c:	10a4      	asrs	r4, r4, #2
 800793e:	2600      	movs	r6, #0
 8007940:	42a6      	cmp	r6, r4
 8007942:	d109      	bne.n	8007958 <__libc_init_array+0x24>
 8007944:	4d0b      	ldr	r5, [pc, #44]	; (8007974 <__libc_init_array+0x40>)
 8007946:	4c0c      	ldr	r4, [pc, #48]	; (8007978 <__libc_init_array+0x44>)
 8007948:	f000 fc8e 	bl	8008268 <_init>
 800794c:	1b64      	subs	r4, r4, r5
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	2600      	movs	r6, #0
 8007952:	42a6      	cmp	r6, r4
 8007954:	d105      	bne.n	8007962 <__libc_init_array+0x2e>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	f855 3b04 	ldr.w	r3, [r5], #4
 800795c:	4798      	blx	r3
 800795e:	3601      	adds	r6, #1
 8007960:	e7ee      	b.n	8007940 <__libc_init_array+0xc>
 8007962:	f855 3b04 	ldr.w	r3, [r5], #4
 8007966:	4798      	blx	r3
 8007968:	3601      	adds	r6, #1
 800796a:	e7f2      	b.n	8007952 <__libc_init_array+0x1e>
 800796c:	0800f1d0 	.word	0x0800f1d0
 8007970:	0800f1d0 	.word	0x0800f1d0
 8007974:	0800f1d0 	.word	0x0800f1d0
 8007978:	0800f1d4 	.word	0x0800f1d4

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <siprintf>:
 800798c:	b40e      	push	{r1, r2, r3}
 800798e:	b500      	push	{lr}
 8007990:	b09c      	sub	sp, #112	; 0x70
 8007992:	ab1d      	add	r3, sp, #116	; 0x74
 8007994:	9002      	str	r0, [sp, #8]
 8007996:	9006      	str	r0, [sp, #24]
 8007998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800799c:	4809      	ldr	r0, [pc, #36]	; (80079c4 <siprintf+0x38>)
 800799e:	9107      	str	r1, [sp, #28]
 80079a0:	9104      	str	r1, [sp, #16]
 80079a2:	4909      	ldr	r1, [pc, #36]	; (80079c8 <siprintf+0x3c>)
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	a902      	add	r1, sp, #8
 80079b0:	f000 f868 	bl	8007a84 <_svfiprintf_r>
 80079b4:	9b02      	ldr	r3, [sp, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	b01c      	add	sp, #112	; 0x70
 80079bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c0:	b003      	add	sp, #12
 80079c2:	4770      	bx	lr
 80079c4:	240000a0 	.word	0x240000a0
 80079c8:	ffff0208 	.word	0xffff0208

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	429e      	cmp	r6, r3
 80079d4:	4682      	mov	sl, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4690      	mov	r8, r2
 80079da:	461f      	mov	r7, r3
 80079dc:	d838      	bhi.n	8007a50 <__ssputs_r+0x84>
 80079de:	898a      	ldrh	r2, [r1, #12]
 80079e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079e4:	d032      	beq.n	8007a4c <__ssputs_r+0x80>
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	6909      	ldr	r1, [r1, #16]
 80079ea:	eba5 0901 	sub.w	r9, r5, r1
 80079ee:	6965      	ldr	r5, [r4, #20]
 80079f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079f8:	3301      	adds	r3, #1
 80079fa:	444b      	add	r3, r9
 80079fc:	106d      	asrs	r5, r5, #1
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf38      	it	cc
 8007a02:	461d      	movcc	r5, r3
 8007a04:	0553      	lsls	r3, r2, #21
 8007a06:	d531      	bpl.n	8007a6c <__ssputs_r+0xa0>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f000 fb63 	bl	80080d4 <_malloc_r>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	b950      	cbnz	r0, 8007a28 <__ssputs_r+0x5c>
 8007a12:	230c      	movs	r3, #12
 8007a14:	f8ca 3000 	str.w	r3, [sl]
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	6921      	ldr	r1, [r4, #16]
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	f000 fabe 	bl	8007fac <memcpy>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6126      	str	r6, [r4, #16]
 8007a3e:	6165      	str	r5, [r4, #20]
 8007a40:	444e      	add	r6, r9
 8007a42:	eba5 0509 	sub.w	r5, r5, r9
 8007a46:	6026      	str	r6, [r4, #0]
 8007a48:	60a5      	str	r5, [r4, #8]
 8007a4a:	463e      	mov	r6, r7
 8007a4c:	42be      	cmp	r6, r7
 8007a4e:	d900      	bls.n	8007a52 <__ssputs_r+0x86>
 8007a50:	463e      	mov	r6, r7
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	4632      	mov	r2, r6
 8007a56:	4641      	mov	r1, r8
 8007a58:	f000 fab6 	bl	8007fc8 <memmove>
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	1b9b      	subs	r3, r3, r6
 8007a60:	60a3      	str	r3, [r4, #8]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	4433      	add	r3, r6
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7db      	b.n	8007a24 <__ssputs_r+0x58>
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	f000 fba5 	bl	80081bc <_realloc_r>
 8007a72:	4606      	mov	r6, r0
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1e1      	bne.n	8007a3c <__ssputs_r+0x70>
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	f000 fabe 	bl	8007ffc <_free_r>
 8007a80:	e7c7      	b.n	8007a12 <__ssputs_r+0x46>
	...

08007a84 <_svfiprintf_r>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4698      	mov	r8, r3
 8007a8a:	898b      	ldrh	r3, [r1, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	b09d      	sub	sp, #116	; 0x74
 8007a90:	4607      	mov	r7, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	d50e      	bpl.n	8007ab6 <_svfiprintf_r+0x32>
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b963      	cbnz	r3, 8007ab6 <_svfiprintf_r+0x32>
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	f000 fb19 	bl	80080d4 <_malloc_r>
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	b920      	cbnz	r0, 8007ab2 <_svfiprintf_r+0x2e>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e0d1      	b.n	8007c56 <_svfiprintf_r+0x1d2>
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	616b      	str	r3, [r5, #20]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	2320      	movs	r3, #32
 8007abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac4:	2330      	movs	r3, #48	; 0x30
 8007ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c70 <_svfiprintf_r+0x1ec>
 8007aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ace:	f04f 0901 	mov.w	r9, #1
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	469a      	mov	sl, r3
 8007ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ada:	b10a      	cbz	r2, 8007ae0 <_svfiprintf_r+0x5c>
 8007adc:	2a25      	cmp	r2, #37	; 0x25
 8007ade:	d1f9      	bne.n	8007ad4 <_svfiprintf_r+0x50>
 8007ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae4:	d00b      	beq.n	8007afe <_svfiprintf_r+0x7a>
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	4622      	mov	r2, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff ff6d 	bl	80079cc <__ssputs_r>
 8007af2:	3001      	adds	r0, #1
 8007af4:	f000 80aa 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afa:	445a      	add	r2, fp
 8007afc:	9209      	str	r2, [sp, #36]	; 0x24
 8007afe:	f89a 3000 	ldrb.w	r3, [sl]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80a2 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b12:	f10a 0a01 	add.w	sl, sl, #1
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b20:	4654      	mov	r4, sl
 8007b22:	2205      	movs	r2, #5
 8007b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b28:	4851      	ldr	r0, [pc, #324]	; (8007c70 <_svfiprintf_r+0x1ec>)
 8007b2a:	f7f8 fbd9 	bl	80002e0 <memchr>
 8007b2e:	9a04      	ldr	r2, [sp, #16]
 8007b30:	b9d8      	cbnz	r0, 8007b6a <_svfiprintf_r+0xe6>
 8007b32:	06d0      	lsls	r0, r2, #27
 8007b34:	bf44      	itt	mi
 8007b36:	2320      	movmi	r3, #32
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3c:	0711      	lsls	r1, r2, #28
 8007b3e:	bf44      	itt	mi
 8007b40:	232b      	movmi	r3, #43	; 0x2b
 8007b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b46:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4c:	d015      	beq.n	8007b7a <_svfiprintf_r+0xf6>
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	4654      	mov	r4, sl
 8007b52:	2000      	movs	r0, #0
 8007b54:	f04f 0c0a 	mov.w	ip, #10
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5e:	3b30      	subs	r3, #48	; 0x30
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	d94e      	bls.n	8007c02 <_svfiprintf_r+0x17e>
 8007b64:	b1b0      	cbz	r0, 8007b94 <_svfiprintf_r+0x110>
 8007b66:	9207      	str	r2, [sp, #28]
 8007b68:	e014      	b.n	8007b94 <_svfiprintf_r+0x110>
 8007b6a:	eba0 0308 	sub.w	r3, r0, r8
 8007b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	46a2      	mov	sl, r4
 8007b78:	e7d2      	b.n	8007b20 <_svfiprintf_r+0x9c>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	1d19      	adds	r1, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	9103      	str	r1, [sp, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfbb      	ittet	lt
 8007b86:	425b      	neglt	r3, r3
 8007b88:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8c:	9307      	strge	r3, [sp, #28]
 8007b8e:	9307      	strlt	r3, [sp, #28]
 8007b90:	bfb8      	it	lt
 8007b92:	9204      	strlt	r2, [sp, #16]
 8007b94:	7823      	ldrb	r3, [r4, #0]
 8007b96:	2b2e      	cmp	r3, #46	; 0x2e
 8007b98:	d10c      	bne.n	8007bb4 <_svfiprintf_r+0x130>
 8007b9a:	7863      	ldrb	r3, [r4, #1]
 8007b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9e:	d135      	bne.n	8007c0c <_svfiprintf_r+0x188>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9203      	str	r2, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfb8      	it	lt
 8007bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bb0:	3402      	adds	r4, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c80 <_svfiprintf_r+0x1fc>
 8007bb8:	7821      	ldrb	r1, [r4, #0]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7f8 fb8f 	bl	80002e0 <memchr>
 8007bc2:	b140      	cbz	r0, 8007bd6 <_svfiprintf_r+0x152>
 8007bc4:	2340      	movs	r3, #64	; 0x40
 8007bc6:	eba0 000a 	sub.w	r0, r0, sl
 8007bca:	fa03 f000 	lsl.w	r0, r3, r0
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	4303      	orrs	r3, r0
 8007bd2:	3401      	adds	r4, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4826      	ldr	r0, [pc, #152]	; (8007c74 <_svfiprintf_r+0x1f0>)
 8007bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be0:	2206      	movs	r2, #6
 8007be2:	f7f8 fb7d 	bl	80002e0 <memchr>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d038      	beq.n	8007c5c <_svfiprintf_r+0x1d8>
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <_svfiprintf_r+0x1f4>)
 8007bec:	bb1b      	cbnz	r3, 8007c36 <_svfiprintf_r+0x1b2>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	4433      	add	r3, r6
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	e767      	b.n	8007ad2 <_svfiprintf_r+0x4e>
 8007c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7a5      	b.n	8007b58 <_svfiprintf_r+0xd4>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	3401      	adds	r4, #1
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	4619      	mov	r1, r3
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1e:	3a30      	subs	r2, #48	; 0x30
 8007c20:	2a09      	cmp	r2, #9
 8007c22:	d903      	bls.n	8007c2c <_svfiprintf_r+0x1a8>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0c5      	beq.n	8007bb4 <_svfiprintf_r+0x130>
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	e7c3      	b.n	8007bb4 <_svfiprintf_r+0x130>
 8007c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c30:	4604      	mov	r4, r0
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f0      	b.n	8007c18 <_svfiprintf_r+0x194>
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c3e:	a904      	add	r1, sp, #16
 8007c40:	4638      	mov	r0, r7
 8007c42:	f3af 8000 	nop.w
 8007c46:	1c42      	adds	r2, r0, #1
 8007c48:	4606      	mov	r6, r0
 8007c4a:	d1d6      	bne.n	8007bfa <_svfiprintf_r+0x176>
 8007c4c:	89ab      	ldrh	r3, [r5, #12]
 8007c4e:	065b      	lsls	r3, r3, #25
 8007c50:	f53f af2c 	bmi.w	8007aac <_svfiprintf_r+0x28>
 8007c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c56:	b01d      	add	sp, #116	; 0x74
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4638      	mov	r0, r7
 8007c68:	f000 f87a 	bl	8007d60 <_printf_i>
 8007c6c:	e7eb      	b.n	8007c46 <_svfiprintf_r+0x1c2>
 8007c6e:	bf00      	nop
 8007c70:	0800f19d 	.word	0x0800f19d
 8007c74:	0800f1a7 	.word	0x0800f1a7
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	080079cd 	.word	0x080079cd
 8007c80:	0800f1a3 	.word	0x0800f1a3

08007c84 <_printf_common>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	4616      	mov	r6, r2
 8007c8a:	4699      	mov	r9, r3
 8007c8c:	688a      	ldr	r2, [r1, #8]
 8007c8e:	690b      	ldr	r3, [r1, #16]
 8007c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	bfb8      	it	lt
 8007c98:	4613      	movlt	r3, r2
 8007c9a:	6033      	str	r3, [r6, #0]
 8007c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b10a      	cbz	r2, 8007caa <_printf_common+0x26>
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	6033      	str	r3, [r6, #0]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	0699      	lsls	r1, r3, #26
 8007cae:	bf42      	ittt	mi
 8007cb0:	6833      	ldrmi	r3, [r6, #0]
 8007cb2:	3302      	addmi	r3, #2
 8007cb4:	6033      	strmi	r3, [r6, #0]
 8007cb6:	6825      	ldr	r5, [r4, #0]
 8007cb8:	f015 0506 	ands.w	r5, r5, #6
 8007cbc:	d106      	bne.n	8007ccc <_printf_common+0x48>
 8007cbe:	f104 0a19 	add.w	sl, r4, #25
 8007cc2:	68e3      	ldr	r3, [r4, #12]
 8007cc4:	6832      	ldr	r2, [r6, #0]
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	dc26      	bgt.n	8007d1a <_printf_common+0x96>
 8007ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cd0:	1e13      	subs	r3, r2, #0
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2301      	movne	r3, #1
 8007cd8:	0692      	lsls	r2, r2, #26
 8007cda:	d42b      	bmi.n	8007d34 <_printf_common+0xb0>
 8007cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d01e      	beq.n	8007d28 <_printf_common+0xa4>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	68e5      	ldr	r5, [r4, #12]
 8007cee:	6832      	ldr	r2, [r6, #0]
 8007cf0:	f003 0306 	and.w	r3, r3, #6
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	bf08      	it	eq
 8007cf8:	1aad      	subeq	r5, r5, r2
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	6922      	ldr	r2, [r4, #16]
 8007cfe:	bf0c      	ite	eq
 8007d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d04:	2500      	movne	r5, #0
 8007d06:	4293      	cmp	r3, r2
 8007d08:	bfc4      	itt	gt
 8007d0a:	1a9b      	subgt	r3, r3, r2
 8007d0c:	18ed      	addgt	r5, r5, r3
 8007d0e:	2600      	movs	r6, #0
 8007d10:	341a      	adds	r4, #26
 8007d12:	42b5      	cmp	r5, r6
 8007d14:	d11a      	bne.n	8007d4c <_printf_common+0xc8>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e008      	b.n	8007d2c <_printf_common+0xa8>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4652      	mov	r2, sl
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4638      	mov	r0, r7
 8007d22:	47c0      	blx	r8
 8007d24:	3001      	adds	r0, #1
 8007d26:	d103      	bne.n	8007d30 <_printf_common+0xac>
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d30:	3501      	adds	r5, #1
 8007d32:	e7c6      	b.n	8007cc2 <_printf_common+0x3e>
 8007d34:	18e1      	adds	r1, r4, r3
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	2030      	movs	r0, #48	; 0x30
 8007d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d3e:	4422      	add	r2, r4
 8007d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d48:	3302      	adds	r3, #2
 8007d4a:	e7c7      	b.n	8007cdc <_printf_common+0x58>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	4622      	mov	r2, r4
 8007d50:	4649      	mov	r1, r9
 8007d52:	4638      	mov	r0, r7
 8007d54:	47c0      	blx	r8
 8007d56:	3001      	adds	r0, #1
 8007d58:	d0e6      	beq.n	8007d28 <_printf_common+0xa4>
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7d9      	b.n	8007d12 <_printf_common+0x8e>
	...

08007d60 <_printf_i>:
 8007d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	7e0f      	ldrb	r7, [r1, #24]
 8007d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d68:	2f78      	cmp	r7, #120	; 0x78
 8007d6a:	4691      	mov	r9, r2
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	469a      	mov	sl, r3
 8007d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d76:	d807      	bhi.n	8007d88 <_printf_i+0x28>
 8007d78:	2f62      	cmp	r7, #98	; 0x62
 8007d7a:	d80a      	bhi.n	8007d92 <_printf_i+0x32>
 8007d7c:	2f00      	cmp	r7, #0
 8007d7e:	f000 80d8 	beq.w	8007f32 <_printf_i+0x1d2>
 8007d82:	2f58      	cmp	r7, #88	; 0x58
 8007d84:	f000 80a3 	beq.w	8007ece <_printf_i+0x16e>
 8007d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d90:	e03a      	b.n	8007e08 <_printf_i+0xa8>
 8007d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d96:	2b15      	cmp	r3, #21
 8007d98:	d8f6      	bhi.n	8007d88 <_printf_i+0x28>
 8007d9a:	a101      	add	r1, pc, #4	; (adr r1, 8007da0 <_printf_i+0x40>)
 8007d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007da0:	08007df9 	.word	0x08007df9
 8007da4:	08007e0d 	.word	0x08007e0d
 8007da8:	08007d89 	.word	0x08007d89
 8007dac:	08007d89 	.word	0x08007d89
 8007db0:	08007d89 	.word	0x08007d89
 8007db4:	08007d89 	.word	0x08007d89
 8007db8:	08007e0d 	.word	0x08007e0d
 8007dbc:	08007d89 	.word	0x08007d89
 8007dc0:	08007d89 	.word	0x08007d89
 8007dc4:	08007d89 	.word	0x08007d89
 8007dc8:	08007d89 	.word	0x08007d89
 8007dcc:	08007f19 	.word	0x08007f19
 8007dd0:	08007e3d 	.word	0x08007e3d
 8007dd4:	08007efb 	.word	0x08007efb
 8007dd8:	08007d89 	.word	0x08007d89
 8007ddc:	08007d89 	.word	0x08007d89
 8007de0:	08007f3b 	.word	0x08007f3b
 8007de4:	08007d89 	.word	0x08007d89
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007d89 	.word	0x08007d89
 8007df0:	08007d89 	.word	0x08007d89
 8007df4:	08007f03 	.word	0x08007f03
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	1d1a      	adds	r2, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	602a      	str	r2, [r5, #0]
 8007e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0a3      	b.n	8007f54 <_printf_i+0x1f4>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	6829      	ldr	r1, [r5, #0]
 8007e10:	0606      	lsls	r6, r0, #24
 8007e12:	f101 0304 	add.w	r3, r1, #4
 8007e16:	d50a      	bpl.n	8007e2e <_printf_i+0xce>
 8007e18:	680e      	ldr	r6, [r1, #0]
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	da03      	bge.n	8007e28 <_printf_i+0xc8>
 8007e20:	232d      	movs	r3, #45	; 0x2d
 8007e22:	4276      	negs	r6, r6
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e28:	485e      	ldr	r0, [pc, #376]	; (8007fa4 <_printf_i+0x244>)
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e019      	b.n	8007e62 <_printf_i+0x102>
 8007e2e:	680e      	ldr	r6, [r1, #0]
 8007e30:	602b      	str	r3, [r5, #0]
 8007e32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e36:	bf18      	it	ne
 8007e38:	b236      	sxthne	r6, r6
 8007e3a:	e7ef      	b.n	8007e1c <_printf_i+0xbc>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	6820      	ldr	r0, [r4, #0]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	6029      	str	r1, [r5, #0]
 8007e44:	0601      	lsls	r1, r0, #24
 8007e46:	d501      	bpl.n	8007e4c <_printf_i+0xec>
 8007e48:	681e      	ldr	r6, [r3, #0]
 8007e4a:	e002      	b.n	8007e52 <_printf_i+0xf2>
 8007e4c:	0646      	lsls	r6, r0, #25
 8007e4e:	d5fb      	bpl.n	8007e48 <_printf_i+0xe8>
 8007e50:	881e      	ldrh	r6, [r3, #0]
 8007e52:	4854      	ldr	r0, [pc, #336]	; (8007fa4 <_printf_i+0x244>)
 8007e54:	2f6f      	cmp	r7, #111	; 0x6f
 8007e56:	bf0c      	ite	eq
 8007e58:	2308      	moveq	r3, #8
 8007e5a:	230a      	movne	r3, #10
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e62:	6865      	ldr	r5, [r4, #4]
 8007e64:	60a5      	str	r5, [r4, #8]
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	bfa2      	ittt	ge
 8007e6a:	6821      	ldrge	r1, [r4, #0]
 8007e6c:	f021 0104 	bicge.w	r1, r1, #4
 8007e70:	6021      	strge	r1, [r4, #0]
 8007e72:	b90e      	cbnz	r6, 8007e78 <_printf_i+0x118>
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	d04d      	beq.n	8007f14 <_printf_i+0x1b4>
 8007e78:	4615      	mov	r5, r2
 8007e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e82:	5dc7      	ldrb	r7, [r0, r7]
 8007e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e88:	4637      	mov	r7, r6
 8007e8a:	42bb      	cmp	r3, r7
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	d9f4      	bls.n	8007e7a <_printf_i+0x11a>
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d10b      	bne.n	8007eac <_printf_i+0x14c>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	07de      	lsls	r6, r3, #31
 8007e98:	d508      	bpl.n	8007eac <_printf_i+0x14c>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	6861      	ldr	r1, [r4, #4]
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	bfde      	ittt	le
 8007ea2:	2330      	movle	r3, #48	; 0x30
 8007ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007eac:	1b52      	subs	r2, r2, r5
 8007eae:	6122      	str	r2, [r4, #16]
 8007eb0:	f8cd a000 	str.w	sl, [sp]
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	aa03      	add	r2, sp, #12
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4640      	mov	r0, r8
 8007ebc:	f7ff fee2 	bl	8007c84 <_printf_common>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d14c      	bne.n	8007f5e <_printf_i+0x1fe>
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	b004      	add	sp, #16
 8007eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ece:	4835      	ldr	r0, [pc, #212]	; (8007fa4 <_printf_i+0x244>)
 8007ed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ed4:	6829      	ldr	r1, [r5, #0]
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007edc:	6029      	str	r1, [r5, #0]
 8007ede:	061d      	lsls	r5, r3, #24
 8007ee0:	d514      	bpl.n	8007f0c <_printf_i+0x1ac>
 8007ee2:	07df      	lsls	r7, r3, #31
 8007ee4:	bf44      	itt	mi
 8007ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eea:	6023      	strmi	r3, [r4, #0]
 8007eec:	b91e      	cbnz	r6, 8007ef6 <_printf_i+0x196>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	f023 0320 	bic.w	r3, r3, #32
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	e7b0      	b.n	8007e5c <_printf_i+0xfc>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	f043 0320 	orr.w	r3, r3, #32
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	2378      	movs	r3, #120	; 0x78
 8007f04:	4828      	ldr	r0, [pc, #160]	; (8007fa8 <_printf_i+0x248>)
 8007f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f0a:	e7e3      	b.n	8007ed4 <_printf_i+0x174>
 8007f0c:	0659      	lsls	r1, r3, #25
 8007f0e:	bf48      	it	mi
 8007f10:	b2b6      	uxthmi	r6, r6
 8007f12:	e7e6      	b.n	8007ee2 <_printf_i+0x182>
 8007f14:	4615      	mov	r5, r2
 8007f16:	e7bb      	b.n	8007e90 <_printf_i+0x130>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	6826      	ldr	r6, [r4, #0]
 8007f1c:	6961      	ldr	r1, [r4, #20]
 8007f1e:	1d18      	adds	r0, r3, #4
 8007f20:	6028      	str	r0, [r5, #0]
 8007f22:	0635      	lsls	r5, r6, #24
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	d501      	bpl.n	8007f2c <_printf_i+0x1cc>
 8007f28:	6019      	str	r1, [r3, #0]
 8007f2a:	e002      	b.n	8007f32 <_printf_i+0x1d2>
 8007f2c:	0670      	lsls	r0, r6, #25
 8007f2e:	d5fb      	bpl.n	8007f28 <_printf_i+0x1c8>
 8007f30:	8019      	strh	r1, [r3, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	4615      	mov	r5, r2
 8007f38:	e7ba      	b.n	8007eb0 <_printf_i+0x150>
 8007f3a:	682b      	ldr	r3, [r5, #0]
 8007f3c:	1d1a      	adds	r2, r3, #4
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	681d      	ldr	r5, [r3, #0]
 8007f42:	6862      	ldr	r2, [r4, #4]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 f9ca 	bl	80002e0 <memchr>
 8007f4c:	b108      	cbz	r0, 8007f52 <_printf_i+0x1f2>
 8007f4e:	1b40      	subs	r0, r0, r5
 8007f50:	6060      	str	r0, [r4, #4]
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	2300      	movs	r3, #0
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	e7a8      	b.n	8007eb0 <_printf_i+0x150>
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d0ab      	beq.n	8007ec4 <_printf_i+0x164>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	079b      	lsls	r3, r3, #30
 8007f70:	d413      	bmi.n	8007f9a <_printf_i+0x23a>
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	4298      	cmp	r0, r3
 8007f78:	bfb8      	it	lt
 8007f7a:	4618      	movlt	r0, r3
 8007f7c:	e7a4      	b.n	8007ec8 <_printf_i+0x168>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4632      	mov	r2, r6
 8007f82:	4649      	mov	r1, r9
 8007f84:	4640      	mov	r0, r8
 8007f86:	47d0      	blx	sl
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d09b      	beq.n	8007ec4 <_printf_i+0x164>
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	9903      	ldr	r1, [sp, #12]
 8007f92:	1a5b      	subs	r3, r3, r1
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	dcf2      	bgt.n	8007f7e <_printf_i+0x21e>
 8007f98:	e7eb      	b.n	8007f72 <_printf_i+0x212>
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	f104 0619 	add.w	r6, r4, #25
 8007fa0:	e7f5      	b.n	8007f8e <_printf_i+0x22e>
 8007fa2:	bf00      	nop
 8007fa4:	0800f1ae 	.word	0x0800f1ae
 8007fa8:	0800f1bf 	.word	0x0800f1bf

08007fac <memcpy>:
 8007fac:	440a      	add	r2, r1
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fb4:	d100      	bne.n	8007fb8 <memcpy+0xc>
 8007fb6:	4770      	bx	lr
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc2:	4291      	cmp	r1, r2
 8007fc4:	d1f9      	bne.n	8007fba <memcpy+0xe>
 8007fc6:	bd10      	pop	{r4, pc}

08007fc8 <memmove>:
 8007fc8:	4288      	cmp	r0, r1
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	eb01 0402 	add.w	r4, r1, r2
 8007fd0:	d902      	bls.n	8007fd8 <memmove+0x10>
 8007fd2:	4284      	cmp	r4, r0
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	d807      	bhi.n	8007fe8 <memmove+0x20>
 8007fd8:	1e43      	subs	r3, r0, #1
 8007fda:	42a1      	cmp	r1, r4
 8007fdc:	d008      	beq.n	8007ff0 <memmove+0x28>
 8007fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fe6:	e7f8      	b.n	8007fda <memmove+0x12>
 8007fe8:	4402      	add	r2, r0
 8007fea:	4601      	mov	r1, r0
 8007fec:	428a      	cmp	r2, r1
 8007fee:	d100      	bne.n	8007ff2 <memmove+0x2a>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ffa:	e7f7      	b.n	8007fec <memmove+0x24>

08007ffc <_free_r>:
 8007ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d044      	beq.n	800808c <_free_r+0x90>
 8008002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008006:	9001      	str	r0, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f1a1 0404 	sub.w	r4, r1, #4
 800800e:	bfb8      	it	lt
 8008010:	18e4      	addlt	r4, r4, r3
 8008012:	f000 f913 	bl	800823c <__malloc_lock>
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <_free_r+0x94>)
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	b933      	cbnz	r3, 800802c <_free_r+0x30>
 800801e:	6063      	str	r3, [r4, #4]
 8008020:	6014      	str	r4, [r2, #0]
 8008022:	b003      	add	sp, #12
 8008024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008028:	f000 b90e 	b.w	8008248 <__malloc_unlock>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d908      	bls.n	8008042 <_free_r+0x46>
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	1961      	adds	r1, r4, r5
 8008034:	428b      	cmp	r3, r1
 8008036:	bf01      	itttt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	e7ed      	b.n	800801e <_free_r+0x22>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x50>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x46>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1855      	adds	r5, r2, r1
 8008050:	42a5      	cmp	r5, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x70>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	4421      	add	r1, r4
 8008058:	1854      	adds	r4, r2, r1
 800805a:	42a3      	cmp	r3, r4
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1e0      	bne.n	8008022 <_free_r+0x26>
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	6053      	str	r3, [r2, #4]
 8008066:	4421      	add	r1, r4
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	e7da      	b.n	8008022 <_free_r+0x26>
 800806c:	d902      	bls.n	8008074 <_free_r+0x78>
 800806e:	230c      	movs	r3, #12
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	e7d6      	b.n	8008022 <_free_r+0x26>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1961      	adds	r1, r4, r5
 8008078:	428b      	cmp	r3, r1
 800807a:	bf04      	itt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	6054      	str	r4, [r2, #4]
 800808a:	e7ca      	b.n	8008022 <_free_r+0x26>
 800808c:	b003      	add	sp, #12
 800808e:	bd30      	pop	{r4, r5, pc}
 8008090:	24000770 	.word	0x24000770

08008094 <sbrk_aligned>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4e0e      	ldr	r6, [pc, #56]	; (80080d0 <sbrk_aligned+0x3c>)
 8008098:	460c      	mov	r4, r1
 800809a:	6831      	ldr	r1, [r6, #0]
 800809c:	4605      	mov	r5, r0
 800809e:	b911      	cbnz	r1, 80080a6 <sbrk_aligned+0x12>
 80080a0:	f000 f8bc 	bl	800821c <_sbrk_r>
 80080a4:	6030      	str	r0, [r6, #0]
 80080a6:	4621      	mov	r1, r4
 80080a8:	4628      	mov	r0, r5
 80080aa:	f000 f8b7 	bl	800821c <_sbrk_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d00a      	beq.n	80080c8 <sbrk_aligned+0x34>
 80080b2:	1cc4      	adds	r4, r0, #3
 80080b4:	f024 0403 	bic.w	r4, r4, #3
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d007      	beq.n	80080cc <sbrk_aligned+0x38>
 80080bc:	1a21      	subs	r1, r4, r0
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f8ac 	bl	800821c <_sbrk_r>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d101      	bne.n	80080cc <sbrk_aligned+0x38>
 80080c8:	f04f 34ff 	mov.w	r4, #4294967295
 80080cc:	4620      	mov	r0, r4
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	24000774 	.word	0x24000774

080080d4 <_malloc_r>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	1ccd      	adds	r5, r1, #3
 80080da:	f025 0503 	bic.w	r5, r5, #3
 80080de:	3508      	adds	r5, #8
 80080e0:	2d0c      	cmp	r5, #12
 80080e2:	bf38      	it	cc
 80080e4:	250c      	movcc	r5, #12
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	4607      	mov	r7, r0
 80080ea:	db01      	blt.n	80080f0 <_malloc_r+0x1c>
 80080ec:	42a9      	cmp	r1, r5
 80080ee:	d905      	bls.n	80080fc <_malloc_r+0x28>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	2600      	movs	r6, #0
 80080f6:	4630      	mov	r0, r6
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	4e2e      	ldr	r6, [pc, #184]	; (80081b8 <_malloc_r+0xe4>)
 80080fe:	f000 f89d 	bl	800823c <__malloc_lock>
 8008102:	6833      	ldr	r3, [r6, #0]
 8008104:	461c      	mov	r4, r3
 8008106:	bb34      	cbnz	r4, 8008156 <_malloc_r+0x82>
 8008108:	4629      	mov	r1, r5
 800810a:	4638      	mov	r0, r7
 800810c:	f7ff ffc2 	bl	8008094 <sbrk_aligned>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	4604      	mov	r4, r0
 8008114:	d14d      	bne.n	80081b2 <_malloc_r+0xde>
 8008116:	6834      	ldr	r4, [r6, #0]
 8008118:	4626      	mov	r6, r4
 800811a:	2e00      	cmp	r6, #0
 800811c:	d140      	bne.n	80081a0 <_malloc_r+0xcc>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	4631      	mov	r1, r6
 8008122:	4638      	mov	r0, r7
 8008124:	eb04 0803 	add.w	r8, r4, r3
 8008128:	f000 f878 	bl	800821c <_sbrk_r>
 800812c:	4580      	cmp	r8, r0
 800812e:	d13a      	bne.n	80081a6 <_malloc_r+0xd2>
 8008130:	6821      	ldr	r1, [r4, #0]
 8008132:	3503      	adds	r5, #3
 8008134:	1a6d      	subs	r5, r5, r1
 8008136:	f025 0503 	bic.w	r5, r5, #3
 800813a:	3508      	adds	r5, #8
 800813c:	2d0c      	cmp	r5, #12
 800813e:	bf38      	it	cc
 8008140:	250c      	movcc	r5, #12
 8008142:	4629      	mov	r1, r5
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff ffa5 	bl	8008094 <sbrk_aligned>
 800814a:	3001      	adds	r0, #1
 800814c:	d02b      	beq.n	80081a6 <_malloc_r+0xd2>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	442b      	add	r3, r5
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	e00e      	b.n	8008174 <_malloc_r+0xa0>
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	1b52      	subs	r2, r2, r5
 800815a:	d41e      	bmi.n	800819a <_malloc_r+0xc6>
 800815c:	2a0b      	cmp	r2, #11
 800815e:	d916      	bls.n	800818e <_malloc_r+0xba>
 8008160:	1961      	adds	r1, r4, r5
 8008162:	42a3      	cmp	r3, r4
 8008164:	6025      	str	r5, [r4, #0]
 8008166:	bf18      	it	ne
 8008168:	6059      	strne	r1, [r3, #4]
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	bf08      	it	eq
 800816e:	6031      	streq	r1, [r6, #0]
 8008170:	5162      	str	r2, [r4, r5]
 8008172:	604b      	str	r3, [r1, #4]
 8008174:	4638      	mov	r0, r7
 8008176:	f104 060b 	add.w	r6, r4, #11
 800817a:	f000 f865 	bl	8008248 <__malloc_unlock>
 800817e:	f026 0607 	bic.w	r6, r6, #7
 8008182:	1d23      	adds	r3, r4, #4
 8008184:	1af2      	subs	r2, r6, r3
 8008186:	d0b6      	beq.n	80080f6 <_malloc_r+0x22>
 8008188:	1b9b      	subs	r3, r3, r6
 800818a:	50a3      	str	r3, [r4, r2]
 800818c:	e7b3      	b.n	80080f6 <_malloc_r+0x22>
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	42a3      	cmp	r3, r4
 8008192:	bf0c      	ite	eq
 8008194:	6032      	streq	r2, [r6, #0]
 8008196:	605a      	strne	r2, [r3, #4]
 8008198:	e7ec      	b.n	8008174 <_malloc_r+0xa0>
 800819a:	4623      	mov	r3, r4
 800819c:	6864      	ldr	r4, [r4, #4]
 800819e:	e7b2      	b.n	8008106 <_malloc_r+0x32>
 80081a0:	4634      	mov	r4, r6
 80081a2:	6876      	ldr	r6, [r6, #4]
 80081a4:	e7b9      	b.n	800811a <_malloc_r+0x46>
 80081a6:	230c      	movs	r3, #12
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	4638      	mov	r0, r7
 80081ac:	f000 f84c 	bl	8008248 <__malloc_unlock>
 80081b0:	e7a1      	b.n	80080f6 <_malloc_r+0x22>
 80081b2:	6025      	str	r5, [r4, #0]
 80081b4:	e7de      	b.n	8008174 <_malloc_r+0xa0>
 80081b6:	bf00      	nop
 80081b8:	24000770 	.word	0x24000770

080081bc <_realloc_r>:
 80081bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c0:	4680      	mov	r8, r0
 80081c2:	4614      	mov	r4, r2
 80081c4:	460e      	mov	r6, r1
 80081c6:	b921      	cbnz	r1, 80081d2 <_realloc_r+0x16>
 80081c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	4611      	mov	r1, r2
 80081ce:	f7ff bf81 	b.w	80080d4 <_malloc_r>
 80081d2:	b92a      	cbnz	r2, 80081e0 <_realloc_r+0x24>
 80081d4:	f7ff ff12 	bl	8007ffc <_free_r>
 80081d8:	4625      	mov	r5, r4
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	f000 f838 	bl	8008254 <_malloc_usable_size_r>
 80081e4:	4284      	cmp	r4, r0
 80081e6:	4607      	mov	r7, r0
 80081e8:	d802      	bhi.n	80081f0 <_realloc_r+0x34>
 80081ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081ee:	d812      	bhi.n	8008216 <_realloc_r+0x5a>
 80081f0:	4621      	mov	r1, r4
 80081f2:	4640      	mov	r0, r8
 80081f4:	f7ff ff6e 	bl	80080d4 <_malloc_r>
 80081f8:	4605      	mov	r5, r0
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0ed      	beq.n	80081da <_realloc_r+0x1e>
 80081fe:	42bc      	cmp	r4, r7
 8008200:	4622      	mov	r2, r4
 8008202:	4631      	mov	r1, r6
 8008204:	bf28      	it	cs
 8008206:	463a      	movcs	r2, r7
 8008208:	f7ff fed0 	bl	8007fac <memcpy>
 800820c:	4631      	mov	r1, r6
 800820e:	4640      	mov	r0, r8
 8008210:	f7ff fef4 	bl	8007ffc <_free_r>
 8008214:	e7e1      	b.n	80081da <_realloc_r+0x1e>
 8008216:	4635      	mov	r5, r6
 8008218:	e7df      	b.n	80081da <_realloc_r+0x1e>
	...

0800821c <_sbrk_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_sbrk_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f8 fbec 	bl	8000a04 <_sbrk>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_sbrk_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_sbrk_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	24000778 	.word	0x24000778

0800823c <__malloc_lock>:
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <__malloc_lock+0x8>)
 800823e:	f000 b811 	b.w	8008264 <__retarget_lock_acquire_recursive>
 8008242:	bf00      	nop
 8008244:	2400077c 	.word	0x2400077c

08008248 <__malloc_unlock>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__malloc_unlock+0x8>)
 800824a:	f000 b80c 	b.w	8008266 <__retarget_lock_release_recursive>
 800824e:	bf00      	nop
 8008250:	2400077c 	.word	0x2400077c

08008254 <_malloc_usable_size_r>:
 8008254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008258:	1f18      	subs	r0, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfbc      	itt	lt
 800825e:	580b      	ldrlt	r3, [r1, r0]
 8008260:	18c0      	addlt	r0, r0, r3
 8008262:	4770      	bx	lr

08008264 <__retarget_lock_acquire_recursive>:
 8008264:	4770      	bx	lr

08008266 <__retarget_lock_release_recursive>:
 8008266:	4770      	bx	lr

08008268 <_init>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr

08008274 <_fini>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr
